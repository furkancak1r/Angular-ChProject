{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"canvas\"];\nfunction HomeComponent_ng_container_12_ng_container_7_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r6 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r6 === 0 ? \"Yataydaki 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Yataydaki \" + (i_r6 + 1) + \". \\u00E7izginin \" + i_r6 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r6);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r6);\n  }\n}\nfunction HomeComponent_ng_container_12_ng_container_7_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r8 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r8 === 0 ? \"Dikeyde 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Dikeyde \" + (i_r8 + 1) + \". \\u00E7izginin \" + i_r8 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r8);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r8);\n  }\n}\nfunction HomeComponent_ng_container_12_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 14);\n    i0.ɵɵtemplate(2, HomeComponent_ng_container_12_ng_container_7_ng_container_2_Template, 4, 3, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 16);\n    i0.ɵɵtemplate(4, HomeComponent_ng_container_12_ng_container_7_ng_container_4_Template, 4, 3, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getLinesArray(ctx_r2.otherDataForm.controls[\"horizontalLines\"].value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getLinesArray(ctx_r2.otherDataForm.controls[\"verticalLines\"].value));\n  }\n}\nfunction HomeComponent_ng_container_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\", 10);\n    i0.ɵɵtext(2, \"Yatayda ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 11);\n    i0.ɵɵelementStart(4, \"label\", 12);\n    i0.ɵɵtext(5, \"Dikeyde ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 13);\n    i0.ɵɵtemplate(7, HomeComponent_ng_container_12_ng_container_7_Template, 5, 2, \"ng-container\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.otherDataForm.controls[\"horizontalLines\"].value > 0 && ctx_r1.otherDataForm.controls[\"verticalLines\"].value > 0);\n  }\n}\nexport class HomeComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({})\n    });\n  }\n  ngOnInit() {\n    // Subscribe to valueChanges observable of horizontalLines form control\n    this.otherDataForm.get('horizontalLines')?.valueChanges.subscribe(value => {\n      // Call addHorizontalDistances() with the new value of horizontalLines form control\n      this.addHorizontalDistances(value);\n    });\n    // Subscribe to valueChanges observable of verticalLines form control\n    this.otherDataForm.get('verticalLines')?.valueChanges.subscribe(value => {\n      // Call addVerticalDistances() with the new value of verticalLines form control\n      this.addVerticalDistances(value);\n    });\n    // Subscribe to valueChanges observable of otherDataForm and call drawRectangle() method when any value changes.\n    this.otherDataForm.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n  }\n  ngAfterViewInit() {\n    // Set initial size of canvas element.\n    const canvas = this.canvas.nativeElement;\n    canvas.width = 800;\n    canvas.height = 600;\n  }\n  onSubmit() {\n    // Access the values of distances for horizontal and vertical lines\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n    // Log the distances for horizontal and vertical lines\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n    // Clear the form after submission (optional)\n    this.otherDataForm.reset();\n  }\n  getLinesArray(lineCount) {\n    return Array(lineCount).fill(0).map((_, index) => index + 1);\n  }\n  addHorizontalDistances(count) {\n    const horizontalDistances = this.otherDataForm.get('horizontalDistances');\n    horizontalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      horizontalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n  }\n  addVerticalDistances(count) {\n    const verticalDistances = this.otherDataForm.get('verticalDistances');\n    verticalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      verticalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n  }\n  drawRectangle() {\n    const width = this.otherDataForm.value.width;\n    const height = this.otherDataForm.value.height;\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const parentElement = canvas.parentElement;\n    if (!parentElement) return;\n    const parentWidth = parentElement.clientWidth;\n    const parentHeight = parentElement.clientHeight;\n    const scale = Math.min(parentWidth / width, parentHeight / height);\n    const scaledWidth = width * scale;\n    const scaledHeight = height * scale;\n    const offsetX = (parentWidth - scaledWidth) / 2;\n    const offsetY = (parentHeight - scaledHeight) / 2;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.beginPath();\n    ctx.rect(offsetX, offsetY, scaledWidth, scaledHeight);\n    ctx.stroke();\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = 'black';\n    let currentY = 10 + offsetY;\n    for (const key in horizontalDistances) {\n      if (horizontalDistances.hasOwnProperty(key)) {\n        const distance = horizontalDistances[key];\n        if (distance !== null) {\n          const isBeyondBounds = currentY > scaledHeight + 10 + offsetY;\n          if (!isBeyondBounds) {\n            // Draw the text\n            ctx.fillText(`${distance} mm`, scaledWidth + 20 + offsetX, currentY);\n            ctx.beginPath();\n            ctx.moveTo(scaledWidth + 5 + offsetX, currentY);\n            ctx.lineTo(scaledWidth + 15 + offsetX, currentY);\n            ctx.stroke();\n          }\n          currentY += 50;\n        }\n      }\n    }\n    let currentX = 10 + offsetX;\n    for (const key in verticalDistances) {\n      if (verticalDistances.hasOwnProperty(key)) {\n        const distance = verticalDistances[key];\n        if (distance !== null) {\n          const isBeyondBounds = currentX > scaledWidth + 10 + offsetX;\n          if (!isBeyondBounds) {\n            // Draw the text\n            ctx.fillText(`${distance} mm`, currentX, scaledHeight + 40 + offsetY);\n            ctx.beginPath();\n            ctx.moveTo(currentX, scaledHeight + 25 + offsetY);\n            ctx.lineTo(currentX, scaledHeight + 35 + offsetY);\n            ctx.stroke();\n          }\n          currentX += 50;\n        }\n      }\n    }\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  viewQuery: function HomeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n    }\n  },\n  decls: 15,\n  vars: 2,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [\"canvas\", \"\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"width\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"width\", \"name\", \"width\", \"formControlName\", \"width\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"height\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"height\", \"name\", \"height\", \"formControlName\", \"height\", 1, \"form-control\", \"form-control-sm\"], [4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"for\", \"horizontalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"horizontalLines\", \"name\", \"horizontalLines\", \"formControlName\", \"horizontalLines\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"verticalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"verticalLines\", \"name\", \"verticalLines\", \"formControlName\", \"verticalLines\", 1, \"form-control\", \"form-control-sm\"], [\"formGroupName\", \"horizontalDistances\"], [4, \"ngFor\", \"ngForOf\"], [\"formGroupName\", \"verticalDistances\"], [\"type\", \"number\", 1, \"form-control\", \"form-control-sm\", 3, \"name\", \"formControlName\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"canvas\", null, 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 1)(5, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(6, \"label\", 4);\n      i0.ɵɵtext(7, \"Dikd\\u00F6rtgenin geni\\u015Fli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 5);\n      i0.ɵɵelementStart(9, \"label\", 6);\n      i0.ɵɵtext(10, \"Dikd\\u00F6rtgenin y\\u00FCksekli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 7);\n      i0.ɵɵtemplate(12, HomeComponent_ng_container_12_Template, 8, 1, \"ng-container\", 8);\n      i0.ɵɵelementStart(13, \"button\", 9);\n      i0.ɵɵtext(14, \"G\\u00F6nder\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.otherDataForm.controls[\"width\"].value > 0 && ctx.otherDataForm.controls[\"height\"].value > 0);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","HomeComponent","constructor","formBuilder","otherDataForm","group","width","height","horizontalLines","verticalLines","horizontalDistances","verticalDistances","ngOnInit","get","valueChanges","subscribe","value","addHorizontalDistances","addVerticalDistances","drawRectangle","ngAfterViewInit","canvas","nativeElement","onSubmit","console","log","reset","getLinesArray","lineCount","Array","fill","map","_","index","count","i","addControl","control","ctx","getContext","parentElement","parentWidth","clientWidth","parentHeight","clientHeight","scale","Math","min","scaledWidth","scaledHeight","offsetX","offsetY","clearRect","beginPath","rect","stroke","font","textAlign","textBaseline","fillStyle","currentY","key","hasOwnProperty","distance","isBeyondBounds","fillText","moveTo","lineTo","currentX","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-home',\n  template: `\n    <div\n      style=\"display: flex; justify-content: space-between; align-items: center; height: 100vh;\"\n    >\n      <div class=\"col-md-4\">\n        <canvas #canvas></canvas>\n      </div>\n      <div class=\"col-md-4\">\n        <form\n          [formGroup]=\"otherDataForm\"\n          (ngSubmit)=\"onSubmit()\"\n          class=\"form-group mb-3\"\n        >\n          <label for=\"width\" class=\"mr-2\">Dikdörtgenin genişliği (mm):</label>\n          <input\n            type=\"number\"\n            id=\"width\"\n            name=\"width\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"width\"\n          />\n\n          <label for=\"height\" class=\"mr-2\">Dikdörtgenin yüksekliği (mm):</label>\n          <input\n            type=\"number\"\n            id=\"height\"\n            name=\"height\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"height\"\n          />\n\n          <ng-container\n            *ngIf=\"\n              otherDataForm.controls['width'].value > 0 &&\n              otherDataForm.controls['height'].value > 0\n            \"\n          >\n            <label for=\"horizontalLines\" class=\"mr-2\"\n              >Yatayda kaç adet çizgi olsun:</label\n            >\n            <input\n              type=\"number\"\n              id=\"horizontalLines\"\n              name=\"horizontalLines\"\n              class=\"form-control form-control-sm\"\n              formControlName=\"horizontalLines\"\n            />\n\n            <label for=\"verticalLines\" class=\"mr-2\"\n              >Dikeyde kaç adet çizgi olsun:</label\n            >\n            <input\n              type=\"number\"\n              id=\"verticalLines\"\n              name=\"verticalLines\"\n              class=\"form-control form-control-sm\"\n              formControlName=\"verticalLines\"\n            />\n\n            <ng-container\n              *ngIf=\"\n                otherDataForm.controls['horizontalLines'].value > 0 &&\n                otherDataForm.controls['verticalLines'].value > 0\n              \"\n            >\n              <div formGroupName=\"horizontalDistances\">\n                <ng-container\n                  *ngFor=\"\n                    let line of this.getLinesArray(\n                      otherDataForm.controls['horizontalLines'].value\n                    );\n                    let i = index\n                  \"\n                >\n                  <!-- this anahtar kelimesini ekledim -->\n                  <label>\n                    {{\n                      i === 0\n                        ? 'Yataydaki 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:'\n                        : 'Yataydaki ' +\n                          (i + 1) +\n                          '. çizginin ' +\n                          i +\n                          '. çizgi ile arasındaki mesafe kaç mm olmalı:'\n                    }}\n                    <input\n                      type=\"number\"\n                      name=\"{{ 'distance_' + i }}\"\n                      class=\"form-control form-control-sm\"\n                      formControlName=\"{{ 'distance_' + i }}\"\n                    />\n                  </label>\n                </ng-container>\n              </div>\n\n              <div formGroupName=\"verticalDistances\">\n                <ng-container\n                  *ngFor=\"\n                    let line of this.getLinesArray(\n                      otherDataForm.controls['verticalLines'].value\n                    );\n                    let i = index\n                  \"\n                >\n                  <!-- this anahtar kelimesini ekledim -->\n                  <label>\n                    {{\n                      i === 0\n                        ? 'Dikeyde 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:'\n                        : 'Dikeyde ' +\n                          (i + 1) +\n                          '. çizginin ' +\n                          i +\n                          '. çizgi ile arasındaki mesafe kaç mm olmalı:'\n                    }}\n                    <input\n                      type=\"number\"\n                      name=\"{{ 'distance_' + i }}\"\n                      class=\"form-control form-control-sm\"\n                      formControlName=\"{{ 'distance_' + i }}\"\n                    />\n                  </label>\n                </ng-container>\n              </div>\n            </ng-container>\n          </ng-container>\n\n          <button type=\"submit\" class=\"btn btn-primary\">Gönder</button>\n        </form>\n      </div>\n    </div>\n  `,\n})\nexport class HomeComponent implements OnInit {\n  @ViewChild('canvas') canvas!: ElementRef<HTMLCanvasElement>;\n  otherDataForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({}),\n    });\n  }\n\n  ngOnInit(): void {\n    // Subscribe to valueChanges observable of horizontalLines form control\n    this.otherDataForm\n      .get('horizontalLines')\n      ?.valueChanges.subscribe((value) => {\n        // Call addHorizontalDistances() with the new value of horizontalLines form control\n        this.addHorizontalDistances(value);\n      });\n\n    // Subscribe to valueChanges observable of verticalLines form control\n    this.otherDataForm.get('verticalLines')?.valueChanges.subscribe((value) => {\n      // Call addVerticalDistances() with the new value of verticalLines form control\n      this.addVerticalDistances(value);\n    });\n\n    // Subscribe to valueChanges observable of otherDataForm and call drawRectangle() method when any value changes.\n    this.otherDataForm.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n  }\n\n  ngAfterViewInit(): void {\n    // Set initial size of canvas element.\n    const canvas = this.canvas.nativeElement;\n    canvas.width = 800;\n    canvas.height = 600;\n  }\n\n  onSubmit(): void {\n    // Access the values of distances for horizontal and vertical lines\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n\n    // Log the distances for horizontal and vertical lines\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n\n    // Clear the form after submission (optional)\n    this.otherDataForm.reset();\n  }\n\n  getLinesArray(lineCount: number): number[] {\n    return Array(lineCount)\n      .fill(0)\n      .map((_, index) => index + 1);\n  }\n\n  addHorizontalDistances(count: number): void {\n    const horizontalDistances = this.otherDataForm.get(\n      'horizontalDistances'\n    ) as FormGroup;\n    horizontalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      horizontalDistances.addControl(\n        `distance_${i}`,\n        this.formBuilder.control(null)\n      );\n    }\n  }\n\n  addVerticalDistances(count: number): void {\n    const verticalDistances = this.otherDataForm.get(\n      'verticalDistances'\n    ) as FormGroup;\n    verticalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      verticalDistances.addControl(\n        `distance_${i}`,\n        this.formBuilder.control(null)\n      );\n    }\n  }\n\n  drawRectangle(): void {\n    const width = this.otherDataForm.value.width;\n    const height = this.otherDataForm.value.height;\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) return;\n\n    const parentElement = canvas.parentElement;\n    if (!parentElement) return;\n\n    const parentWidth = parentElement.clientWidth;\n    const parentHeight = parentElement.clientHeight;\n\n    const scale = Math.min(parentWidth / width, parentHeight / height);\n    const scaledWidth = width * scale;\n    const scaledHeight = height * scale;\n    const offsetX = (parentWidth - scaledWidth) / 2;\n    const offsetY = (parentHeight - scaledHeight) / 2;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    ctx.beginPath();\n    ctx.rect(offsetX, offsetY, scaledWidth, scaledHeight);\n    ctx.stroke();\n\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = 'black';\n\n    let currentY = 10 + offsetY;\n    for (const key in horizontalDistances) {\n      if (horizontalDistances.hasOwnProperty(key)) {\n        const distance = horizontalDistances[key];\n        if (distance !== null) {\n          const isBeyondBounds = currentY > scaledHeight + 10 + offsetY;\n          if (!isBeyondBounds) {\n            // Draw the text\n            ctx.fillText(\n              `${distance} mm`,\n              scaledWidth + 20 + offsetX,\n              currentY\n            );\n            ctx.beginPath();\n            ctx.moveTo(scaledWidth + 5 + offsetX, currentY);\n            ctx.lineTo(scaledWidth + 15 + offsetX, currentY);\n            ctx.stroke();\n          }\n          currentY += 50;\n        }\n      }\n    }\n\n    let currentX = 10 + offsetX;\n    for (const key in verticalDistances) {\n      if (verticalDistances.hasOwnProperty(key)) {\n        const distance = verticalDistances[key];\n        if (distance !== null) {\n          const isBeyondBounds = currentX > scaledWidth + 10 + offsetX;\n          if (!isBeyondBounds) {\n            // Draw the text\n            ctx.fillText(\n              `${distance} mm`,\n              currentX,\n              scaledHeight + 40 + offsetY\n            );\n            ctx.beginPath();\n            ctx.moveTo(currentX, scaledHeight + 25 + offsetY);\n            ctx.lineTo(currentX, scaledHeight + 35 + offsetY);\n            ctx.stroke();\n          }\n          currentX += 50;\n        }\n      }\n    }\n  }\n\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}