{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"canvas\"];\nfunction HomeComponent_ng_container_12_ng_container_7_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r6 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r6 === 0 ? \"Yataydaki 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Yataydaki \" + (i_r6 + 1) + \". \\u00E7izginin \" + i_r6 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r6);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r6);\n  }\n}\nfunction HomeComponent_ng_container_12_ng_container_7_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r8 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r8 === 0 ? \"Dikeyde 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Dikeyde \" + (i_r8 + 1) + \". \\u00E7izginin \" + i_r8 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r8);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r8);\n  }\n}\nfunction HomeComponent_ng_container_12_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 14);\n    i0.ɵɵtemplate(2, HomeComponent_ng_container_12_ng_container_7_ng_container_2_Template, 4, 3, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 16);\n    i0.ɵɵtemplate(4, HomeComponent_ng_container_12_ng_container_7_ng_container_4_Template, 4, 3, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getLinesArray(ctx_r2.otherDataForm.controls[\"horizontalLines\"].value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getLinesArray(ctx_r2.otherDataForm.controls[\"verticalLines\"].value));\n  }\n}\nfunction HomeComponent_ng_container_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\", 10);\n    i0.ɵɵtext(2, \"Yatayda ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 11);\n    i0.ɵɵelementStart(4, \"label\", 12);\n    i0.ɵɵtext(5, \"Dikeyde ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 13);\n    i0.ɵɵtemplate(7, HomeComponent_ng_container_12_ng_container_7_Template, 5, 2, \"ng-container\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.otherDataForm.controls[\"horizontalLines\"].value > 0 && ctx_r1.otherDataForm.controls[\"verticalLines\"].value > 0);\n  }\n}\nexport class HomeComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n  }\n  ngOnInit() {\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({})\n    });\n    // Subscribe to valueChanges observable of horizontalLines form control\n    this.otherDataForm.get('horizontalLines')?.valueChanges.subscribe(value => {\n      this.addHorizontalDistances(value);\n    });\n    // Subscribe to valueChanges observable of verticalLines form control\n    this.otherDataForm.get('verticalLines')?.valueChanges.subscribe(value => {\n      this.addVerticalDistances(value);\n    });\n    // Subscribe to valueChanges observable of otherDataForm and call drawRectangle() method when any value changes.\n    this.otherDataForm.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n  }\n  ngAfterViewInit() {\n    // Set initial size of canvas element.\n    const canvas = this.canvas.nativeElement;\n    this.ctx = canvas.getContext('2d');\n    canvas.width = 800;\n    canvas.height = 600;\n  }\n  onSubmit() {\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    const width = this.otherDataForm.value.width;\n    const height = this.otherDataForm.value.height;\n    this.drawRectangle(width, height);\n  }\n  addHorizontalDistances(count) {\n    const horizontalDistancesForm = this.otherDataForm.get('horizontalDistances');\n    if (horizontalDistancesForm) {\n      const currentCount = Object.keys(horizontalDistancesForm.value).length;\n      if (count > currentCount) {\n        for (let i = currentCount + 1; i <= count; i++) {\n          horizontalDistancesForm.addControl(`distance${i}`, this.formBuilder.control(null));\n        }\n      } else if (count < currentCount) {\n        for (let i = currentCount; i > count; i--) {\n          horizontalDistancesForm.removeControl(`distance${i}`);\n        }\n      }\n    }\n  }\n  addVerticalDistances(count) {\n    const verticalDistancesForm = this.otherDataForm.get('verticalDistances');\n    if (verticalDistancesForm) {\n      const currentCount = Object.keys(verticalDistancesForm.value).length;\n      if (count > currentCount) {\n        for (let i = currentCount + 1; i <= count; i++) {\n          verticalDistancesForm.addControl(`distance${i}`, this.formBuilder.control(null));\n        }\n      } else if (count < currentCount) {\n        for (let i = currentCount; i > count; i--) {\n          verticalDistancesForm.removeControl(`distance${i}`);\n        }\n      }\n    }\n  }\n  drawRectangle(width, height) {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this.ctx.strokeStyle = 'blue';\n    this.ctx.lineWidth = 2;\n    this.ctx.beginPath();\n    this.ctx.moveTo(0, 0);\n    this.ctx.lineTo(width, 0);\n    this.ctx.lineTo(width, height);\n    this.ctx.lineTo(0, height);\n    this.ctx.closePath();\n    this.ctx.stroke();\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  viewQuery: function HomeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n    }\n  },\n  decls: 15,\n  vars: 2,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [\"canvas\", \"\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"width\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"width\", \"name\", \"width\", \"formControlName\", \"width\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"height\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"height\", \"name\", \"height\", \"formControlName\", \"height\", 1, \"form-control\", \"form-control-sm\"], [4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"for\", \"horizontalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"horizontalLines\", \"name\", \"horizontalLines\", \"formControlName\", \"horizontalLines\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"verticalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"verticalLines\", \"name\", \"verticalLines\", \"formControlName\", \"verticalLines\", 1, \"form-control\", \"form-control-sm\"], [\"formGroupName\", \"horizontalDistances\"], [4, \"ngFor\", \"ngForOf\"], [\"formGroupName\", \"verticalDistances\"], [\"type\", \"number\", 1, \"form-control\", \"form-control-sm\", 3, \"name\", \"formControlName\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"canvas\", null, 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 1)(5, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(6, \"label\", 4);\n      i0.ɵɵtext(7, \"Dikd\\u00F6rtgenin geni\\u015Fli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 5);\n      i0.ɵɵelementStart(9, \"label\", 6);\n      i0.ɵɵtext(10, \"Dikd\\u00F6rtgenin y\\u00FCksekli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 7);\n      i0.ɵɵtemplate(12, HomeComponent_ng_container_12_Template, 8, 1, \"ng-container\", 8);\n      i0.ɵɵelementStart(13, \"button\", 9);\n      i0.ɵɵtext(14, \"G\\u00F6nder\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.otherDataForm.controls[\"width\"].value > 0 && ctx.otherDataForm.controls[\"height\"].value > 0);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","HomeComponent","constructor","formBuilder","ngOnInit","otherDataForm","group","width","height","horizontalLines","verticalLines","horizontalDistances","verticalDistances","get","valueChanges","subscribe","value","addHorizontalDistances","addVerticalDistances","drawRectangle","ngAfterViewInit","canvas","nativeElement","ctx","getContext","onSubmit","console","log","clearRect","count","horizontalDistancesForm","currentCount","Object","keys","length","i","addControl","control","removeControl","verticalDistancesForm","strokeStyle","lineWidth","beginPath","moveTo","lineTo","closePath","stroke","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Chart, ChartDataSets, ChartOptions } from 'chart.js';\n\n@Component({\n  selector: 'app-home',\n  template: `\n    <div style=\"display: flex; justify-content: space-between; align-items: center; height: 100vh;\">\n      <div class=\"col-md-4\">\n        <canvas #canvas></canvas>\n      </div>\n      <div class=\"col-md-4\">\n      <form\n          [formGroup]=\"otherDataForm\"\n          (ngSubmit)=\"onSubmit()\"\n          class=\"form-group mb-3\"\n        >\n          <label for=\"width\" class=\"mr-2\">Dikdörtgenin genişliği (mm):</label>\n          <input\n            type=\"number\"\n            id=\"width\"\n            name=\"width\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"width\"\n          />\n\n          <label for=\"height\" class=\"mr-2\">Dikdörtgenin yüksekliği (mm):</label>\n          <input\n            type=\"number\"\n            id=\"height\"\n            name=\"height\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"height\"\n          />\n\n          <ng-container\n            *ngIf=\"\n              otherDataForm.controls['width'].value > 0 &&\n              otherDataForm.controls['height'].value > 0\n            \"\n          >\n            <label for=\"horizontalLines\" class=\"mr-2\"\n              >Yatayda kaç adet çizgi olsun:</label\n            >\n            <input\n              type=\"number\"\n              id=\"horizontalLines\"\n              name=\"horizontalLines\"\n              class=\"form-control form-control-sm\"\n              formControlName=\"horizontalLines\"\n            />\n\n            <label for=\"verticalLines\" class=\"mr-2\"\n              >Dikeyde kaç adet çizgi olsun:</label\n            >\n            <input\n              type=\"number\"\n              id=\"verticalLines\"\n              name=\"verticalLines\"\n              class=\"form-control form-control-sm\"\n              formControlName=\"verticalLines\"\n            />\n\n            <ng-container\n              *ngIf=\"\n                otherDataForm.controls['horizontalLines'].value > 0 &&\n                otherDataForm.controls['verticalLines'].value > 0\n              \"\n            >\n              <div formGroupName=\"horizontalDistances\">\n                <ng-container\n                  *ngFor=\"\n                    let line of this.getLinesArray(\n                      otherDataForm.controls['horizontalLines'].value\n                    );\n                    let i = index\n                  \"\n                >\n                  <!-- this anahtar kelimesini ekledim -->\n                  <label>\n                    {{\n                      i === 0\n                        ? 'Yataydaki 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:'\n                        : 'Yataydaki ' +\n                          (i + 1) +\n                          '. çizginin ' +\n                          i +\n                          '. çizgi ile arasındaki mesafe kaç mm olmalı:'\n                    }}\n                    <input\n                      type=\"number\"\n                      name=\"{{ 'distance_' + i }}\"\n                      class=\"form-control form-control-sm\"\n                      formControlName=\"{{ 'distance_' + i }}\"\n                    />\n                  </label>\n                </ng-container>\n              </div>\n\n              <div formGroupName=\"verticalDistances\">\n                <ng-container\n                  *ngFor=\"\n                    let line of this.getLinesArray(\n                      otherDataForm.controls['verticalLines'].value\n                    );\n                    let i = index\n                  \"\n                >\n                  <!-- this anahtar kelimesini ekledim -->\n                  <label>\n                    {{\n                      i === 0\n                        ? 'Dikeyde 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:'\n                        : 'Dikeyde ' +\n                          (i + 1) +\n                          '. çizginin ' +\n                          i +\n                          '. çizgi ile arasındaki mesafe kaç mm olmalı:'\n                    }}\n                    <input\n                      type=\"number\"\n                      name=\"{{ 'distance_' + i }}\"\n                      class=\"form-control form-control-sm\"\n                      formControlName=\"{{ 'distance_' + i }}\"\n                    />\n                  </label>\n                </ng-container>\n              </div>\n            </ng-container>\n          </ng-container>\n\n          <button type=\"submit\" class=\"btn btn-primary\">Gönder</button>\n        </form>\n      </div>\n    </div>\n  `,\n})\nexport class HomeComponent implements OnInit {\n  @ViewChild('canvas', { static: true }) canvas!: ElementRef<HTMLCanvasElement>;\n  otherDataForm!: FormGroup;\n  ctx!: CanvasRenderingContext2D;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({}),\n    });\n\n    // Subscribe to valueChanges observable of horizontalLines form control\n    this.otherDataForm.get('horizontalLines')?.valueChanges.subscribe((value) => {\n      this.addHorizontalDistances(value);\n    });\n\n    // Subscribe to valueChanges observable of verticalLines form control\n    this.otherDataForm.get('verticalLines')?.valueChanges.subscribe((value) => {\n      this.addVerticalDistances(value);\n    });\n\n    // Subscribe to valueChanges observable of otherDataForm and call drawRectangle() method when any value changes.\n    this.otherDataForm.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n  }\n\n  ngAfterViewInit(): void {\n    // Set initial size of canvas element.\n    const canvas = this.canvas.nativeElement;\n    this.ctx = canvas.getContext('2d')!;\n    canvas.width = 800;\n    canvas.height = 600;\n  }\n\n  onSubmit(): void {\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n\n    const width = this.otherDataForm.value.width;\n    const height = this.otherDataForm.value.height;\n\n    this.drawRectangle(width, height);\n  }\n\n  addHorizontalDistances(count: number): void {\n    const horizontalDistancesForm = this.otherDataForm.get('horizontalDistances');\n\n    if (horizontalDistancesForm) {\n      const currentCount = Object.keys(horizontalDistancesForm.value).length;\n\n      if (count > currentCount) {\n        for (let i = currentCount + 1; i <= count; i++) {\n          horizontalDistancesForm.addControl(`distance${i}`, this.formBuilder.control(null));\n        }\n      } else if (count < currentCount) {\n        for (let i = currentCount; i > count; i--) {\n          horizontalDistancesForm.removeControl(`distance${i}`);\n        }\n      }\n    }\n  }\n\n  addVerticalDistances(count: number): void {\n    const verticalDistancesForm = this.otherDataForm.get('verticalDistances');\n\n    if (verticalDistancesForm) {\n      const currentCount = Object.keys(verticalDistancesForm.value).length;\n\n      if (count > currentCount) {\n        for (let i = currentCount + 1; i <= count; i++) {\n          verticalDistancesForm.addControl(`distance${i}`, this.formBuilder.control(null));\n        }\n      } else if (count < currentCount) {\n        for (let i = currentCount; i > count; i--) {\n          verticalDistancesForm.removeControl(`distance${i}`);\n        }\n      }\n    }\n  }\n\n  drawRectangle(width: number, height: number): void {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this.ctx.strokeStyle = 'blue';\n    this.ctx.lineWidth = 2;\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(0, 0);\n    this.ctx.lineTo(width, 0);\n    this.ctx.lineTo(width, height);\n    this.ctx.lineTo(0, height);\n    this.ctx.closePath();\n    this.ctx.stroke();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}