{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"canvas\"];\nfunction HomeComponent_ng_container_20_ng_container_7_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r6 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r6 === 0 ? \"Yataydaki 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Yataydaki \" + (i_r6 + 1) + \". \\u00E7izginin \" + i_r6 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r6);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r6);\n  }\n}\nfunction HomeComponent_ng_container_20_ng_container_7_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r8 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r8 === 0 ? \"Dikeyde 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Dikeyde \" + (i_r8 + 1) + \". \\u00E7izginin \" + i_r8 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r8);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r8);\n  }\n}\nfunction HomeComponent_ng_container_20_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 19);\n    i0.ɵɵtemplate(2, HomeComponent_ng_container_20_ng_container_7_ng_container_2_Template, 4, 3, \"ng-container\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 21);\n    i0.ɵɵtemplate(4, HomeComponent_ng_container_20_ng_container_7_ng_container_4_Template, 4, 3, \"ng-container\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getLinesArray(ctx_r2.otherDataForm.controls[\"horizontalLines\"].value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getLinesArray(ctx_r2.otherDataForm.controls[\"verticalLines\"].value));\n  }\n}\nfunction HomeComponent_ng_container_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\", 15);\n    i0.ɵɵtext(2, \"Yatayda ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 16);\n    i0.ɵɵelementStart(4, \"label\", 17);\n    i0.ɵɵtext(5, \"Dikeyde ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 18);\n    i0.ɵɵtemplate(7, HomeComponent_ng_container_20_ng_container_7_Template, 5, 2, \"ng-container\", 13);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.otherDataForm.controls[\"horizontalLines\"].value > 0 && ctx_r1.otherDataForm.controls[\"verticalLines\"].value > 0);\n  }\n}\nexport class HomeComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.rectangleForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({})\n    });\n    this.horizontalLinesArray = [];\n    this.verticalLinesArray = [];\n  }\n  ngOnInit() {\n    this.rectangleForm.get('width')?.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n    this.rectangleForm.get('height')?.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n    this.rectangleForm.get('horizontalLines')?.valueChanges.subscribe(value => {\n      this.addHorizontalDistances(value);\n    });\n    this.rectangleForm.get('verticalLines')?.valueChanges.subscribe(value => {\n      this.addVerticalDistances(value);\n    });\n  }\n  ngAfterViewInit() {\n    const canvas = this.canvas.nativeElement;\n    canvas.width = 800;\n    canvas.height = 600;\n  }\n  onSubmit() {\n    const horizontalDistances = this.rectangleForm.value.horizontalDistances;\n    const verticalDistances = this.rectangleForm.value.verticalDistances;\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n    this.rectangleForm.reset();\n  }\n  getLinesArray(lineCount) {\n    return Array(lineCount).fill(0).map((_, index) => index + 1);\n  }\n  addHorizontalDistances(count) {\n    const horizontalDistances = this.rectangleForm.get('horizontalDistances');\n    horizontalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      horizontalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n    this.horizontalLinesArray = this.getLinesArray(count);\n  }\n  addVerticalDistances(count) {\n    const verticalDistances = this.rectangleForm.get('verticalDistances');\n    verticalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      verticalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n    this.verticalLinesArray = this.getLinesArray(count);\n  }\n  drawRectangle() {\n    const width = this.rectangleForm.value.width;\n    const height = this.rectangleForm.value.height;\n    const horizontalDistances = this.rectangleForm.value.horizontalDistances;\n    const verticalDistances = this.rectangleForm.value.verticalDistances;\n    if (!width || !height) return;\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const offsetX = (canvas.width - width) / 2;\n    const offsetY = (canvas.height - height) / 2;\n    ctx.beginPath();\n    ctx.rect(10 + offsetX, 10 + offsetY, width, height);\n    ctx.stroke();\n    ctx.font = '16px sans-serif';\n    ctx.fillText(`Width: ${width}mm`, width + 20 + offsetX, height / 2 + offsetY);\n    ctx.fillText(`Height: ${height}mm`, width / 2 + offsetX, height + 30 + offsetY);\n    let currentY = 10 + offsetY;\n    for (const key in horizontalDistances) {\n      const distance = horizontalDistances[key];\n      if (distance !== null) {\n        currentY += distance;\n        const isBeyondBounds = currentY > height + 10 + offsetY;\n        ctx.beginPath();\n        ctx.moveTo(10 + offsetX, currentY);\n        ctx.lineTo(width + 10 + offsetX, currentY);\n        ctx.strokeStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.stroke();\n        const textWidth = ctx.measureText(`${distance}mm`).width;\n        ctx.fillStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.fillText(`${distance}mm`, width + Math.max(20, textWidth) + offsetX, currentY);\n      }\n    }\n    let currentX = 10 + offsetX;\n    for (const key in verticalDistances) {\n      const distance = verticalDistances[key];\n      if (distance !== null) {\n        currentX += distance;\n        const isBeyondBounds = currentX > width + 10 + offsetX;\n        ctx.beginPath();\n        ctx.moveTo(currentX, 10 + offsetY);\n        ctx.lineTo(currentX, height + 10 + offsetY);\n        ctx.strokeStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.stroke();\n        const textWidth = ctx.measureText(`${distance}mm`).width;\n        ctx.fillStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.fillText(`${distance}mm`, currentX - textWidth / 2, height + Math.max(30, textWidth) + offsetY);\n      }\n    }\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  viewQuery: function HomeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n    }\n  },\n  decls: 23,\n  vars: 3,\n  consts: [[1, \"container\"], [3, \"formGroup\"], [1, \"form-group\"], [\"for\", \"width\"], [\"type\", \"number\", \"formControlName\", \"width\"], [2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [\"canvas\", \"\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"width\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"width\", \"name\", \"width\", \"formControlName\", \"width\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"height\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"height\", \"name\", \"height\", \"formControlName\", \"height\", 1, \"form-control\", \"form-control-sm\"], [4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"for\", \"horizontalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"horizontalLines\", \"name\", \"horizontalLines\", \"formControlName\", \"horizontalLines\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"verticalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"verticalLines\", \"name\", \"verticalLines\", \"formControlName\", \"verticalLines\", 1, \"form-control\", \"form-control-sm\"], [\"formGroupName\", \"horizontalDistances\"], [4, \"ngFor\", \"ngForOf\"], [\"formGroupName\", \"verticalDistances\"], [\"type\", \"number\", 1, \"form-control\", \"form-control-sm\", 3, \"name\", \"formControlName\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n      i0.ɵɵtext(2, \"Draw a Rectangle\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 1)(4, \"div\", 2)(5, \"label\", 3);\n      i0.ɵɵtext(6, \"Width\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 5)(9, \"div\", 6);\n      i0.ɵɵelement(10, \"canvas\", null, 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 6)(13, \"form\", 8);\n      i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_13_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(14, \"label\", 9);\n      i0.ɵɵtext(15, \"Dikd\\u00F6rtgenin geni\\u015Fli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"input\", 10);\n      i0.ɵɵelementStart(17, \"label\", 11);\n      i0.ɵɵtext(18, \"Dikd\\u00F6rtgenin y\\u00FCksekli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"input\", 12);\n      i0.ɵɵtemplate(20, HomeComponent_ng_container_20_Template, 8, 1, \"ng-container\", 13);\n      i0.ɵɵelementStart(21, \"button\", 14);\n      i0.ɵɵtext(22, \"G\\u00F6nder\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.otherDataForm.controls[\"width\"].value > 0 && ctx.otherDataForm.controls[\"height\"].value > 0);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName],\n  styles: [\"(()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n \\t\\\"use strict\\\";\\n \\t\\n \\t\\n })()[_ngcontent-%COMP%]\\n;\"]\n});","map":{"version":3,"mappings":"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","names":["i0","HomeComponent","constructor","formBuilder","rectangleForm","group","width","height","horizontalLines","verticalLines","horizontalDistances","verticalDistances","horizontalLinesArray","verticalLinesArray","ngOnInit","get","valueChanges","subscribe","drawRectangle","value","addHorizontalDistances","addVerticalDistances","ngAfterViewInit","canvas","nativeElement","onSubmit","console","log","reset","getLinesArray","lineCount","Array","fill","map","_","index","count","i","addControl","control","ctx","getContext","clearRect","offsetX","offsetY","beginPath","rect","stroke","font","fillText","currentY","key","distance","isBeyondBounds","moveTo","lineTo","strokeStyle","textWidth","measureText","fillStyle","Math","max","currentX","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.html","C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["<div class=\"container\">\n  <h1>Draw a Rectangle</h1>\n\n  <form [formGroup]=\"otherDataForm\">\n  <div class=\"form-group\">\n  <label for=\"width\">Width</label>\n  <input type=\"number\" formControlName=\"width\" />\n  </div>\n\n  <div\n  style=\"display: flex; justify-content: space-between; align-items: center; height: 100vh;\"\n>\n  <div class=\"col-md-4\">\n    <canvas #canvas></canvas>\n  </div>\n  <div class=\"col-md-4\">\n    <form\n      [formGroup]=\"otherDataForm\"\n      (ngSubmit)=\"onSubmit()\"\n      class=\"form-group mb-3\"\n    >\n      <label for=\"width\" class=\"mr-2\">Dikdörtgenin genişliği (mm):</label>\n      <input\n        type=\"number\"\n        id=\"width\"\n        name=\"width\"\n        class=\"form-control form-control-sm\"\n        formControlName=\"width\"\n      />\n\n      <label for=\"height\" class=\"mr-2\">Dikdörtgenin yüksekliği (mm):</label>\n      <input\n        type=\"number\"\n        id=\"height\"\n        name=\"height\"\n        class=\"form-control form-control-sm\"\n        formControlName=\"height\"\n      />\n\n      <ng-container\n        *ngIf=\"\n          otherDataForm.controls['width'].value > 0 &&\n          otherDataForm.controls['height'].value > 0\n        \"\n      >\n        <label for=\"horizontalLines\" class=\"mr-2\"\n          >Yatayda kaç adet çizgi olsun:</label\n        >\n        <input\n          type=\"number\"\n          id=\"horizontalLines\"\n          name=\"horizontalLines\"\n          class=\"form-control form-control-sm\"\n          formControlName=\"horizontalLines\"\n        />\n\n        <label for=\"verticalLines\" class=\"mr-2\"\n          >Dikeyde kaç adet çizgi olsun:</label\n        >\n        <input\n          type=\"number\"\n          id=\"verticalLines\"\n          name=\"verticalLines\"\n          class=\"form-control form-control-sm\"\n          formControlName=\"verticalLines\"\n        />\n\n        <ng-container\n          *ngIf=\"\n            otherDataForm.controls['horizontalLines'].value > 0 &&\n            otherDataForm.controls['verticalLines'].value > 0\n          \"\n        >\n          <div formGroupName=\"horizontalDistances\">\n            <ng-container\n              *ngFor=\"\n                let line of this.getLinesArray(\n                  otherDataForm.controls['horizontalLines'].value\n                );\n                let i = index\n              \"\n            >\n              <!-- this anahtar kelimesini ekledim -->\n              <label>\n                {{\n                  i === 0\n                    ? 'Yataydaki 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:'\n                    : 'Yataydaki ' +\n                      (i + 1) +\n                      '. çizginin ' +\n                      i +\n                      '. çizgi ile arasındaki mesafe kaç mm olmalı:'\n                }}\n                <input\n                  type=\"number\"\n                  name=\"{{ 'distance_' + i }}\"\n                  class=\"form-control form-control-sm\"\n                  formControlName=\"{{ 'distance_' + i }}\"\n                />\n              </label>\n            </ng-container>\n          </div>\n\n          <div formGroupName=\"verticalDistances\">\n            <ng-container\n              *ngFor=\"\n                let line of this.getLinesArray(\n                  otherDataForm.controls['verticalLines'].value\n                );\n                let i = index\n              \"\n            >\n              <!-- this anahtar kelimesini ekledim -->\n              <label>\n                {{\n                  i === 0\n                    ? 'Dikeyde 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:'\n                    : 'Dikeyde ' +\n                      (i + 1) +\n                      '. çizginin ' +\n                      i +\n                      '. çizgi ile arasındaki mesafe kaç mm olmalı:'\n                }}\n                <input\n                  type=\"number\"\n                  name=\"{{ 'distance_' + i }}\"\n                  class=\"form-control form-control-sm\"\n                  formControlName=\"{{ 'distance_' + i }}\"\n                />\n              </label>\n            </ng-container>\n          </div>\n        </ng-container>\n      </ng-container>\n\n      <button type=\"submit\" class=\"btn btn-primary\">Gönder</button>\n    </form>\n  </div>\n</div>\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  @ViewChild('canvas') canvas!: ElementRef<HTMLCanvasElement>;\n  rectangleForm: FormGroup;\n  horizontalLinesArray: number[];\n  verticalLinesArray: number[];\n\n  constructor(private formBuilder: FormBuilder) {\n    this.rectangleForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({}),\n    });\n\n    this.horizontalLinesArray = [];\n    this.verticalLinesArray = [];\n  }\n  ngOnInit(): void {\n    this.rectangleForm.get('width')?.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n\n    this.rectangleForm.get('height')?.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n\n    this.rectangleForm.get('horizontalLines')?.valueChanges.subscribe((value) => {\n      this.addHorizontalDistances(value);\n    });\n\n    this.rectangleForm.get('verticalLines')?.valueChanges.subscribe((value) => {\n      this.addVerticalDistances(value);\n    });\n  }\n\n  ngAfterViewInit(): void {\n    const canvas = this.canvas.nativeElement;\n    canvas.width = 800;\n    canvas.height = 600;\n  }\n\n  onSubmit(): void {\n    const horizontalDistances = this.rectangleForm.value.horizontalDistances;\n    const verticalDistances = this.rectangleForm.value.verticalDistances;\n\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n\n    this.rectangleForm.reset();\n  }\n\n  getLinesArray(lineCount: number): number[] {\n    return Array(lineCount)\n      .fill(0)\n      .map((_, index) => index + 1);\n  }\n\n  addHorizontalDistances(count: number): void {\n    const horizontalDistances = this.rectangleForm.get('horizontalDistances') as FormGroup;\n    horizontalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      horizontalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n    this.horizontalLinesArray = this.getLinesArray(count);\n  }\n\n  addVerticalDistances(count: number): void {\n    const verticalDistances = this.rectangleForm.get('verticalDistances') as FormGroup;\n    verticalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      verticalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n    this.verticalLinesArray = this.getLinesArray(count);\n  }\n\n  drawRectangle(): void {\n    const width = this.rectangleForm.value.width;\n    const height = this.rectangleForm.value.height;\n    const horizontalDistances = this.rectangleForm.value.horizontalDistances;\n    const verticalDistances = this.rectangleForm.value.verticalDistances;\n\n    if (!width || !height) return;\n\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) return;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    const offsetX = (canvas.width - width) / 2;\n    const offsetY = (canvas.height - height) / 2;\n\n    ctx.beginPath();\n    ctx.rect(10 + offsetX, 10 + offsetY, width, height);\n    ctx.stroke();\n\n    ctx.font = '16px sans-serif';\n    ctx.fillText(`Width: ${width}mm`, width + 20 + offsetX, height / 2 + offsetY);\n    ctx.fillText(`Height: ${height}mm`, width / 2 + offsetX, height + 30 + offsetY);\n\n    let currentY = 10 + offsetY;\n    for (const key in horizontalDistances) {\n      const distance = horizontalDistances[key];\n      if (distance !== null) {\n        currentY += distance;\n        const isBeyondBounds = currentY > height + 10 + offsetY;\n\n        ctx.beginPath();\n        ctx.moveTo(10 + offsetX, currentY);\n        ctx.lineTo(width + 10 + offsetX, currentY);\n        ctx.strokeStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.stroke();\n\n        const textWidth = ctx.measureText(`${distance}mm`).width;\n        ctx.fillStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.fillText(`${distance}mm`, width + Math.max(20, textWidth) + offsetX, currentY);\n      }\n    }\n\n    let currentX = 10 + offsetX;\n    for (const key in verticalDistances) {\n      const distance = verticalDistances[key];\n      if (distance !== null) {\n        currentX += distance;\n        const isBeyondBounds = currentX > width + 10 + offsetX;\n\n        ctx.beginPath();\n        ctx.moveTo(currentX, 10 + offsetY);\n        ctx.lineTo(currentX, height + 10 + offsetY);\n        ctx.strokeStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.stroke();\n\n        const textWidth = ctx.measureText(`${distance}mm`).width;\n        ctx.fillStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.fillText(`${distance}mm`, currentX - textWidth / 2, height + Math.max(30, textWidth) + offsetY);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}