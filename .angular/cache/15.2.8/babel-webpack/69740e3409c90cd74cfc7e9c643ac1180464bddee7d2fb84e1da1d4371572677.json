{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport { BaseChartDirective } from '@swimlane/ngx-charts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"canvas\"];\nfunction HomeComponent_ng_container_11_ng_container_7_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\", 17);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 18);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r5 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"horizontalDistance\", i_r5, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(\"Yatay \\u00C7izgi \" + (i_r5 + 1) + \" Uzakl\\u0131k (mm):\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"horizontalDistance\", i_r5, \"\")(\"name\", \"horizontalDistance\", i_r5, \"\");\n    i0.ɵɵproperty(\"formControlName\", i_r5.toString());\n  }\n}\nfunction HomeComponent_ng_container_11_ng_container_7_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\", 17);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 18);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r7 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"verticalDistance\", i_r7, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(\"Dikey \\u00C7izgi \" + (i_r7 + 1) + \" Uzakl\\u0131k (mm):\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"verticalDistance\", i_r7, \"\")(\"name\", \"verticalDistance\", i_r7, \"\");\n    i0.ɵɵproperty(\"formControlName\", i_r7.toString());\n  }\n}\nfunction HomeComponent_ng_container_11_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 13);\n    i0.ɵɵtemplate(2, HomeComponent_ng_container_11_ng_container_7_ng_container_2_Template, 4, 5, \"ng-container\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 15);\n    i0.ɵɵtemplate(4, HomeComponent_ng_container_11_ng_container_7_ng_container_4_Template, 4, 5, \"ng-container\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 16);\n    i0.ɵɵtext(6, \"G\\u00F6nder\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getLinesArray(ctx_r1.otherDataForm.controls[\"horizontalLines\"].value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getLinesArray(ctx_r1.otherDataForm.controls[\"verticalLines\"].value));\n  }\n}\nfunction HomeComponent_ng_container_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\", 9);\n    i0.ɵɵtext(2, \"Yatayda ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 10);\n    i0.ɵɵelementStart(4, \"label\", 11);\n    i0.ɵɵtext(5, \"Dikeyde ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 12);\n    i0.ɵɵtemplate(7, HomeComponent_ng_container_11_ng_container_7_Template, 7, 2, \"ng-container\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.otherDataForm.controls[\"horizontalLines\"].value > 0 && ctx_r0.otherDataForm.controls[\"verticalLines\"].value > 0);\n  }\n}\nexport class HomeComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.chartData = [];\n    this.showXAxis = true;\n    this.showYAxis = true;\n    this.showLegend = true;\n    this.animations = true;\n  }\n  ngOnInit() {\n    this.otherDataForm = this.fb.group({\n      width: new FormControl(null, [Validators.required, Validators.min(0)]),\n      height: new FormControl(null, [Validators.required, Validators.min(0)]),\n      horizontalLines: new FormControl(null, [Validators.required, Validators.min(0)]),\n      verticalLines: new FormControl(null, [Validators.required, Validators.min(0)]),\n      horizontalDistances: this.fb.group({}),\n      verticalDistances: this.fb.group({})\n    });\n  }\n  onSubmit() {\n    if (this.otherDataForm.valid) {\n      const width = this.otherDataForm.controls['width'].value;\n      const height = this.otherDataForm.controls['height'].value;\n      const horizontalLines = this.otherDataForm.controls['horizontalLines'].value;\n      const verticalLines = this.otherDataForm.controls['verticalLines'].value;\n      const horizontalDistances = this.otherDataForm.controls['horizontalDistances'].value;\n      const verticalDistances = this.otherDataForm.controls['verticalDistances'].value;\n      this.chartData = [{\n        name: 'Width',\n        value: width\n      }, {\n        name: 'Height',\n        value: height\n      }];\n      // Draw rectangle using the width and height values\n      const canvas = this.canvasRef.nativeElement;\n      const context = canvas.getContext('2d');\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      context.fillStyle = 'gray';\n      context.fillRect(0, 0, width, height);\n      // Draw horizontal lines with distances\n      for (let i = 1; i <= horizontalLines; i++) {\n        const distance = horizontalDistances[i - 1];\n        const y = i * height / (horizontalLines + 1);\n        context.beginPath();\n        context.moveTo(0, y);\n        context.lineTo(width, y);\n        context.strokeStyle = 'red';\n        context.stroke();\n        context.fillText(distance, 5, y - 5);\n      }\n      // Draw vertical lines with distances\n      for (let i = 1; i <= verticalLines; i++) {\n        const distance = verticalDistances[i - 1];\n        const x = i * width / (verticalLines + 1);\n        context.beginPath();\n        context.moveTo(x, 0);\n        context.lineTo(x, height);\n        context.strokeStyle = 'blue';\n        context.stroke();\n        context.fillText(distance, x + 5, 10);\n      }\n      // Update the chart\n      this.chart.update();\n    }\n  }\n  getLinesArray(count) {\n    return Array(count).fill(null).map((_, i) => i + 1);\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  viewQuery: function HomeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(BaseChartDirective, 7);\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chart = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvasRef = _t.first);\n    }\n  },\n  decls: 12,\n  vars: 12,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [3, \"results\", \"xAxis\", \"yAxis\", \"showXAxisLabel\", \"showYAxisLabel\", \"xAxisLabel\", \"yAxisLabel\", \"animations\", \"legend\", \"roundEdges\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"width\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"width\", \"name\", \"width\", \"formControlName\", \"width\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"height\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"height\", \"name\", \"height\", \"formControlName\", \"height\", 1, \"form-control\", \"form-control-sm\"], [4, \"ngIf\"], [\"for\", \"horizontalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"horizontalLines\", \"name\", \"horizontalLines\", \"formControlName\", \"horizontalLines\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"verticalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"verticalLines\", \"name\", \"verticalLines\", \"formControlName\", \"verticalLines\", 1, \"form-control\", \"form-control-sm\"], [\"formGroupName\", \"horizontalDistances\"], [4, \"ngFor\", \"ngForOf\"], [\"formGroupName\", \"verticalDistances\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mt-3\"], [1, \"mr-2\", 3, \"for\"], [\"type\", \"number\", 1, \"form-control\", \"form-control-sm\", 3, \"id\", \"name\", \"formControlName\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"ngx-charts-bar-vertical\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(5, \"label\", 4);\n      i0.ɵɵtext(6, \"Dikd\\u00F6rtgenin geni\\u015Fli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 5);\n      i0.ɵɵelementStart(8, \"label\", 6);\n      i0.ɵɵtext(9, \"Dikd\\u00F6rtgenin y\\u00FCksekli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 7);\n      i0.ɵɵtemplate(11, HomeComponent_ng_container_11_Template, 8, 1, \"ng-container\", 8);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"results\", ctx.chartData)(\"xAxis\", ctx.showXAxis)(\"yAxis\", ctx.showYAxis)(\"showXAxisLabel\", true)(\"showYAxisLabel\", true)(\"xAxisLabel\", \"Width (mm)\")(\"yAxisLabel\", \"Height (mm)\")(\"animations\", ctx.animations)(\"legend\", ctx.showLegend)(\"roundEdges\", false);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.otherDataForm.controls[\"width\"].value > 0 && ctx.otherDataForm.controls[\"height\"].value > 0);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["FormControl","Validators","BaseChartDirective","i0","HomeComponent","constructor","fb","ngOnInit","otherDataForm","group","width","required","min","height","horizontalLines","verticalLines","horizontalDistances","verticalDistances","onSubmit","valid","controls","value","chartData","name","canvas","canvasRef","nativeElement","context","getContext","clearRect","fillStyle","fillRect","i","distance","y","beginPath","moveTo","lineTo","strokeStyle","stroke","fillText","x","chart","update","getLinesArray","count","Array","fill","map","_","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { BaseChartDirective, ColorHelper, ViewDimensions } from '@swimlane/ngx-charts';\n\n@Component({\n  selector: 'app-home',\n  template: `\n    <div\n      style=\"display: flex; justify-content: space-between; align-items: center; height: 100vh;\"\n    >\n      <div class=\"col-md-4\">\n        <ngx-charts-bar-vertical\n          [results]=\"chartData\"\n          [xAxis]=\"showXAxis\"\n          [yAxis]=\"showYAxis\"\n          [showXAxisLabel]=\"true\"\n          [showYAxisLabel]=\"true\"\n          [xAxisLabel]=\"'Width (mm)'\"\n          [yAxisLabel]=\"'Height (mm)'\"\n          [animations]=\"animations\"\n          [legend]=\"showLegend\"\n          [roundEdges]=\"false\"\n        >\n        </ngx-charts-bar-vertical>\n      </div>\n      <div class=\"col-md-4\">\n        <form\n          [formGroup]=\"otherDataForm\"\n          (ngSubmit)=\"onSubmit()\"\n          class=\"form-group mb-3\"\n        >\n          <label for=\"width\" class=\"mr-2\">Dikdörtgenin genişliği (mm):</label>\n          <input\n            type=\"number\"\n            id=\"width\"\n            name=\"width\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"width\"\n          />\n\n          <label for=\"height\" class=\"mr-2\">Dikdörtgenin yüksekliği (mm):</label>\n          <input\n            type=\"number\"\n            id=\"height\"\n            name=\"height\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"height\"\n          />\n\n          <ng-container\n            *ngIf=\"\n              otherDataForm.controls['width'].value > 0 &&\n              otherDataForm.controls['height'].value > 0\n            \"\n          >\n            <label for=\"horizontalLines\" class=\"mr-2\"\n              >Yatayda kaç adet çizgi olsun:</label\n            >\n            <input\n              type=\"number\"\n              id=\"horizontalLines\"\n              name=\"horizontalLines\"\n              class=\"form-control form-control-sm\"\n              formControlName=\"horizontalLines\"\n            />\n\n            <label for=\"verticalLines\" class=\"mr-2\"\n              >Dikeyde kaç adet çizgi olsun:</label\n            >\n            <input\n              type=\"number\"\n              id=\"verticalLines\"\n              name=\"verticalLines\"\n              class=\"form-control form-control-sm\"\n              formControlName=\"verticalLines\"\n            />\n\n            <ng-container\n              *ngIf=\"\n                otherDataForm.controls['horizontalLines'].value > 0 &&\n                otherDataForm.controls['verticalLines'].value > 0\n              \"\n            >\n              <div formGroupName=\"horizontalDistances\">\n                <ng-container\n                  *ngFor=\"\n                    let line of this.getLinesArray(\n                      otherDataForm.controls['horizontalLines'].value\n                    );\n                    let i = index\n                  \"\n                >\n                  <label\n                    for=\"horizontalDistance{{ i }}\"\n                    class=\"mr-2\"\n                    >{{ 'Yatay Çizgi ' + (i + 1) + ' Uzaklık (mm):' }}</label\n                  >\n                  <input\n                    type=\"number\"\n                    id=\"horizontalDistance{{ i }}\"\n                    name=\"horizontalDistance{{ i }}\"\n                    class=\"form-control form-control-sm\"\n                    [formControlName]=\"i.toString()\"\n                  />\n                </ng-container>\n              </div>\n\n              <div formGroupName=\"verticalDistances\">\n                <ng-container\n                  *ngFor=\"\n                    let line of this.getLinesArray(\n                      otherDataForm.controls['verticalLines'].value\n                    );\n                    let i = index\n                  \"\n                >\n                  <label\n                    for=\"verticalDistance{{ i }}\"\n                    class=\"mr-2\"\n                    >{{ 'Dikey Çizgi ' + (i + 1) + ' Uzaklık (mm):' }}</label\n                  >\n                  <input\n                    type=\"number\"\n                    id=\"verticalDistance{{ i }}\"\n                    name=\"verticalDistance{{ i }}\"\n                    class=\"form-control form-control-sm\"\n                    [formControlName]=\"i.toString()\"\n                  />\n                </ng-container>\n              </div>\n\n              <button type=\"submit\" class=\"btn btn-primary mt-3\">Gönder</button>\n            </ng-container>\n          </ng-container>\n        </form>\n      </div>\n    </div>\n  `,\n  styles: [],\n})\nexport class HomeComponent implements OnInit {\n  @ViewChild(BaseChartDirective, { static: true }) chart: BaseChartDirective;\n  @ViewChild('canvas', { static: true }) canvasRef: ElementRef;\n\n  chartData: { name: string; value: number }[] = [];\n  otherDataForm: FormGroup;\n  showXAxis = true;\n  showYAxis = true;\n  showLegend = true;\n  animations = true;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.otherDataForm = this.fb.group({\n      width: new FormControl(null, [Validators.required, Validators.min(0)]),\n      height: new FormControl(null, [Validators.required, Validators.min(0)]),\n      horizontalLines: new FormControl(null, [Validators.required, Validators.min(0)]),\n      verticalLines: new FormControl(null, [Validators.required, Validators.min(0)]),\n      horizontalDistances: this.fb.group({}),\n      verticalDistances: this.fb.group({}),\n    });\n  }\n\n  onSubmit() {\n    if (this.otherDataForm.valid) {\n      const width = this.otherDataForm.controls['width'].value;\n      const height = this.otherDataForm.controls['height'].value;\n\n      const horizontalLines = this.otherDataForm.controls['horizontalLines'].value;\n      const verticalLines = this.otherDataForm.controls['verticalLines'].value;\n\n      const horizontalDistances = this.otherDataForm.controls['horizontalDistances'].value;\n      const verticalDistances = this.otherDataForm.controls['verticalDistances'].value;\n\n      this.chartData = [\n        { name: 'Width', value: width },\n        { name: 'Height', value: height },\n      ];\n\n      // Draw rectangle using the width and height values\n      const canvas: HTMLCanvasElement = this.canvasRef.nativeElement;\n      const context: CanvasRenderingContext2D = canvas.getContext('2d');\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      context.fillStyle = 'gray';\n      context.fillRect(0, 0, width, height);\n\n      // Draw horizontal lines with distances\n      for (let i = 1; i <= horizontalLines; i++) {\n        const distance = horizontalDistances[i - 1];\n        const y = (i * height) / (horizontalLines + 1);\n        context.beginPath();\n        context.moveTo(0, y);\n        context.lineTo(width, y);\n        context.strokeStyle = 'red';\n        context.stroke();\n        context.fillText(distance, 5, y - 5);\n      }\n\n      // Draw vertical lines with distances\n      for (let i = 1; i <= verticalLines; i++) {\n        const distance = verticalDistances[i - 1];\n        const x = (i * width) / (verticalLines + 1);\n        context.beginPath();\n        context.moveTo(x, 0);\n        context.lineTo(x, height);\n        context.strokeStyle = 'blue';\n        context.stroke();\n        context.fillText(distance, x + 5, 10);\n      }\n\n      // Update the chart\n      this.chart.update();\n    }\n  }\n\n  getLinesArray(count: number): number[] {\n    return Array(count).fill(null).map((_, i) => i + 1);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}