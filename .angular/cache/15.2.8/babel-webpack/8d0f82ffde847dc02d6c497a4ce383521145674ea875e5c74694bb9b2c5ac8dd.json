{"ast":null,"code":"import { FormGroup, FormArray, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction HomeComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"label\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const hgap_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"hgap\", i_r3, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Yatayda \", i_r3 + 1, \". \\u00E7izginin dikd\\u00F6rtgenin \\u00FCst k\\u0131sm\\u0131 ile aras\\u0131nda kalan k\\u0131s\\u0131m (mm):\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"hgap\", i_r3, \"\")(\"name\", \"hgap\", i_r3, \"\");\n    i0.ɵɵproperty(\"formControlName\", hgap_r2);\n  }\n}\nfunction HomeComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"label\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const vgap_r4 = ctx.$implicit;\n    const j_r5 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"vgap\", j_r5, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Dikeyde \", j_r5 + 1, \". \\u00E7izginin dikd\\u00F6rtgenin sol k\\u0131sm\\u0131 ile aras\\u0131nda kalan k\\u0131s\\u0131m (mm):\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"vgap\", j_r5, \"\")(\"name\", \"vgap\", j_r5, \"\");\n    i0.ɵɵproperty(\"formControlName\", vgap_r4);\n  }\n}\nexport class HomeComponent {\n  constructor(http) {\n    this.http = http;\n    this.width = new FormControl('', Validators.required);\n    this.height = new FormControl('', Validators.required);\n    this.hlines = new FormControl('', Validators.required);\n    this.vlines = new FormControl('', Validators.required);\n    this.otherDataForm = new FormGroup({\n      width: this.width,\n      height: this.height,\n      hlines: this.hlines,\n      ingredients: new FormArray([]),\n      vlines: new FormArray([])\n    });\n  }\n  onSubmit() {\n    let hlinesArray = this.otherDataForm.get('ingredients');\n    let hlines = Number(this.hlines.value);\n    for (let i = 0; i < hlines; i++) {\n      let hgap = new FormControl('', Validators.required);\n      hlinesArray.push(hgap);\n    }\n    let vlinesArray = this.otherDataForm.get('vlines');\n    let vlines = Number(this.vlines.value);\n    for (let j = 0; j < vlines; j++) {\n      let vgap = new FormControl('', Validators.required);\n      vlinesArray.push(vgap);\n    }\n    this.drawRectangle(Number(this.width.value), Number(this.height.value), Number(this.hlines.value), Number(this.vlines.value));\n    let data = {\n      width: Number(this.width.value),\n      height: Number(this.height.value),\n      hgap: this.otherDataForm.get('ingredients').value,\n      vgap: this.otherDataForm.get('vlines').value\n    };\n    this.http.post('server_url', data).subscribe(response => {\n      console.log(response);\n    }, error => {\n      console.error(error);\n    });\n  }\n  drawRectangle(width, height, hlines, vlines) {\n    if (width == null || height == null || hlines == null || vlines == null) return;\n    let canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    let ctx = canvas.getContext('2d');\n    ctx?.strokeRect(0, 0, width, height);\n    let hlinesArray = this.otherDataForm.get('ingredients');\n    for (let i = 0; i < hlinesArray.length; i++) {\n      let y = Number(hlinesArray.controls[i].value);\n      ctx?.moveTo(0, y);\n      ctx?.lineTo(width, y);\n      ctx?.stroke();\n    }\n    let vlinesArray = this.otherDataForm.get('vlines');\n    for (let j = 0; j < vlinesArray.length; j++) {\n      let x = Number(vlinesArray.controls[j].value);\n      ctx?.moveTo(x, 0);\n      ctx?.lineTo(x, height);\n      ctx?.stroke();\n    }\n    document.body.appendChild(canvas);\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 19,\n  vars: 7,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"flex-end\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"width\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"width\", \"name\", \"width\", 1, \"form-control\", \"form-control-sm\", 3, \"formControlName\"], [\"for\", \"height\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"height\", \"name\", \"height\", 1, \"form-control\", \"form-control-sm\", 3, \"formControlName\"], [\"for\", \"hlines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"hlines\", \"name\", \"hlines\", 1, \"form-control\", \"form-control-sm\", 3, \"formControlName\"], [\"for\", \"vlines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"vlines\", \"name\", \"vlines\", 1, \"form-control\", \"form-control-sm\", 3, \"formControlName\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [4, \"ngFor\", \"ngForOf\"], [3, \"for\"], [\"type\", \"number\", 1, \"form-control\", \"form-control-sm\", 3, \"id\", \"name\", \"formControlName\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\", 3);\n      i0.ɵɵtext(4, \"Dikd\\u00F6rtgenin geni\\u015Fli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 4);\n      i0.ɵɵelementStart(6, \"label\", 5);\n      i0.ɵɵtext(7, \"Dikd\\u00F6rtgenin y\\u00FCksekli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 6);\n      i0.ɵɵelementStart(9, \"label\", 7);\n      i0.ɵɵtext(10, \"Yatayda ka\\u00E7 \\u00E7izgi istiyorsunuz?\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 8);\n      i0.ɵɵelementStart(12, \"label\", 9);\n      i0.ɵɵtext(13, \"Dikeyde ka\\u00E7 \\u00E7izgi istiyorsunuz?\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 10);\n      i0.ɵɵelementStart(15, \"button\", 11);\n      i0.ɵɵtext(16, \"G\\u00F6nder\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(17, HomeComponent_div_17_Template, 4, 5, \"div\", 12);\n      i0.ɵɵtemplate(18, HomeComponent_div_18_Template, 4, 5, \"div\", 12);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formControlName\", ctx.width);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formControlName\", ctx.height);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formControlName\", ctx.hlines);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formControlName\", ctx.vlines);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.otherDataForm.get(\"hlines\").controls);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.otherDataForm.get(\"vlines\").controls);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","FormArray","FormControl","Validators","i0","HomeComponent","constructor","http","required","width","height","hlines","ingredients","vlines","onSubmit","hlinesArray","otherDataForm","get","Number","value","i","hgap","push","vlinesArray","j","vgap","drawRectangle","data","post","subscribe","response","console","log","error","canvas","document","createElement","ctx","getContext","strokeRect","length","y","controls","moveTo","lineTo","stroke","x","body","appendChild","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts","C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { FormGroup, FormArray, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent {\n\n  width = new FormControl('', Validators.required);\n  height = new FormControl('', Validators.required);\n  hlines = new FormControl('', Validators.required);\n  vlines = new FormControl('', Validators.required);\n\n  otherDataForm: any = new FormGroup({\n    width: this.width,\n    height: this.height,\n    hlines: this.hlines,\n    ingredients: new FormArray([]),\n    vlines: new FormArray([])\n  });\n\n  constructor(private http: HttpClient) { }\n\n  onSubmit() {\n    let hlinesArray = this.otherDataForm.get('ingredients') as FormArray;\n    let hlines = Number(this.hlines.value);\n\n    for (let i = 0; i < hlines; i++) {\n      let hgap = new FormControl('', Validators.required);\n      hlinesArray.push(hgap);\n    }\n\n    let vlinesArray = this.otherDataForm.get('vlines') as FormArray;\n    let vlines = Number(this.vlines.value);\n\n    for (let j = 0; j < vlines; j++) {\n      let vgap = new FormControl('', Validators.required);\n      vlinesArray.push(vgap);\n    }\n\n    this.drawRectangle(\n      Number(this.width.value),\n      Number(this.height.value),\n      Number(this.hlines.value),\n      Number(this.vlines.value)\n    );\n\n    let data = {\n      width: Number(this.width.value),\n      height: Number(this.height.value),\n      hgap: this.otherDataForm.get('ingredients').value,\n      vgap: this.otherDataForm.get('vlines').value,\n    };\n\n    this.http.post('server_url', data).subscribe(\n      response => {\n        console.log(response);\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  }\n\n  drawRectangle(width: number | null, height: number | null, hlines: number | null, vlines: number | null) {\n    if (width == null || height == null || hlines == null || vlines == null) return;\n\n    let canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n\n    let ctx = canvas.getContext('2d');\n\n    ctx?.strokeRect(0, 0, width, height);\n\n    let hlinesArray = this.otherDataForm.get('ingredients') as FormArray;\n    for (let i = 0; i < hlinesArray.length; i++) {\n      let y = Number(hlinesArray.controls[i].value);\n      ctx?.moveTo(0, y);\n      ctx?.lineTo(width, y);\n      ctx?.stroke();\n    }\n\n    let vlinesArray = this.otherDataForm.get('vlines') as FormArray;\n    for (let j = 0; j < vlinesArray.length; j++) {\n      let x = Number(vlinesArray.controls[j].value);\n      ctx?.moveTo(x, 0);\n      ctx?.lineTo(x, height);\n      ctx?.stroke();\n    }\n\n    document.body.appendChild(canvas);\n  }\n}\n","<div style=\"display: flex; justify-content: flex-end; align-items: center; height: 100vh;\">\n  <div class=\"col-md-4\">\n  <form (ngSubmit)=\"onSubmit()\" [formGroup]=\"otherDataForm\" class=\"form-group mb-3\">\n  <label for=\"width\" class=\"mr-2\">Dikdörtgenin genişliği (mm):</label>\n  <input type=\"number\" id=\"width\" name=\"width\" class=\"form-control form-control-sm\" [formControlName]=\"width\">\n\n  <label for=\"height\" class=\"mr-2\">Dikdörtgenin yüksekliği (mm):</label>\n  <input type=\"number\" id=\"height\" name=\"height\" class=\"form-control form-control-sm\" [formControlName]=\"height\">\n\n  <label for=\"hlines\" class=\"mr-2\">Yatayda kaç çizgi istiyorsunuz?</label>\n  <input type=\"number\" id=\"hlines\" name=\"hlines\" class=\"form-control form-control-sm\" [formControlName]=\"hlines\">\n\n  <label for=\"vlines\" class=\"mr-2\">Dikeyde kaç çizgi istiyorsunuz?</label>\n  <input type=\"number\" id=\"vlines\" name=\"vlines\" class=\"form-control form-control-sm\" [formControlName]=\"vlines\">\n\n  <button type=\"submit\" class=\"btn btn-primary\">Gönder</button>\n\n  <!-- Yatay çizgiler için dinamik giriş alanları -->\n  <div *ngFor=\"let hgap of otherDataForm.get('hlines').controls; let i = index\">\n   <label for=\"hgap{{i}}\">Yatayda {{i+1}}. çizginin dikdörtgenin üst kısmı ile arasında kalan kısım (mm):</label>\n   <input type=\"number\" id=\"hgap{{i}}\" name=\"hgap{{i}}\" class=\"form-control form-control-sm\" [formControlName]=\"hgap\">\n  </div>\n\n  <!-- Dikey çizgiler için dinamik giriş alanları -->\n  <div *ngFor=\"let vgap of otherDataForm.get('vlines').controls; let j = index\">\n   <label for=\"vgap{{j}}\">Dikeyde {{j+1}}. çizginin dikdörtgenin sol kısmı ile arasında kalan kısım (mm):</label>\n   <input type=\"number\" id=\"vgap{{j}}\" name=\"vgap{{j}}\" class=\"form-control form-control-sm\" [formControlName]=\"vgap\">\n  </div>\n\n  </form>\n  </div>\n </div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}