{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nfunction AppComponent_ng_container_9_ng_container_7_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const distance_r3 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r4 < ctx_r2.otherDataForm.controls[\"horizontalLines\"].value ? \"Yataydaki \" + (i_r4 + 1) + \". \\u00E7izginin\" : \"Dikeydeki \" + (i_r4 - ctx_r2.otherDataForm.controls[\"horizontalLines\"].value + 1) + \". \\u00E7izginin\", \" dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131: \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", distance_r3.value.name);\n    i0.ɵɵproperty(\"formControlName\", i_r4);\n  }\n}\nfunction AppComponent_ng_container_9_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 13);\n    i0.ɵɵtemplate(2, AppComponent_ng_container_9_ng_container_7_ng_container_2_Template, 4, 3, \"ng-container\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.distances.controls);\n  }\n}\nfunction AppComponent_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\", 9);\n    i0.ɵɵtext(2, \"Yatayda ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"input\", 10);\n    i0.ɵɵlistener(\"change\", function AppComponent_ng_container_9_Template_input_change_3_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.createHorizontalLines());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"label\", 11);\n    i0.ɵɵtext(5, \"Dikeyde ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"input\", 12);\n    i0.ɵɵlistener(\"change\", function AppComponent_ng_container_9_Template_input_change_6_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.createVerticalLines());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, AppComponent_ng_container_9_ng_container_7_Template, 3, 1, \"ng-container\", 7);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.otherDataForm.controls[\"horizontalLines\"].value > 0 && ctx_r0.otherDataForm.controls[\"verticalLines\"].value > 0);\n  }\n}\nexport class AppComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.otherDataForm = this.fb.group({\n      width: [],\n      height: [],\n      horizontalLines: [],\n      verticalLines: [],\n      distances: this.fb.array([])\n    });\n  }\n  get distances() {\n    return this.otherDataForm.get('distances');\n  }\n  createHorizontalLines() {\n    const horizontalLines = this.otherDataForm.get('horizontalLines')?.value;\n    const verticalLines = this.otherDataForm.get('verticalLines')?.value;\n    this.distances.clear();\n    for (let i = 0; i < horizontalLines; i++) {\n      this.distances.push(this.fb.group({\n        name: `distances_${i}_0`,\n        value: null\n      }));\n    }\n    for (let i = horizontalLines; i < horizontalLines + verticalLines; i++) {\n      this.distances.push(this.fb.group({\n        name: `distances_${i - horizontalLines}_1`,\n        value: null\n      }));\n    }\n  }\n  createVerticalLines() {\n    const horizontalLines = this.otherDataForm.get('horizontalLines').value;\n    const verticalLines = this.otherDataForm.get('verticalLines').value;\n    this.distances.clear();\n    for (let i = 0; i < horizontalLines; i++) {\n      this.distances.push(this.fb.group({\n        name: `distances_${i}_0`,\n        value: null\n      }));\n    }\n    for (let i = horizontalLines; i < horizontalLines + verticalLines; i++) {\n      this.distances.push(this.fb.group({\n        name: `distances_${i - horizontalLines}_1`,\n        value: null\n      }));\n    }\n  }\n  onSubmit() {\n    console.log(this.otherDataForm.value);\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-home\"]],\n  decls: 12,\n  vars: 2,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"flex-end\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"width\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"width\", \"name\", \"width\", \"formControlName\", \"width\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"height\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"height\", \"name\", \"height\", \"formControlName\", \"height\", 1, \"form-control\", \"form-control-sm\"], [4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"for\", \"horizontalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"horizontalLines\", \"name\", \"horizontalLines\", \"formControlName\", \"horizontalLines\", 1, \"form-control\", \"form-control-sm\", 3, \"change\"], [\"for\", \"verticalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"verticalLines\", \"name\", \"verticalLines\", \"formControlName\", \"verticalLines\", 1, \"form-control\", \"form-control-sm\", 3, \"change\"], [\"formArrayName\", \"distances\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"number\", 1, \"form-control\", \"form-control-sm\", 3, \"name\", \"formControlName\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function AppComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\", 3);\n      i0.ɵɵtext(4, \"Dikd\\u00F6rtgenin geni\\u015Fli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 4);\n      i0.ɵɵelementStart(6, \"label\", 5);\n      i0.ɵɵtext(7, \"Dikd\\u00F6rtgenin y\\u00FCksekli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 6);\n      i0.ɵɵtemplate(9, AppComponent_ng_container_9_Template, 8, 1, \"ng-container\", 7);\n      i0.ɵɵelementStart(10, \"button\", 8);\n      i0.ɵɵtext(11, \"G\\u00F6nder\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.otherDataForm.controls[\"width\"].value > 0 && ctx.otherDataForm.controls[\"height\"].value > 0);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","AppComponent","constructor","fb","group","width","height","horizontalLines","verticalLines","distances","array","otherDataForm","get","createHorizontalLines","value","clear","i","push","name","createVerticalLines","onSubmit","console","log","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormArray } from '@angular/forms';\n\n@Component({\n  selector: 'app-home',\n  template: `\n    <div style=\"display: flex; justify-content: flex-end; align-items: center; height: 100vh;\">\n      <div class=\"col-md-4\">\n        <form [formGroup]=\"otherDataForm\" (ngSubmit)=\"onSubmit()\" class=\"form-group mb-3\">\n          <label for=\"width\" class=\"mr-2\">Dikdörtgenin genişliği (mm):</label>\n          <input type=\"number\" id=\"width\" name=\"width\" class=\"form-control form-control-sm\" formControlName=\"width\" />\n\n          <label for=\"height\" class=\"mr-2\">Dikdörtgenin yüksekliği (mm):</label>\n          <input type=\"number\" id=\"height\" name=\"height\" class=\"form-control form-control-sm\" formControlName=\"height\" />\n\n          <ng-container *ngIf=\"otherDataForm.controls['width'].value > 0 && otherDataForm.controls['height'].value > 0\">\n            <label for=\"horizontalLines\" class=\"mr-2\">Yatayda kaç adet çizgi olsun:</label>\n            <input type=\"number\" id=\"horizontalLines\" name=\"horizontalLines\" class=\"form-control form-control-sm\" formControlName=\"horizontalLines\" (change)=\"createHorizontalLines()\" />\n\n            <label for=\"verticalLines\" class=\"mr-2\">Dikeyde kaç adet çizgi olsun:</label>\n            <input type=\"number\" id=\"verticalLines\" name=\"verticalLines\" class=\"form-control form-control-sm\" formControlName=\"verticalLines\" (change)=\"createVerticalLines()\" />\n\n            <ng-container *ngIf=\"otherDataForm.controls['horizontalLines'].value > 0 && otherDataForm.controls['verticalLines'].value > 0\">\n              <div formArrayName=\"distances\">\n                <ng-container *ngFor=\"let distance of distances.controls; let i = index\">\n                  <label>\n                    {{ i < otherDataForm.controls['horizontalLines'].value ? 'Yataydaki ' + (i + 1) + '. çizginin' : 'Dikeydeki ' + (i - otherDataForm.controls['horizontalLines'].value + 1) + '. çizginin' }}\n                    dikdörtgen ile arasındaki mesafe kaç mm olmalı:\n                    <input type=\"number\" name=\"{{ distance.value.name }}\" class=\"form-control form-control-sm\" [formControlName]=\"i\"/>\n                  </label>\n                </ng-container>\n              </div>\n            </ng-container>\n          </ng-container>\n\n          <button type=\"submit\" class=\"btn btn-primary\">Gönder</button>\n        </form>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./home.component.scss']\n})\nexport class AppComponent {\n  otherDataForm = this.fb.group({\n    width: [],\n    height: [],\n    horizontalLines: [],\n    verticalLines: [],\n    distances: this.fb.array([]),\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  get distances() {\n    return this.otherDataForm.get('distances') as FormArray;\n  }\n\n  createHorizontalLines() {\n    const horizontalLines  = this.otherDataForm.get('horizontalLines')?.value;\n    const verticalLines = this.otherDataForm.get('verticalLines')?.value;\n    this.distances.clear();\n    for (let i = 0; i < horizontalLines!; i++) {\n      this.distances.push(\n        this.fb.group({\n          name: `distances_${i}_0`,\n          value: null,\n        })\n      );\n    }\n    for (let i = horizontalLines; i < horizontalLines! + verticalLines!; i!++) {\n      this.distances.push(\n        this.fb.group({\n          name: `distances_${i - horizontalLines}_1`,\n          value: null,\n        })\n      );\n    }\n  }\n\n  createVerticalLines() {\n    const horizontalLines = this.otherDataForm.get('horizontalLines').value;\n    const verticalLines = this.otherDataForm.get('verticalLines').value;\n    this.distances.clear();\n    for (let i = 0; i < horizontalLines; i++) {\n      this.distances.push(\n        this.fb.group({\n          name: `distances_${i}_0`,\n          value: null,\n        })\n      );\n    }\n    for (let i = horizontalLines; i < horizontalLines + verticalLines; i++) {\n      this.distances.push(\n        this.fb.group({\n          name: `distances_${i - horizontalLines}_1`,\n          value: null,\n        })\n      );\n    }\n  }\n\n  onSubmit() {\n    console.log(this.otherDataForm.value);\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}