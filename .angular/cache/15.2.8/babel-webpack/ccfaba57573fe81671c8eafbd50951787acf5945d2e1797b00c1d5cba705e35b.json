{"ast":null,"code":"import { FormGroup, FormArray, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction HomeComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"label\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const hgap_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"hgap\", i_r3, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Yatayda \", i_r3 + 1, \". \\u00E7izginin dikd\\u00F6rtgenin \\u00FCst k\\u0131sm\\u0131 ile aras\\u0131nda kalan k\\u0131s\\u0131m (mm):\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"hgap\", i_r3, \"\")(\"name\", \"hgap\", i_r3, \"\");\n    i0.ɵɵproperty(\"formControlName\", hgap_r2);\n  }\n}\nfunction HomeComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"label\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const vgap_r4 = ctx.$implicit;\n    const j_r5 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"vgap\", j_r5, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Dikeyde \", j_r5 + 1, \". \\u00E7izginin dikd\\u00F6rtgenin sol k\\u0131sm\\u0131 ile aras\\u0131nda kalan k\\u0131s\\u0131m (mm):\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"vgap\", j_r5, \"\")(\"name\", \"vgap\", j_r5, \"\");\n    i0.ɵɵproperty(\"formControlName\", vgap_r4);\n  }\n}\nexport class HomeComponent {\n  constructor(http) {\n    this.http = http;\n    // width, height, hlines ve vlines için form control'leri oluştur\n    this.width = new FormControl('', Validators.required);\n    this.height = new FormControl('', Validators.required);\n    this.hlines = new FormControl('', Validators.required);\n    this.vlines = new FormControl('', Validators.required);\n    // Dinamik form alanları için bir form group oluştur\n    this.otherDataForm = new FormGroup({\n      // width, height, hlines ve vlines form control'lerini otherDataForm'a ekle\n      width: this.width,\n      height: this.height,\n      hlines: this.hlines,\n      vlines: this.vlines,\n      // ingredients ve vlines için form array'leri oluştur ve otherDataForm'a ekle\n      ingredients: new FormArray([])\n      // vlines: new FormArray([]) // bu satırı sildim\n    });\n  }\n\n  onSubmit() {\n    // Yatay çizgiler için bir form array oluştur\n    let hlinesArray = this.otherDataForm.get('ingredients'); // hlinesArray'i otherDataForm'dan al\n    // Kullanıcıdan alınan değeri hlines değişkenine ata\n    let hlines = this.width.value; // hlines değerini width değişkeninden al\n    // hlines sayısı kadar giriş alanı oluştur\n    for (let i = 0; i < Number(hlines); i++) {\n      // hlines'ı sayıya dönüştürdüm\n      // Her giriş alanı için bir form control oluştur\n      let hgap = new FormControl('', Validators.required);\n      // Form array'e form control'u ekle\n      hlinesArray.push(hgap);\n    }\n    // Dikey çizgiler için bir form array oluştur\n    let vlinesArray = this.otherDataForm.get('vlines'); // vlinesArray'i otherDataForm'dan al\n    // Kullanıcıdan alınan değeri vlines değişkenine ata\n    let vlines = this.height.value; // vlines değerini height değişkeninden al\n    // vlines sayısı kadar giriş alanı oluştur\n    for (let j = 0; j < Number(vlines); j++) {\n      // vlines'ı sayıya dönüştürdüm\n      // Her giriş alanı için bir form control oluştur\n      let vgap = new FormControl('', Validators.required);\n      // Form array'e form control'u ekle\n      vlinesArray.push(vgap);\n    }\n    // Dikdörtgeni ve çizgileri çizen fonksiyonu çağır - height.value'yi sayıya dönüştürdüm\n    this.drawRectangle(this.width.value, Number(this.height.value), this.hlines.value, this.vlines.value);\n    // Server'a gönderilecek verileri oluştur\n    let data = {\n      width: this.width.value,\n      height: this.height.value,\n      hgap: this.otherDataForm.get('ingredients').value,\n      vgap: this.otherDataForm.get('vlines').value // Dikey aralıkları bir array olarak al - burada otherDataForm'u kullandım\n    };\n    // Server'a göndermek için HTTP servisini kullan\n    this.http.post('server_url', data).subscribe(response => {\n      // Server'dan gelen yanıtı işle\n      console.log(response);\n    }, error => {\n      // Hata durumunda mesaj göster\n      console.error(error);\n    });\n  }\n  drawRectangle(width, height, hlines, vlines) {\n    if (width == null || height == null || hlines == null || vlines == null) return; // null kontrolü yaptım\n    // Bir canvas elementi oluştur\n    let canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    // Canvas'ın context'ini al\n    let ctx = canvas.getContext('2d');\n    // Dikdörtgeni çiz\n    ctx?.strokeRect(0, 0, width, height);\n    // Yatay çizgileri çiz\n    for (let i = 0; i < Number(hlines); i++) {\n      // hlines'ı sayıya dönüştürdüm\n      // Her yatay çizgi için aralığı form array'den al\n      let y = this.otherDataForm.get('ingredients').controls[i].value;\n      ctx?.moveTo(0, y);\n      ctx?.lineTo(width, y);\n      ctx?.stroke();\n    }\n    // Dikey çizgileri çiz\n    for (let j = 0; j < Number(vlines); j++) {\n      // vlines'ı sayıya dönüştürdüm\n      // Her dikey çizgi için aralığı form array'den al\n      let x = this.otherDataForm.get('vlines').controls[j].value; // burada otherDataForm'u kullandım\n      ctx?.moveTo(x, 0);\n      ctx?.lineTo(x, height);\n      ctx?.stroke();\n    }\n    // Canvas'ı sayfaya ekle\n    document.body.appendChild(canvas);\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 19,\n  vars: 7,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"flex-end\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"width\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"width\", \"name\", \"width\", 1, \"form-control\", \"form-control-sm\", 3, \"formControlName\"], [\"for\", \"height\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"height\", \"name\", \"height\", 1, \"form-control\", \"form-control-sm\", 3, \"formControlName\"], [\"for\", \"hlines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"hlines\", \"name\", \"hlines\", 1, \"form-control\", \"form-control-sm\", 3, \"formControlName\"], [\"for\", \"vlines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"vlines\", \"name\", \"vlines\", 1, \"form-control\", \"form-control-sm\", 3, \"formControlName\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [4, \"ngFor\", \"ngForOf\"], [3, \"for\"], [\"type\", \"number\", 1, \"form-control\", \"form-control-sm\", 3, \"id\", \"name\", \"formControlName\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\", 3);\n      i0.ɵɵtext(4, \"Dikd\\u00F6rtgenin geni\\u015Fli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 4);\n      i0.ɵɵelementStart(6, \"label\", 5);\n      i0.ɵɵtext(7, \"Dikd\\u00F6rtgenin y\\u00FCksekli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 6);\n      i0.ɵɵelementStart(9, \"label\", 7);\n      i0.ɵɵtext(10, \"Yatayda ka\\u00E7 \\u00E7izgi istiyorsunuz?\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 8);\n      i0.ɵɵelementStart(12, \"label\", 9);\n      i0.ɵɵtext(13, \"Dikeyde ka\\u00E7 \\u00E7izgi istiyorsunuz?\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 10);\n      i0.ɵɵelementStart(15, \"button\", 11);\n      i0.ɵɵtext(16, \"G\\u00F6nder\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(17, HomeComponent_div_17_Template, 4, 5, \"div\", 12);\n      i0.ɵɵtemplate(18, HomeComponent_div_18_Template, 4, 5, \"div\", 12);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formControlName\", ctx.width);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formControlName\", ctx.height);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formControlName\", ctx.hlines);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formControlName\", ctx.vlines);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.otherDataForm.get(\"hlines\").controls);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.otherDataForm.get(\"vlines\").controls);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","FormArray","FormControl","Validators","i0","HomeComponent","constructor","http","required","width","height","hlines","vlines","ingredients","onSubmit","hlinesArray","otherDataForm","get","value","i","Number","hgap","push","vlinesArray","j","vgap","drawRectangle","data","post","subscribe","response","console","log","error","canvas","document","createElement","ctx","getContext","strokeRect","y","controls","moveTo","lineTo","stroke","x","body","appendChild","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts","C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { FormGroup, FormArray, FormControl, Validators } from '@angular/forms';\n\n@Component({\n selector: 'app-home',\n templateUrl: './home.component.html',\n styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent {\n\n // width, height, hlines ve vlines için form control'leri oluştur\n width = new FormControl('', Validators.required);\n height = new FormControl('', Validators.required);\n hlines = new FormControl('', Validators.required);\n vlines = new FormControl('', Validators.required);\n\n // Dinamik form alanları için bir form group oluştur\n otherDataForm: any = new FormGroup({\n  // width, height, hlines ve vlines form control'lerini otherDataForm'a ekle\n  width: this.width,\n  height: this.height,\n  hlines: this.hlines,\n  vlines: this.vlines,\n  // ingredients ve vlines için form array'leri oluştur ve otherDataForm'a ekle\n  ingredients: new FormArray([]),\n  // vlines: new FormArray([]) // bu satırı sildim\n });\n\n constructor(private http: HttpClient) { }\n\n onSubmit() {\n // Yatay çizgiler için bir form array oluştur\n let hlinesArray = this.otherDataForm.get('ingredients') as FormArray; // hlinesArray'i otherDataForm'dan al\n\n // Kullanıcıdan alınan değeri hlines değişkenine ata\n let hlines = this.width.value; // hlines değerini width değişkeninden al\n\n // hlines sayısı kadar giriş alanı oluştur\n for (let i = 0; i < Number(hlines); i++) { // hlines'ı sayıya dönüştürdüm\n // Her giriş alanı için bir form control oluştur\n let hgap = new FormControl('', Validators.required);\n\n // Form array'e form control'u ekle\n hlinesArray.push(hgap);\n }\n\n // Dikey çizgiler için bir form array oluştur\n let vlinesArray = this.otherDataForm.get('vlines') as FormArray; // vlinesArray'i otherDataForm'dan al\n\n // Kullanıcıdan alınan değeri vlines değişkenine ata\n let vlines = this.height.value; // vlines değerini height değişkeninden al\n\n // vlines sayısı kadar giriş alanı oluştur\n for (let j = 0; j < Number(vlines); j++) { // vlines'ı sayıya dönüştürdüm\n // Her giriş alanı için bir form control oluştur\n let vgap = new FormControl('', Validators.required);\n\n // Form array'e form control'u ekle\n vlinesArray.push(vgap);\n }\n\n // Dikdörtgeni ve çizgileri çizen fonksiyonu çağır - height.value'yi sayıya dönüştürdüm\n this.drawRectangle(this.width.value, Number(this.height.value), this.hlines.value, this.vlines.value);\n\n // Server'a gönderilecek verileri oluştur\n let data = {\n width: this.width.value,\n height: this.height.value,\n hgap: this.otherDataForm.get('ingredients').value, // Yatay aralıkları bir array olarak al\n vgap: this.otherDataForm.get('vlines').value, // Dikey aralıkları bir array olarak al - burada otherDataForm'u kullandım\n };\n\n // Server'a göndermek için HTTP servisini kullan\n this.http.post('server_url', data).subscribe(\n response => {\n // Server'dan gelen yanıtı işle\n console.log(response);\n },\n error => {\n // Hata durumunda mesaj göster\n console.error(error);\n }\n );\n }\n\n drawRectangle(width: number | null, height: number | null, hlines: number | null, vlines: number | null) {\n if (width == null || height == null || hlines == null || vlines == null) return; // null kontrolü yaptım\n\n // Bir canvas elementi oluştur\n let canvas = document.createElement('canvas');\n canvas.width = width;\n canvas.height = height;\n\n // Canvas'ın context'ini al\n let ctx = canvas.getContext('2d');\n\n // Dikdörtgeni çiz\n ctx?.strokeRect(0, 0, width, height);\n\n // Yatay çizgileri çiz\n for (let i = 0; i < Number(hlines); i++) { // hlines'ı sayıya dönüştürdüm\n // Her yatay çizgi için aralığı form array'den al\n let y = this.otherDataForm.get('ingredients').controls[i].value;\n ctx?.moveTo(0, y);\n ctx?.lineTo(width, y);\n ctx?.stroke();\n }\n\n // Dikey çizgileri çiz\n for (let j = 0; j < Number(vlines); j++) { // vlines'ı sayıya dönüştürdüm\n // Her dikey çizgi için aralığı form array'den al\n let x = this.otherDataForm.get('vlines').controls[j].value; // burada otherDataForm'u kullandım\n ctx?.moveTo(x, 0);\n ctx?.lineTo(x, height);\n ctx?.stroke();\n }\n\n // Canvas'ı sayfaya ekle\n document.body.appendChild(canvas);\n }\n}\n","<div style=\"display: flex; justify-content: flex-end; align-items: center; height: 100vh;\">\n  <div class=\"col-md-4\">\n  <form (ngSubmit)=\"onSubmit()\" [formGroup]=\"otherDataForm\" class=\"form-group mb-3\">\n  <label for=\"width\" class=\"mr-2\">Dikdörtgenin genişliği (mm):</label>\n  <input type=\"number\" id=\"width\" name=\"width\" class=\"form-control form-control-sm\" [formControlName]=\"width\">\n\n  <label for=\"height\" class=\"mr-2\">Dikdörtgenin yüksekliği (mm):</label>\n  <input type=\"number\" id=\"height\" name=\"height\" class=\"form-control form-control-sm\" [formControlName]=\"height\">\n\n  <label for=\"hlines\" class=\"mr-2\">Yatayda kaç çizgi istiyorsunuz?</label>\n  <input type=\"number\" id=\"hlines\" name=\"hlines\" class=\"form-control form-control-sm\" [formControlName]=\"hlines\">\n\n  <label for=\"vlines\" class=\"mr-2\">Dikeyde kaç çizgi istiyorsunuz?</label>\n  <input type=\"number\" id=\"vlines\" name=\"vlines\" class=\"form-control form-control-sm\" [formControlName]=\"vlines\">\n\n  <button type=\"submit\" class=\"btn btn-primary\">Gönder</button>\n\n  <!-- Yatay çizgiler için dinamik giriş alanları -->\n  <div *ngFor=\"let hgap of otherDataForm.get('hlines').controls; let i = index\">\n   <label for=\"hgap{{i}}\">Yatayda {{i+1}}. çizginin dikdörtgenin üst kısmı ile arasında kalan kısım (mm):</label>\n   <input type=\"number\" id=\"hgap{{i}}\" name=\"hgap{{i}}\" class=\"form-control form-control-sm\" [formControlName]=\"hgap\">\n  </div>\n\n  <!-- Dikey çizgiler için dinamik giriş alanları -->\n  <div *ngFor=\"let vgap of otherDataForm.get('vlines').controls; let j = index\">\n   <label for=\"vgap{{j}}\">Dikeyde {{j+1}}. çizginin dikdörtgenin sol kısmı ile arasında kalan kısım (mm):</label>\n   <input type=\"number\" id=\"vgap{{j}}\" name=\"vgap{{j}}\" class=\"form-control form-control-sm\" [formControlName]=\"vgap\">\n  </div>\n\n  </form>\n  </div>\n </div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}