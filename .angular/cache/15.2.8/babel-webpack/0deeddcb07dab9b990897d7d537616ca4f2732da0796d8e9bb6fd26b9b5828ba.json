{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nconst _c0 = [\"canvas\"];\nexport class HomeComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.rectangleForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({})\n    });\n    this.horizontalLinesArray = [];\n    this.verticalLinesArray = [];\n  }\n  ngOnInit() {\n    this.rectangleForm.get('width')?.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n    this.rectangleForm.get('height')?.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n    this.rectangleForm.get('horizontalLines')?.valueChanges.subscribe(value => {\n      this.addHorizontalDistances(value);\n    });\n    this.rectangleForm.get('verticalLines')?.valueChanges.subscribe(value => {\n      this.addVerticalDistances(value);\n    });\n  }\n  ngAfterViewInit() {\n    const canvas = this.canvas.nativeElement;\n    canvas.width = 800;\n    canvas.height = 600;\n  }\n  onSubmit() {\n    const horizontalDistances = this.rectangleForm.value.horizontalDistances;\n    const verticalDistances = this.rectangleForm.value.verticalDistances;\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n    this.rectangleForm.reset();\n  }\n  getLinesArray(lineCount) {\n    return Array(lineCount).fill(0).map((_, index) => index + 1);\n  }\n  addHorizontalDistances(count) {\n    const horizontalDistances = this.rectangleForm.get('horizontalDistances');\n    horizontalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      horizontalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n    this.horizontalLinesArray = this.getLinesArray(count);\n  }\n  addVerticalDistances(count) {\n    const verticalDistances = this.rectangleForm.get('verticalDistances');\n    verticalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      verticalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n    this.verticalLinesArray = this.getLinesArray(count);\n  }\n  drawRectangle() {\n    const width = this.rectangleForm.value.width;\n    const height = this.rectangleForm.value.height;\n    const horizontalDistances = this.rectangleForm.value.horizontalDistances;\n    const verticalDistances = this.rectangleForm.value.verticalDistances;\n    if (!width || !height) return;\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const offsetX = (canvas.width - width) / 2;\n    const offsetY = (canvas.height - height) / 2;\n    ctx.beginPath();\n    ctx.rect(10 + offsetX, 10 + offsetY, width, height);\n    ctx.stroke();\n    ctx.font = '16px sans-serif';\n    ctx.fillText(`Width: ${width}mm`, width + 20 + offsetX, height / 2 + offsetY);\n    ctx.fillText(`Height: ${height}mm`, width / 2 + offsetX, height + 30 + offsetY);\n    let currentY = 10 + offsetY;\n    for (const key in horizontalDistances) {\n      const distance = horizontalDistances[key];\n      if (distance !== null) {\n        currentY += distance;\n        const isBeyondBounds = currentY > height + 10 + offsetY;\n        ctx.beginPath();\n        ctx.moveTo(10 + offsetX, currentY);\n        ctx.lineTo(width + 10 + offsetX, currentY);\n        ctx.strokeStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.stroke();\n        const textWidth = ctx.measureText(`${distance}mm`).width;\n        ctx.fillStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.fillText(`${distance}mm`, width + Math.max(20, textWidth) + offsetX, currentY);\n      }\n    }\n    let currentX = 10 + offsetX;\n    for (const key in verticalDistances) {\n      const distance = verticalDistances[key];\n      if (distance !== null) {\n        currentX += distance;\n        const isBeyondBounds = currentX > width + 10 + offsetX;\n        ctx.beginPath();\n        ctx.moveTo(currentX, 10 + offsetY);\n        ctx.lineTo(currentX, height + 10 + offsetY);\n        ctx.strokeStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.stroke();\n        const textWidth = ctx.measureText(`${distance}mm`).width;\n        ctx.fillStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.fillText(`${distance}mm`, currentX - textWidth / 2, height + Math.max(30, textWidth) + offsetY);\n      }\n    }\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  viewQuery: function HomeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n    }\n  },\n  decls: 0,\n  vars: 0,\n  template: function HomeComponent_Template(rf, ctx) {},\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["HomeComponent","constructor","formBuilder","rectangleForm","group","width","height","horizontalLines","verticalLines","horizontalDistances","verticalDistances","horizontalLinesArray","verticalLinesArray","ngOnInit","get","valueChanges","subscribe","drawRectangle","value","addHorizontalDistances","addVerticalDistances","ngAfterViewInit","canvas","nativeElement","onSubmit","console","log","reset","getLinesArray","lineCount","Array","fill","map","_","index","count","i","addControl","control","ctx","getContext","clearRect","offsetX","offsetY","beginPath","rect","stroke","font","fillText","currentY","key","distance","isBeyondBounds","moveTo","lineTo","strokeStyle","textWidth","measureText","fillStyle","Math","max","currentX","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n  @ViewChild('canvas') canvas!: ElementRef<HTMLCanvasElement>;\n  rectangleForm: FormGroup;\n  horizontalLinesArray: number[];\n  verticalLinesArray: number[];\n\n  constructor(private formBuilder: FormBuilder) {\n    this.rectangleForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({}),\n    });\n\n    this.horizontalLinesArray = [];\n    this.verticalLinesArray = [];\n  }\n  ngOnInit(): void {\n    this.rectangleForm.get('width')?.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n\n    this.rectangleForm.get('height')?.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n\n    this.rectangleForm.get('horizontalLines')?.valueChanges.subscribe((value) => {\n      this.addHorizontalDistances(value);\n    });\n\n    this.rectangleForm.get('verticalLines')?.valueChanges.subscribe((value) => {\n      this.addVerticalDistances(value);\n    });\n  }\n\n  ngAfterViewInit(): void {\n    const canvas = this.canvas.nativeElement;\n    canvas.width = 800;\n    canvas.height = 600;\n  }\n\n  onSubmit(): void {\n    const horizontalDistances = this.rectangleForm.value.horizontalDistances;\n    const verticalDistances = this.rectangleForm.value.verticalDistances;\n\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n\n    this.rectangleForm.reset();\n  }\n\n  getLinesArray(lineCount: number): number[] {\n    return Array(lineCount)\n      .fill(0)\n      .map((_, index) => index + 1);\n  }\n\n  addHorizontalDistances(count: number): void {\n    const horizontalDistances = this.rectangleForm.get('horizontalDistances') as FormGroup;\n    horizontalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      horizontalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n    this.horizontalLinesArray = this.getLinesArray(count);\n  }\n\n  addVerticalDistances(count: number): void {\n    const verticalDistances = this.rectangleForm.get('verticalDistances') as FormGroup;\n    verticalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      verticalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n    this.verticalLinesArray = this.getLinesArray(count);\n  }\n\n  drawRectangle(): void {\n    const width = this.rectangleForm.value.width;\n    const height = this.rectangleForm.value.height;\n    const horizontalDistances = this.rectangleForm.value.horizontalDistances;\n    const verticalDistances = this.rectangleForm.value.verticalDistances;\n\n    if (!width || !height) return;\n\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) return;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    const offsetX = (canvas.width - width) / 2;\n    const offsetY = (canvas.height - height) / 2;\n\n    ctx.beginPath();\n    ctx.rect(10 + offsetX, 10 + offsetY, width, height);\n    ctx.stroke();\n\n    ctx.font = '16px sans-serif';\n    ctx.fillText(`Width: ${width}mm`, width + 20 + offsetX, height / 2 + offsetY);\n    ctx.fillText(`Height: ${height}mm`, width / 2 + offsetX, height + 30 + offsetY);\n\n    let currentY = 10 + offsetY;\n    for (const key in horizontalDistances) {\n      const distance = horizontalDistances[key];\n      if (distance !== null) {\n        currentY += distance;\n        const isBeyondBounds = currentY > height + 10 + offsetY;\n\n        ctx.beginPath();\n        ctx.moveTo(10 + offsetX, currentY);\n        ctx.lineTo(width + 10 + offsetX, currentY);\n        ctx.strokeStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.stroke();\n\n        const textWidth = ctx.measureText(`${distance}mm`).width;\n        ctx.fillStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.fillText(`${distance}mm`, width + Math.max(20, textWidth) + offsetX, currentY);\n      }\n    }\n\n    let currentX = 10 + offsetX;\n    for (const key in verticalDistances) {\n      const distance = verticalDistances[key];\n      if (distance !== null) {\n        currentX += distance;\n        const isBeyondBounds = currentX > width + 10 + offsetX;\n\n        ctx.beginPath();\n        ctx.moveTo(currentX, 10 + offsetY);\n        ctx.lineTo(currentX, height + 10 + offsetY);\n        ctx.strokeStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.stroke();\n\n        const textWidth = ctx.measureText(`${distance}mm`).width;\n        ctx.fillStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.fillText(`${distance}mm`, currentX - textWidth / 2, height + Math.max(30, textWidth) + offsetY);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}