{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, ViewEncapsulation, Inject, Input, ViewChild, HostBinding, HostListener, Injectable, ChangeDetectionStrategy, EventEmitter, Output, Directive, NgModule, ContentChild } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { select } from 'd3-selection';\nimport { brushX } from 'd3-brush';\nimport { scaleTime, scaleLinear, scalePoint, scaleOrdinal, scaleQuantile, scaleBand } from 'd3-scale';\nimport { area, curveLinear, line, arc, lineRadial, curveCardinalClosed, pie } from 'd3-shape';\nimport { range, min, max, quantile } from 'd3-array';\nimport { interpolate } from 'd3-interpolate';\nimport { easeSinInOut } from 'd3-ease';\nimport rfdc from 'rfdc';\nimport { format } from 'd3-format';\nimport * as d3_color from 'd3-color';\nimport { treemap, stratify } from 'd3-hierarchy';\nimport { timeFormat } from 'd3-time-format';\n\n/**\n * Throttle a function\n *\n */\nconst _c0 = [\"caretElm\"];\nfunction TooltipContentComponent_span_4_ng_template_1_Template(rf, ctx) {}\nconst _c1 = function (a0) {\n  return {\n    model: a0\n  };\n};\nfunction TooltipContentComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtemplate(1, TooltipContentComponent_span_4_ng_template_1_Template, 0, 0, \"ng-template\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c1, ctx_r1.context));\n  }\n}\nfunction TooltipContentComponent_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.title, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction LegendComponent_header_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"header\", 4)(1, \"span\", 5);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.title);\n  }\n}\nfunction LegendComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 6)(1, \"ngx-charts-legend-entry\", 7);\n    i0.ɵɵlistener(\"select\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.labelClick.emit($event));\n    })(\"activate\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.activate($event));\n    })(\"deactivate\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.deactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const entry_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"label\", entry_r2.label)(\"formattedLabel\", entry_r2.formattedLabel)(\"color\", entry_r2.color)(\"isActive\", ctx_r1.isActive(entry_r2));\n  }\n}\nfunction ChartComponent_ngx_charts_scale_legend_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelement(0, \"ngx-charts-scale-legend\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"horizontal\", ctx_r0.legendOptions && ctx_r0.legendOptions.position === ctx_r0.LegendPosition.Below)(\"valueRange\", ctx_r0.legendOptions.domain)(\"colors\", ctx_r0.legendOptions.colors)(\"height\", ctx_r0.view[1])(\"width\", ctx_r0.legendWidth);\n  }\n}\nfunction ChartComponent_ngx_charts_legend_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"ngx-charts-legend\", 5);\n    i0.ɵɵlistener(\"labelClick\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.legendLabelClick.emit($event));\n    })(\"labelActivate\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelActivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.legendLabelActivate.emit($event));\n    })(\"labelDeactivate\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelDeactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.legendLabelDeactivate.emit($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"horizontal\", ctx_r1.legendOptions && ctx_r1.legendOptions.position === ctx_r1.LegendPosition.Below)(\"data\", ctx_r1.legendOptions.domain)(\"title\", ctx_r1.legendOptions.title)(\"colors\", ctx_r1.legendOptions.colors)(\"height\", ctx_r1.view[1])(\"width\", ctx_r1.legendWidth)(\"activeEntries\", ctx_r1.activeEntries);\n  }\n}\nconst _c2 = [\"*\"];\nconst _c3 = [\"ngx-charts-axis-label\", \"\"];\nconst _c4 = [\"ticksel\"];\nconst _c5 = [\"ngx-charts-x-axis-ticks\", \"\"];\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_tspan_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"tspan\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tickLine_r14 = ctx.$implicit;\n    const i_r15 = ctx.index;\n    i0.ɵɵattribute(\"y\", i_r15 * 12);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tickLine_r14, \" \");\n  }\n}\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_tspan_1_Template, 2, 2, \"tspan\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const tickLines_r12 = ctx.ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", tickLines_r12);\n  }\n}\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵtemplate(0, XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0_Template, 2, 1, \"ng-container\", 4);\n  }\n  if (rf & 2) {\n    const tick_r3 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.tickChunks(tick_r3));\n  }\n}\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const tickFormatted_r5 = i0.ɵɵnextContext().ngIf;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r10.tickTrim(tickFormatted_r5), \" \");\n  }\n}\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"title\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"text\", 5);\n    i0.ɵɵtemplate(4, XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_container_4_Template, 1, 0, \"ng-container\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5_Template, 1, 1, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(7, XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_7_Template, 1, 1, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const tickFormatted_r5 = ctx.ngIf;\n    const _r7 = i0.ɵɵreference(6);\n    const _r9 = i0.ɵɵreference(8);\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tickFormatted_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"text-anchor\", ctx_r4.textAnchor)(\"transform\", ctx_r4.textTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.isWrapTicksSupported)(\"ngIfThen\", _r7)(\"ngIfElse\", _r9);\n  }\n}\nfunction XAxisTicksComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 3);\n    i0.ɵɵtemplate(1, XAxisTicksComponent__svg_g_2__svg_ng_container_1_Template, 9, 6, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tick_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r1.tickTransform(tick_r3));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.tickFormat(tick_r3));\n  }\n}\nfunction XAxisTicksComponent__svg_g_3__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"line\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r19.gridLineTransform());\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"y1\", -ctx_r19.gridLineHeight);\n  }\n}\nfunction XAxisTicksComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, XAxisTicksComponent__svg_g_3__svg_g_1_Template, 2, 2, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tick_r18 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r2.tickTransform(tick_r18));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showGridLines);\n  }\n}\nconst _c6 = [\"ngx-charts-x-axis\", \"\"];\nfunction XAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"dimensionsChanged\", function XAxisComponent__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.emitTicksHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"trimTicks\", ctx_r0.trimTicks)(\"rotateTicks\", ctx_r0.rotateTicks)(\"maxTickLength\", ctx_r0.maxTickLength)(\"tickFormatting\", ctx_r0.tickFormatting)(\"tickArguments\", ctx_r0.tickArguments)(\"tickStroke\", ctx_r0.tickStroke)(\"scale\", ctx_r0.xScale)(\"orient\", ctx_r0.xOrient)(\"showGridLines\", ctx_r0.showGridLines)(\"gridLineHeight\", ctx_r0.dims.height)(\"width\", ctx_r0.dims.width)(\"tickValues\", ctx_r0.ticks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\nfunction XAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 3);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"label\", ctx_r1.labelText)(\"offset\", ctx_r1.labelOffset)(\"orient\", ctx_r1.orientation.Bottom)(\"height\", ctx_r1.dims.height)(\"width\", ctx_r1.dims.width);\n  }\n}\nconst _c7 = [\"ngx-charts-y-axis-ticks\", \"\"];\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_ng_container_1__svg_tspan_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"tspan\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tickLine_r17 = ctx.$implicit;\n    const i_r18 = ctx.index;\n    const ctx_r16 = i0.ɵɵnextContext(6);\n    i0.ɵɵattribute(\"y\", i_r18 * (8 + ctx_r16.tickSpacing));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tickLine_r17, \" \");\n  }\n}\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_ng_container_1__svg_tspan_1_Template, 2, 2, \"tspan\", 11);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const tickLines_r14 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", tickLines_r14);\n  }\n}\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_ng_container_1_Template, 2, 1, \"ng-container\", 10);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const tickLines_r14 = ctx.ngIf;\n    i0.ɵɵnextContext(2);\n    const _r11 = i0.ɵɵreference(8);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", tickLines_r14.length > 1)(\"ngIfElse\", _r11);\n  }\n}\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵtemplate(0, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0_Template, 2, 2, \"ng-container\", 5);\n  }\n  if (rf & 2) {\n    const tick_r5 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.tickChunks(tick_r5));\n  }\n}\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const tickFormatted_r7 = i0.ɵɵnextContext().ngIf;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r12.tickTrim(tickFormatted_r7), \" \");\n  }\n}\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"title\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"text\", 6);\n    i0.ɵɵtemplate(4, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_container_4_Template, 1, 0, \"ng-container\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5_Template, 1, 1, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(7, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_7_Template, 1, 1, \"ng-template\", null, 9, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const tickFormatted_r7 = ctx.ngIf;\n    const _r9 = i0.ɵɵreference(6);\n    const _r11 = i0.ɵɵreference(8);\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tickFormatted_r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"font-size\", \"12px\");\n    i0.ɵɵattribute(\"dy\", ctx_r6.dy)(\"x\", ctx_r6.x1)(\"y\", ctx_r6.y1)(\"text-anchor\", ctx_r6.textAnchor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.wrapTicks)(\"ngIfThen\", _r9)(\"ngIfElse\", _r11);\n  }\n}\nfunction YAxisTicksComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_2__svg_ng_container_1_Template, 9, 10, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tick_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r1.transform(tick_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.tickFormat(tick_r5));\n  }\n}\nfunction YAxisTicksComponent__svg_path_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"path\", 13);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"d\", ctx_r2.referenceAreaPath)(\"transform\", ctx_r2.gridLineTransform());\n  }\n}\nfunction YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 15);\n  }\n  if (rf & 2) {\n    const ctx_r24 = i0.ɵɵnextContext(3);\n    i0.ɵɵattribute(\"x2\", ctx_r24.gridLineWidth);\n  }\n}\nfunction YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 15);\n  }\n  if (rf & 2) {\n    const ctx_r25 = i0.ɵɵnextContext(3);\n    i0.ɵɵattribute(\"x2\", -ctx_r25.gridLineWidth);\n  }\n}\nfunction YAxisTicksComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template, 1, 1, \"line\", 14);\n    i0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template, 1, 1, \"line\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r23 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r23.gridLineTransform());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r23.orient === ctx_r23.Orientation.Left);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r23.orient === ctx_r23.Orientation.Right);\n  }\n}\nfunction YAxisTicksComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_4__svg_g_1_Template, 3, 3, \"g\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tick_r22 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r3.transform(tick_r22));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.showGridLines);\n  }\n}\nfunction YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"title\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"text\", 17);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const refLine_r26 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r28 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r28.tickTrim(ctx_r28.tickFormat(refLine_r26.value)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"dy\", ctx_r28.dy)(\"y\", -6)(\"x\", ctx_r28.gridLineWidth)(\"text-anchor\", ctx_r28.textAnchor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", refLine_r26.name, \" \");\n  }\n}\nfunction YAxisTicksComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"line\", 16);\n    i0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template, 5, 6, \"g\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const refLine_r26 = i0.ɵɵnextContext().$implicit;\n    const ctx_r27 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r27.transform(refLine_r26.value));\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"x2\", ctx_r27.gridLineWidth)(\"transform\", ctx_r27.gridLineTransform());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r27.showRefLabels);\n  }\n}\nfunction YAxisTicksComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_5__svg_g_1_Template, 3, 4, \"g\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.showRefLines);\n  }\n}\nconst _c8 = [\"ngx-charts-y-axis\", \"\"];\nfunction YAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"dimensionsChanged\", function YAxisComponent__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.emitTicksWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"trimTicks\", ctx_r0.trimTicks)(\"maxTickLength\", ctx_r0.maxTickLength)(\"tickFormatting\", ctx_r0.tickFormatting)(\"tickArguments\", ctx_r0.tickArguments)(\"tickValues\", ctx_r0.ticks)(\"tickStroke\", ctx_r0.tickStroke)(\"scale\", ctx_r0.yScale)(\"orient\", ctx_r0.yOrient)(\"showGridLines\", ctx_r0.showGridLines)(\"gridLineWidth\", ctx_r0.dims.width)(\"referenceLines\", ctx_r0.referenceLines)(\"showRefLines\", ctx_r0.showRefLines)(\"showRefLabels\", ctx_r0.showRefLabels)(\"height\", ctx_r0.dims.height)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\nfunction YAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 3);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"label\", ctx_r1.labelText)(\"offset\", ctx_r1.labelOffset)(\"orient\", ctx_r1.yOrient)(\"height\", ctx_r1.dims.height)(\"width\", ctx_r1.dims.width);\n  }\n}\nconst _c9 = [\"ngx-charts-svg-linear-gradient\", \"\"];\nfunction SvgLinearGradientComponent__svg_stop_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"stop\");\n  }\n  if (rf & 2) {\n    const stop_r1 = ctx.$implicit;\n    i0.ɵɵstyleProp(\"stop-color\", stop_r1.color)(\"stop-opacity\", stop_r1.opacity);\n    i0.ɵɵattribute(\"offset\", stop_r1.offset + \"%\");\n  }\n}\nconst _c10 = [\"ngx-charts-circle\", \"\"];\nconst _c11 = [\"ngx-charts-circle-series\", \"\"];\nfunction CircleSeriesComponent__svg_g_0__svg_rect_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"x\", ctx_r1.circle.cx - ctx_r1.circle.radius)(\"y\", ctx_r1.circle.cy)(\"width\", ctx_r1.circle.radius * 2)(\"height\", ctx_r1.circle.height)(\"fill\", ctx_r1.gradientFill);\n  }\n}\nfunction CircleSeriesComponent__svg_g_0__svg_rect_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"x\", ctx_r2.circle.cx - ctx_r2.circle.radius)(\"y\", ctx_r2.circle.cy)(\"width\", ctx_r2.circle.radius * 2)(\"height\", ctx_r2.circle.height)(\"fill\", ctx_r2.gradientFill);\n  }\n}\nconst _c12 = function (a0) {\n  return {\n    name: a0\n  };\n};\nfunction CircleSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"defs\");\n    i0.ɵɵelement(2, \"g\", 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, CircleSeriesComponent__svg_g_0__svg_rect_3_Template, 1, 6, \"rect\", 2);\n    i0.ɵɵtemplate(4, CircleSeriesComponent__svg_g_0__svg_rect_4_Template, 1, 5, \"rect\", 2);\n    i0.ɵɵelementStart(5, \"g\", 3);\n    i0.ɵɵlistener(\"select\", function CircleSeriesComponent__svg_g_0_Template__svg_g_select_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onClick(ctx_r3.circle.data));\n    })(\"activate\", function CircleSeriesComponent__svg_g_0_Template__svg_g_activate_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.activateCircle());\n    })(\"deactivate\", function CircleSeriesComponent__svg_g_0_Template__svg_g_deactivate_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.deactivateCircle());\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.circle.gradientStops);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isSSR && ctx_r0.barVisible && ctx_r0.type === \"standard\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isSSR && ctx_r0.barVisible && ctx_r0.type === \"standard\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"active\", ctx_r0.isActive(i0.ɵɵpureFunction1(20, _c12, ctx_r0.circle.seriesName)));\n    i0.ɵɵproperty(\"cx\", ctx_r0.circle.cx)(\"cy\", ctx_r0.circle.cy)(\"r\", ctx_r0.circle.radius)(\"fill\", ctx_r0.circle.color)(\"pointerEvents\", ctx_r0.circle.value === 0 ? \"none\" : \"all\")(\"data\", ctx_r0.circle.value)(\"classNames\", ctx_r0.circle.classNames)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(ctx_r0.circle))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", ctx_r0.circle.data);\n  }\n}\nconst _c13 = [\"ngx-charts-grid-panel\", \"\"];\nconst _c14 = [\"ngx-charts-grid-panel-series\", \"\"];\nfunction GridPanelSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 1);\n  }\n  if (rf & 2) {\n    const gridPanel_r1 = ctx.$implicit;\n    i0.ɵɵclassProp(\"grid-panel\", true)(\"odd\", gridPanel_r1.class === \"odd\")(\"even\", gridPanel_r1.class === \"even\");\n    i0.ɵɵproperty(\"height\", gridPanel_r1.height)(\"width\", gridPanel_r1.width)(\"x\", gridPanel_r1.x)(\"y\", gridPanel_r1.y);\n  }\n}\nconst _c15 = [\"ngx-charts-svg-radial-gradient\", \"\"];\nfunction SvgRadialGradientComponent__svg_stop_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"stop\");\n  }\n  if (rf & 2) {\n    const stop_r1 = ctx.$implicit;\n    i0.ɵɵstyleProp(\"stop-color\", stop_r1.color)(\"stop-opacity\", stop_r1.opacity);\n    i0.ɵɵattribute(\"offset\", stop_r1.offset + \"%\");\n  }\n}\nconst _c16 = [\"ngx-charts-area\", \"\"];\nfunction AreaComponent__svg_defs_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\nconst _c17 = [\"ngx-charts-count-up\", \"\"];\nconst _c18 = [\"tooltipAnchor\"];\nconst _c19 = [\"ngx-charts-tooltip-area\", \"\"];\nfunction TooltipArea__svg_ng_template_2__xhtml_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelement(1, \"span\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tooltipItem_r5 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"background-color\", tooltipItem_r5.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.getToolTipText(tooltipItem_r5), \" \");\n  }\n}\nfunction TooltipArea__svg_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtemplate(1, TooltipArea__svg_ng_template_2__xhtml_div_1_Template, 3, 3, \"div\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const model_r3 = ctx.model;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", model_r3);\n  }\n}\nconst _c20 = [\"ngx-charts-timeline\", \"\"];\nfunction AdvancedLegendComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"countTo\", ctx_r0.roundedTotal)(\"valueFormatting\", ctx_r0.valueFormatting);\n  }\n}\nfunction AdvancedLegendComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.valueFormatting ? ctx_r1.valueFormatting(ctx_r1.roundedTotal) : ctx_r1.defaultValueFormatting(ctx_r1.roundedTotal), \" \");\n  }\n}\nfunction AdvancedLegendComponent_div_7_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 16);\n  }\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"countTo\", legendItem_r3._value)(\"valueFormatting\", ctx_r4.valueFormatting);\n  }\n}\nfunction AdvancedLegendComponent_div_7_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.valueFormatting ? ctx_r5.valueFormatting(legendItem_r3.value) : ctx_r5.defaultValueFormatting(legendItem_r3.value), \" \");\n  }\n}\nfunction AdvancedLegendComponent_div_7_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 18);\n  }\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"countTo\", legendItem_r3.percentage)(\"countSuffix\", \"%\");\n  }\n}\nfunction AdvancedLegendComponent_div_7_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", legendItem_r3.percentage.toLocaleString(), \"%\");\n  }\n}\nfunction AdvancedLegendComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵlistener(\"mouseenter\", function AdvancedLegendComponent_div_7_Template_div_mouseenter_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.activate.emit(legendItem_r3.data));\n    })(\"mouseleave\", function AdvancedLegendComponent_div_7_Template_div_mouseleave_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.deactivate.emit(legendItem_r3.data));\n    })(\"click\", function AdvancedLegendComponent_div_7_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.select.emit(legendItem_r3.data));\n    });\n    i0.ɵɵelement(1, \"div\", 10);\n    i0.ɵɵtemplate(2, AdvancedLegendComponent_div_7_div_2_Template, 1, 2, \"div\", 11);\n    i0.ɵɵtemplate(3, AdvancedLegendComponent_div_7_div_3_Template, 2, 1, \"div\", 12);\n    i0.ɵɵelementStart(4, \"div\", 13);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, AdvancedLegendComponent_div_7_div_6_Template, 1, 2, \"div\", 14);\n    i0.ɵɵtemplate(7, AdvancedLegendComponent_div_7_div_7_Template, 2, 1, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const legendItem_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"border-left-color\", legendItem_r3.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.animations);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(legendItem_r3.displayLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.animations);\n  }\n}\nconst _c21 = [\"ngx-charts-area-series\", \"\"];\nconst _c22 = [\"tooltipTemplate\"];\nconst _c23 = [\"seriesTooltipTemplate\"];\nfunction AreaChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\nfunction AreaChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\nfunction AreaChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"baseValue\", ctx_r2.baseValue)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"activeEntries\", ctx_r2.activeEntries)(\"scaleType\", ctx_r2.scaleType)(\"gradient\", ctx_r2.gradient)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\nfunction AreaChartComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onClick($event, series_r11));\n    })(\"activate\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onActivate($event));\n    })(\"deactivate\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\nfunction AreaChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"mouseleave\", function AreaChartComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.hideCircles());\n    });\n    i0.ɵɵelementStart(1, \"g\", 11);\n    i0.ɵɵlistener(\"hover\", function AreaChartComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.updateHoveredVertical($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, AreaChartComponent__svg_g_9__svg_g_2_Template, 2, 9, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\nfunction AreaChartComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"baseValue\", ctx_r19.baseValue)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\nconst _c24 = function (a0, a1) {\n  return [a0, a1];\n};\nfunction AreaChartComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 14);\n    i0.ɵɵlistener(\"onDomainChange\", function AreaChartComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.updateDomain($event));\n    });\n    i0.ɵɵtemplate(1, AreaChartComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    i0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\nfunction AreaChartNormalizedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartNormalizedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\nfunction AreaChartNormalizedComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartNormalizedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\nfunction AreaChartNormalizedComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"scaleType\", ctx_r2.scaleType)(\"activeEntries\", ctx_r2.activeEntries)(\"gradient\", ctx_r2.gradient)(\"normalized\", true)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\nfunction AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onClick($event, series_r11));\n    })(\"activate\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onActivate($event));\n    })(\"deactivate\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r10.seriesType.Stacked)(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\nfunction AreaChartNormalizedComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"mouseleave\", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.hideCircles());\n    });\n    i0.ɵɵelementStart(1, \"g\", 11);\n    i0.ɵɵlistener(\"hover\", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.updateHoveredVertical($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template, 2, 10, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"showPercentage\", true)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\nfunction AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"normalized\", true)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\nfunction AreaChartNormalizedComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 14);\n    i0.ɵɵlistener(\"onDomainChange\", function AreaChartNormalizedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.updateDomain($event));\n    });\n    i0.ɵɵtemplate(1, AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    i0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\nconst _c25 = \".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\";\nfunction AreaChartStackedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartStackedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\nfunction AreaChartStackedComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartStackedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\nfunction AreaChartStackedComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"scaleType\", ctx_r2.scaleType)(\"gradient\", ctx_r2.gradient)(\"activeEntries\", ctx_r2.activeEntries)(\"stacked\", true)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\nfunction AreaChartStackedComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 12);\n    i0.ɵɵlistener(\"select\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onClick($event, series_r11));\n    })(\"activate\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onActivate($event));\n    })(\"deactivate\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r10.seriesType.Stacked)(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\nfunction AreaChartStackedComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"mouseleave\", function AreaChartStackedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.hideCircles());\n    });\n    i0.ɵɵelementStart(1, \"g\", 11);\n    i0.ɵɵlistener(\"hover\", function AreaChartStackedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.updateHoveredVertical($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, AreaChartStackedComponent__svg_g_9__svg_g_2_Template, 2, 10, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\nfunction AreaChartStackedComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"stacked\", true)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\nfunction AreaChartStackedComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 13);\n    i0.ɵɵlistener(\"onDomainChange\", function AreaChartStackedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.updateDomain($event));\n    });\n    i0.ɵɵtemplate(1, AreaChartStackedComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    i0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\nconst _c26 = [\"ngx-charts-bar\", \"\"];\nfunction BarComponent__svg_defs_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.orientation)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\nconst _c27 = [\"ngx-charts-bar-label\", \"\"];\nconst _c28 = [\"ngx-charts-series-horizontal\", \"\"];\nfunction SeriesHorizontal__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function SeriesHorizontal__svg_g_0_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.click($event));\n    })(\"activate\", function SeriesHorizontal__svg_g_0_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.activate.emit($event));\n    })(\"deactivate\", function SeriesHorizontal__svg_g_0_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.deactivate.emit($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const bar_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"width\", bar_r2.width)(\"height\", bar_r2.height)(\"x\", bar_r2.x)(\"y\", bar_r2.y)(\"fill\", bar_r2.color)(\"stops\", bar_r2.gradientStops)(\"data\", bar_r2.data)(\"orientation\", ctx_r0.barOrientation.Horizontal)(\"roundEdges\", bar_r2.roundEdges)(\"gradient\", ctx_r0.gradient)(\"isActive\", ctx_r0.isActive(bar_r2.data))(\"ariaLabel\", bar_r2.ariaLabel)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.tooltipPlacement)(\"tooltipType\", ctx_r0.tooltipType)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : bar_r2.tooltipText)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", bar_r2.data)(\"noBarWhenZero\", ctx_r0.noBarWhenZero);\n  }\n}\nfunction SeriesHorizontal__svg_g_1__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵlistener(\"dimensionsChanged\", function SeriesHorizontal__svg_g_1__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const i_r9 = restoredCtx.index;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.dataLabelWidthChanged.emit({\n        size: $event,\n        index: i_r9\n      }));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const b_r8 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"barX\", b_r8.x)(\"barY\", b_r8.y)(\"barWidth\", b_r8.width)(\"barHeight\", b_r8.height)(\"value\", b_r8.total)(\"valueFormatting\", ctx_r7.dataLabelFormatting)(\"orientation\", ctx_r7.barOrientation.Horizontal);\n  }\n}\nfunction SeriesHorizontal__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesHorizontal__svg_g_1__svg_g_1_Template, 1, 7, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.barsForDataLabels)(\"ngForTrackBy\", ctx_r1.trackDataLabelBy);\n  }\n}\nfunction BarHorizontalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\nfunction BarHorizontalComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\nfunction BarHorizontal2DComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontal2DComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.valueScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\nfunction BarHorizontal2DComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontal2DComponent__svg_g_4_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.groupScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\nfunction BarHorizontal2DComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BarHorizontal2DComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onClick($event, group_r9));\n    })(\"activate\", function BarHorizontal2DComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onActivate($event, group_r9));\n    })(\"deactivate\", function BarHorizontal2DComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onDeactivate($event, group_r9));\n    })(\"dataLabelWidthChanged\", function BarHorizontal2DComponent__svg_g_5__svg_g_1_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r10 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDataLabelMaxWidthChanged($event, index_r10));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r8.valueScale)(\"activeEntries\", ctx_r8.activeEntries)(\"yScale\", ctx_r8.innerScale)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"seriesName\", group_r9.name)(\"roundEdges\", ctx_r8.roundEdges)(\"animations\", ctx_r8.animations)(\"showDataLabel\", ctx_r8.showDataLabel)(\"dataLabelFormatting\", ctx_r8.dataLabelFormatting)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\nfunction BarHorizontal2DComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontal2DComponent__svg_g_5__svg_g_1_Template, 2, 17, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\nfunction BarHorizontal2DComponent__svg_g_6__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BarHorizontal2DComponent__svg_g_6__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onClick($event, group_r17));\n    })(\"activate\", function BarHorizontal2DComponent__svg_g_6__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r21.onActivate($event, group_r17));\n    })(\"deactivate\", function BarHorizontal2DComponent__svg_g_6__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onDeactivate($event, group_r17));\n    })(\"dataLabelWidthChanged\", function BarHorizontal2DComponent__svg_g_6__svg_g_1_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const index_r18 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onDataLabelMaxWidthChanged($event, index_r18));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const group_r17 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r16.groupTransform(group_r17));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r16.valueScale)(\"activeEntries\", ctx_r16.activeEntries)(\"yScale\", ctx_r16.innerScale)(\"colors\", ctx_r16.colors)(\"series\", group_r17.series)(\"dims\", ctx_r16.dims)(\"gradient\", ctx_r16.gradient)(\"tooltipDisabled\", ctx_r16.tooltipDisabled)(\"tooltipTemplate\", ctx_r16.tooltipTemplate)(\"seriesName\", group_r17.name)(\"roundEdges\", ctx_r16.roundEdges)(\"animations\", ctx_r16.animations)(\"showDataLabel\", ctx_r16.showDataLabel)(\"dataLabelFormatting\", ctx_r16.dataLabelFormatting)(\"noBarWhenZero\", ctx_r16.noBarWhenZero);\n  }\n}\nfunction BarHorizontal2DComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontal2DComponent__svg_g_6__svg_g_1_Template, 2, 16, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\nfunction BarHorizontalNormalizedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalNormalizedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\nfunction BarHorizontalNormalizedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalNormalizedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\nfunction BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.onClick($event, group_r9));\n    })(\"activate\", function BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onActivate($event, group_r9));\n    })(\"deactivate\", function BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onDeactivate($event, group_r9));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r8.barChartType.Normalized)(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"activeEntries\", ctx_r8.activeEntries)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"seriesName\", group_r9.name)(\"animations\", ctx_r8.animations)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\nfunction BarHorizontalNormalizedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template, 2, 15, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\nfunction BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onClick($event, group_r15));\n    })(\"activate\", function BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.onActivate($event, group_r15));\n    })(\"deactivate\", function BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onDeactivate($event, group_r15));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const group_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r14.groupTransform(group_r15));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r14.barChartType.Normalized)(\"xScale\", ctx_r14.xScale)(\"yScale\", ctx_r14.yScale)(\"activeEntries\", ctx_r14.activeEntries)(\"colors\", ctx_r14.colors)(\"series\", group_r15.series)(\"dims\", ctx_r14.dims)(\"gradient\", ctx_r14.gradient)(\"tooltipDisabled\", ctx_r14.tooltipDisabled)(\"tooltipTemplate\", ctx_r14.tooltipTemplate)(\"seriesName\", group_r15.name)(\"animations\", ctx_r14.animations)(\"noBarWhenZero\", ctx_r14.noBarWhenZero);\n  }\n}\nfunction BarHorizontalNormalizedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template, 2, 14, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\nfunction BarHorizontalStackedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalStackedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\nfunction BarHorizontalStackedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalStackedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\nfunction BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onClick($event, group_r9));\n    })(\"activate\", function BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onActivate($event, group_r9));\n    })(\"deactivate\", function BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onDeactivate($event, group_r9));\n    })(\"dataLabelWidthChanged\", function BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r10 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDataLabelMaxWidthChanged($event, index_r10));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r8.barChartType.Stacked)(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"activeEntries\", ctx_r8.activeEntries)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"seriesName\", group_r9.name)(\"animations\", ctx_r8.animations)(\"showDataLabel\", ctx_r8.showDataLabel)(\"dataLabelFormatting\", ctx_r8.dataLabelFormatting)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\nfunction BarHorizontalStackedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template, 2, 17, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\nfunction BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onClick($event, group_r17));\n    })(\"activate\", function BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r21.onActivate($event, group_r17));\n    })(\"deactivate\", function BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onDeactivate($event, group_r17));\n    })(\"dataLabelWidthChanged\", function BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const index_r18 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onDataLabelMaxWidthChanged($event, index_r18));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const group_r17 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r16.groupTransform(group_r17));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r16.barChartType.Stacked)(\"xScale\", ctx_r16.xScale)(\"yScale\", ctx_r16.yScale)(\"colors\", ctx_r16.colors)(\"series\", group_r17.series)(\"activeEntries\", ctx_r16.activeEntries)(\"dims\", ctx_r16.dims)(\"gradient\", ctx_r16.gradient)(\"tooltipDisabled\", ctx_r16.tooltipDisabled)(\"tooltipTemplate\", ctx_r16.tooltipTemplate)(\"seriesName\", group_r17.name)(\"animations\", ctx_r16.animations)(\"showDataLabel\", ctx_r16.showDataLabel)(\"dataLabelFormatting\", ctx_r16.dataLabelFormatting)(\"noBarWhenZero\", ctx_r16.noBarWhenZero);\n  }\n}\nfunction BarHorizontalStackedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template, 2, 16, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\nconst _c29 = [\"ngx-charts-series-vertical\", \"\"];\nfunction SeriesVerticalComponent__svg_g_0__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function SeriesVerticalComponent__svg_g_0__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.onClick($event));\n    })(\"activate\", function SeriesVerticalComponent__svg_g_0__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.activate.emit($event));\n    })(\"deactivate\", function SeriesVerticalComponent__svg_g_0__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.deactivate.emit($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const bar_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"@.disabled\", !ctx_r3.animations)(\"width\", bar_r4.width)(\"height\", bar_r4.height)(\"x\", bar_r4.x)(\"y\", bar_r4.y)(\"fill\", bar_r4.color)(\"stops\", bar_r4.gradientStops)(\"data\", bar_r4.data)(\"orientation\", ctx_r3.barOrientation.Vertical)(\"roundEdges\", bar_r4.roundEdges)(\"gradient\", ctx_r3.gradient)(\"ariaLabel\", bar_r4.ariaLabel)(\"isActive\", ctx_r3.isActive(bar_r4.data))(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipPlacement\", ctx_r3.tooltipPlacement)(\"tooltipType\", ctx_r3.tooltipType)(\"tooltipTitle\", ctx_r3.tooltipTemplate ? undefined : bar_r4.tooltipText)(\"tooltipTemplate\", ctx_r3.tooltipTemplate)(\"tooltipContext\", bar_r4.data)(\"noBarWhenZero\", ctx_r3.noBarWhenZero)(\"animations\", ctx_r3.animations);\n  }\n}\nfunction SeriesVerticalComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_0__svg_g_1_Template, 1, 22, \"g\", 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.bars)(\"ngForTrackBy\", ctx_r0.trackBy);\n  }\n}\nfunction SeriesVerticalComponent__svg_g_1__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function SeriesVerticalComponent__svg_g_1__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onClick($event));\n    })(\"activate\", function SeriesVerticalComponent__svg_g_1__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.activate.emit($event));\n    })(\"deactivate\", function SeriesVerticalComponent__svg_g_1__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.deactivate.emit($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const bar_r10 = ctx.$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"width\", bar_r10.width)(\"height\", bar_r10.height)(\"x\", bar_r10.x)(\"y\", bar_r10.y)(\"fill\", bar_r10.color)(\"stops\", bar_r10.gradientStops)(\"data\", bar_r10.data)(\"orientation\", ctx_r9.barOrientation.Vertical)(\"roundEdges\", bar_r10.roundEdges)(\"gradient\", ctx_r9.gradient)(\"ariaLabel\", bar_r10.ariaLabel)(\"isActive\", ctx_r9.isActive(bar_r10.data))(\"tooltipDisabled\", ctx_r9.tooltipDisabled)(\"tooltipPlacement\", ctx_r9.tooltipPlacement)(\"tooltipType\", ctx_r9.tooltipType)(\"tooltipTitle\", ctx_r9.tooltipTemplate ? undefined : bar_r10.tooltipText)(\"tooltipTemplate\", ctx_r9.tooltipTemplate)(\"tooltipContext\", bar_r10.data)(\"noBarWhenZero\", ctx_r9.noBarWhenZero)(\"animations\", ctx_r9.animations);\n  }\n}\nfunction SeriesVerticalComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_1__svg_g_1_Template, 1, 20, \"g\", 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.bars)(\"ngForTrackBy\", ctx_r1.trackBy);\n  }\n}\nfunction SeriesVerticalComponent__svg_g_2__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵlistener(\"dimensionsChanged\", function SeriesVerticalComponent__svg_g_2__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const i_r17 = restoredCtx.index;\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.dataLabelHeightChanged.emit({\n        size: $event,\n        index: i_r17\n      }));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const b_r16 = ctx.$implicit;\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"barX\", b_r16.x)(\"barY\", b_r16.y)(\"barWidth\", b_r16.width)(\"barHeight\", b_r16.height)(\"value\", b_r16.total)(\"valueFormatting\", ctx_r15.dataLabelFormatting)(\"orientation\", ctx_r15.barOrientation.Vertical);\n  }\n}\nfunction SeriesVerticalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_2__svg_g_1_Template, 1, 7, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.barsForDataLabels)(\"ngForTrackBy\", ctx_r2.trackDataLabelBy);\n  }\n}\nfunction BarVerticalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\nfunction BarVerticalComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\nfunction BarVertical2DComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVertical2DComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.groupScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\nfunction BarVertical2DComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVertical2DComponent__svg_g_4_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.valueScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\nfunction BarVertical2DComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BarVertical2DComponent__svg_g_5__svg_g_1_Template__svg_g_select_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onClick($event, group_r9));\n    })(\"activate\", function BarVertical2DComponent__svg_g_5__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onActivate($event, group_r9));\n    })(\"deactivate\", function BarVertical2DComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onDeactivate($event, group_r9));\n    })(\"dataLabelHeightChanged\", function BarVertical2DComponent__svg_g_5__svg_g_1_Template__svg_g_dataLabelHeightChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r10 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDataLabelMaxHeightChanged($event, index_r10));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"activeEntries\", ctx_r8.activeEntries)(\"xScale\", ctx_r8.innerScale)(\"yScale\", ctx_r8.valueScale)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"showDataLabel\", ctx_r8.showDataLabel)(\"dataLabelFormatting\", ctx_r8.dataLabelFormatting)(\"seriesName\", group_r9.name)(\"roundEdges\", ctx_r8.roundEdges)(\"animations\", ctx_r8.animations)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n  }\n}\nfunction BarVertical2DComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVertical2DComponent__svg_g_5__svg_g_1_Template, 1, 17, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\nfunction BarVertical2DComponent__svg_g_6__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BarVertical2DComponent__svg_g_6__svg_g_1_Template__svg_g_select_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onClick($event, group_r17));\n    })(\"activate\", function BarVertical2DComponent__svg_g_6__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r21.onActivate($event, group_r17));\n    })(\"deactivate\", function BarVertical2DComponent__svg_g_6__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onDeactivate($event, group_r17));\n    })(\"dataLabelHeightChanged\", function BarVertical2DComponent__svg_g_6__svg_g_1_Template__svg_g_dataLabelHeightChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const index_r18 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onDataLabelMaxHeightChanged($event, index_r18));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const group_r17 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"activeEntries\", ctx_r16.activeEntries)(\"xScale\", ctx_r16.innerScale)(\"yScale\", ctx_r16.valueScale)(\"colors\", ctx_r16.colors)(\"series\", group_r17.series)(\"dims\", ctx_r16.dims)(\"gradient\", ctx_r16.gradient)(\"tooltipDisabled\", ctx_r16.tooltipDisabled)(\"tooltipTemplate\", ctx_r16.tooltipTemplate)(\"showDataLabel\", ctx_r16.showDataLabel)(\"dataLabelFormatting\", ctx_r16.dataLabelFormatting)(\"seriesName\", group_r17.name)(\"roundEdges\", ctx_r16.roundEdges)(\"animations\", ctx_r16.animations)(\"noBarWhenZero\", ctx_r16.noBarWhenZero);\n    i0.ɵɵattribute(\"transform\", ctx_r16.groupTransform(group_r17));\n  }\n}\nfunction BarVertical2DComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVertical2DComponent__svg_g_6__svg_g_1_Template, 1, 16, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\nfunction BarVerticalNormalizedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalNormalizedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\nfunction BarVerticalNormalizedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalNormalizedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\nfunction BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.onClick($event, group_r9));\n    })(\"activate\", function BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onActivate($event, group_r9));\n    })(\"deactivate\", function BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onDeactivate($event, group_r9));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r8.barChartType.Normalized)(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"activeEntries\", ctx_r8.activeEntries)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"seriesName\", group_r9.name)(\"animations\", ctx_r8.animations)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\nfunction BarVerticalNormalizedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template, 2, 15, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\nfunction BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onClick($event, group_r15));\n    })(\"activate\", function BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.onActivate($event, group_r15));\n    })(\"deactivate\", function BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onDeactivate($event, group_r15));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const group_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r14.groupTransform(group_r15));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r14.barChartType.Normalized)(\"xScale\", ctx_r14.xScale)(\"yScale\", ctx_r14.yScale)(\"activeEntries\", ctx_r14.activeEntries)(\"colors\", ctx_r14.colors)(\"series\", group_r15.series)(\"dims\", ctx_r14.dims)(\"gradient\", ctx_r14.gradient)(\"tooltipDisabled\", ctx_r14.tooltipDisabled)(\"tooltipTemplate\", ctx_r14.tooltipTemplate)(\"seriesName\", group_r15.name)(\"animations\", ctx_r14.animations)(\"noBarWhenZero\", ctx_r14.noBarWhenZero);\n  }\n}\nfunction BarVerticalNormalizedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template, 2, 14, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\nfunction BarVerticalStackedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalStackedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\nfunction BarVerticalStackedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalStackedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\nfunction BarVerticalStackedComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVerticalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onClick($event, group_r9));\n    })(\"activate\", function BarVerticalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onActivate($event, group_r9));\n    })(\"deactivate\", function BarVerticalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onDeactivate($event, group_r9));\n    })(\"dataLabelHeightChanged\", function BarVerticalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_dataLabelHeightChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r10 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDataLabelMaxHeightChanged($event, index_r10));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r8.barChartType.Stacked)(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"activeEntries\", ctx_r8.activeEntries)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"showDataLabel\", ctx_r8.showDataLabel)(\"dataLabelFormatting\", ctx_r8.dataLabelFormatting)(\"seriesName\", group_r9.name)(\"animations\", ctx_r8.animations)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\nfunction BarVerticalStackedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVerticalStackedComponent__svg_g_4__svg_g_1_Template, 2, 17, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\nfunction BarVerticalStackedComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVerticalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onClick($event, group_r17));\n    })(\"activate\", function BarVerticalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r21.onActivate($event, group_r17));\n    })(\"deactivate\", function BarVerticalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onDeactivate($event, group_r17));\n    })(\"dataLabelHeightChanged\", function BarVerticalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_dataLabelHeightChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const index_r18 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onDataLabelMaxHeightChanged($event, index_r18));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const group_r17 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r16.groupTransform(group_r17));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r16.barChartType.Stacked)(\"xScale\", ctx_r16.xScale)(\"yScale\", ctx_r16.yScale)(\"activeEntries\", ctx_r16.activeEntries)(\"colors\", ctx_r16.colors)(\"series\", group_r17.series)(\"dims\", ctx_r16.dims)(\"gradient\", ctx_r16.gradient)(\"tooltipDisabled\", ctx_r16.tooltipDisabled)(\"tooltipTemplate\", ctx_r16.tooltipTemplate)(\"showDataLabel\", ctx_r16.showDataLabel)(\"dataLabelFormatting\", ctx_r16.dataLabelFormatting)(\"seriesName\", group_r17.name)(\"animations\", ctx_r16.animations)(\"noBarWhenZero\", ctx_r16.noBarWhenZero);\n  }\n}\nfunction BarVerticalStackedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVerticalStackedComponent__svg_g_5__svg_g_1_Template, 2, 16, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\nconst _c30 = [\"ngx-charts-box\", \"\"];\nfunction BoxComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 5);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"orientation\", ctx_r0.BarOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\nfunction BoxComponent__svg_line_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 6);\n  }\n  if (rf & 2) {\n    const line_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"hidden\", ctx_r1.hideBar);\n    i0.ɵɵattribute(\"x1\", line_r2.v1.x)(\"y1\", line_r2.v1.y)(\"x2\", line_r2.v2.x)(\"y2\", line_r2.v2.y)(\"stroke\", ctx_r1.strokeColor)(\"stroke-width\", i_r3 === 2 ? ctx_r1.medianLineWidth : ctx_r1.whiskerStrokeWidth)(\"mask\", i_r3 ? undefined : ctx_r1.maskLine);\n  }\n}\nconst _c31 = [\"ngx-charts-box-series\", \"\"];\nfunction BoxChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 5);\n    i0.ɵɵlistener(\"activate\", function BoxChartComponent__svg_g_5_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onActivate($event));\n    })(\"deactivate\", function BoxChartComponent__svg_g_5_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onDeactivate($event));\n    })(\"select\", function BoxChartComponent__svg_g_5_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.onClick($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const result_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"yScale\", ctx_r0.yScale)(\"colors\", ctx_r0.colors)(\"roundEdges\", ctx_r0.roundEdges)(\"strokeColor\", ctx_r0.strokeColor)(\"strokeWidth\", ctx_r0.strokeWidth)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"series\", result_r1)(\"dims\", ctx_r0.dims)(\"animations\", ctx_r0.animations)(\"gradient\", ctx_r0.gradient);\n  }\n}\nconst _c32 = [\"ngx-charts-bubble-series\", \"\"];\nfunction BubbleSeriesComponent__svg_g_0__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function BubbleSeriesComponent__svg_g_0__svg_g_2_Template__svg_g_select_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onClick(circle_r1.data));\n    })(\"activate\", function BubbleSeriesComponent__svg_g_0__svg_g_2_Template__svg_g_activate_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.activateCircle(circle_r1));\n    })(\"deactivate\", function BubbleSeriesComponent__svg_g_0__svg_g_2_Template__svg_g_deactivate_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.deactivateCircle(circle_r1));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const circle_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"opacity\", circle_r1.opacity);\n    i0.ɵɵclassProp(\"active\", circle_r1.isActive);\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"cx\", 0)(\"cy\", 0)(\"r\", circle_r1.radius)(\"fill\", circle_r1.color)(\"pointerEvents\", \"all\")(\"data\", circle_r1.value)(\"classNames\", circle_r1.classNames)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipPlacement\", ctx_r2.placementTypes.Top)(\"tooltipType\", ctx_r2.styleTypes.tooltip)(\"tooltipTitle\", ctx_r2.tooltipTemplate ? undefined : ctx_r2.getTooltipText(circle_r1))(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"tooltipContext\", circle_r1.data);\n  }\n}\nfunction BubbleSeriesComponent__svg_g_0__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function BubbleSeriesComponent__svg_g_0__svg_g_3_Template__svg_g_select_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onClick(circle_r1.data));\n    })(\"activate\", function BubbleSeriesComponent__svg_g_0__svg_g_3_Template__svg_g_activate_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.activateCircle(circle_r1));\n    })(\"deactivate\", function BubbleSeriesComponent__svg_g_0__svg_g_3_Template__svg_g_deactivate_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.deactivateCircle(circle_r1));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const circle_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"opacity\", circle_r1.opacity);\n    i0.ɵɵclassProp(\"active\", circle_r1.isActive);\n    i0.ɵɵproperty(\"cx\", 0)(\"cy\", 0)(\"r\", circle_r1.radius)(\"fill\", circle_r1.color)(\"pointerEvents\", \"all\")(\"data\", circle_r1.value)(\"classNames\", circle_r1.classNames)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipPlacement\", ctx_r3.placementTypes.Top)(\"tooltipType\", ctx_r3.styleTypes.tooltip)(\"tooltipTitle\", ctx_r3.tooltipTemplate ? undefined : ctx_r3.getTooltipText(circle_r1))(\"tooltipTemplate\", ctx_r3.tooltipTemplate)(\"tooltipContext\", circle_r1.data);\n  }\n}\nfunction BubbleSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\");\n    i0.ɵɵtemplate(2, BubbleSeriesComponent__svg_g_0__svg_g_2_Template, 1, 18, \"g\", 1);\n    i0.ɵɵtemplate(3, BubbleSeriesComponent__svg_g_0__svg_g_3_Template, 1, 17, \"g\", 1);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const circle_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"transform\", circle_r1.transform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isSSR);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isSSR);\n  }\n}\nfunction BubbleChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BubbleChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"showGridLines\", ctx_r0.showGridLines)(\"dims\", ctx_r0.dims)(\"xScale\", ctx_r0.xScale)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\nfunction BubbleChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BubbleChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"showGridLines\", ctx_r1.showGridLines)(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\nfunction BubbleChartComponent__svg_g_8__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BubbleChartComponent__svg_g_8__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const series_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.onClick($event, series_r9));\n    })(\"activate\", function BubbleChartComponent__svg_g_8__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onActivate($event));\n    })(\"deactivate\", function BubbleChartComponent__svg_g_8__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"rScale\", ctx_r8.rScale)(\"xScaleType\", ctx_r8.xScaleType)(\"yScaleType\", ctx_r8.yScaleType)(\"xAxisLabel\", ctx_r8.xAxisLabel)(\"yAxisLabel\", ctx_r8.yAxisLabel)(\"colors\", ctx_r8.colors)(\"data\", series_r9)(\"activeEntries\", ctx_r8.activeEntries)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate);\n  }\n}\nfunction BubbleChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BubbleChartComponent__svg_g_8__svg_g_1_Template, 2, 13, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"clip-path\", ctx_r2.clipPath);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.data)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\nfunction BubbleChartComponent__svg_g_9__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BubbleChartComponent__svg_g_9__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const series_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onClick($event, series_r15));\n    })(\"activate\", function BubbleChartComponent__svg_g_9__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.onActivate($event));\n    })(\"deactivate\", function BubbleChartComponent__svg_g_9__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const series_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r14.xScale)(\"yScale\", ctx_r14.yScale)(\"rScale\", ctx_r14.rScale)(\"xScaleType\", ctx_r14.xScaleType)(\"yScaleType\", ctx_r14.yScaleType)(\"xAxisLabel\", ctx_r14.xAxisLabel)(\"yAxisLabel\", ctx_r14.yAxisLabel)(\"colors\", ctx_r14.colors)(\"data\", series_r15)(\"activeEntries\", ctx_r14.activeEntries)(\"tooltipDisabled\", ctx_r14.tooltipDisabled)(\"tooltipTemplate\", ctx_r14.tooltipTemplate);\n  }\n}\nfunction BubbleChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BubbleChartComponent__svg_g_9__svg_g_1_Template, 2, 12, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"clip-path\", ctx_r3.clipPath);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.data)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\nconst _c33 = [\"ngx-charts-heat-map-cell\", \"\"];\nfunction HeatMapCellComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\nconst _c34 = [\"ngx-charts-heat-map-cell-series\", \"\"];\nconst _c35 = function (a0, a1, a2) {\n  return {\n    series: a0,\n    name: a1,\n    value: a2\n  };\n};\nfunction HeatCellSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 1);\n    i0.ɵɵlistener(\"select\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onClick(c_r1.cell));\n    })(\"activate\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_activate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.activate.emit(c_r1.cell));\n    })(\"deactivate\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_deactivate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.deactivate.emit(c_r1.cell));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const c_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"x\", c_r1.x)(\"y\", c_r1.y)(\"width\", c_r1.width)(\"height\", c_r1.height)(\"fill\", c_r1.fill)(\"data\", c_r1.data)(\"gradient\", ctx_r0.gradient)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.tooltipText(c_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", i0.ɵɵpureFunction3(14, _c35, c_r1.series, c_r1.label, c_r1.data));\n  }\n}\nfunction HeatMapComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function HeatMapComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\nfunction HeatMapComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function HeatMapComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\nfunction HeatMapComponent__svg_rect_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\");\n  }\n  if (rf & 2) {\n    const rect_r7 = ctx.$implicit;\n    i0.ɵɵattribute(\"x\", rect_r7.x)(\"y\", rect_r7.y)(\"rx\", rect_r7.rx)(\"width\", rect_r7.width)(\"height\", rect_r7.height)(\"fill\", rect_r7.fill);\n  }\n}\nconst _c36 = [\"ngx-charts-line\", \"\"];\nfunction LineComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"path\", 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"d\", ctx_r0.initialPath)(\"fill\", ctx_r0.fill)(\"stroke\", ctx_r0.stroke);\n  }\n}\nfunction LineComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"path\", 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"d\", ctx_r1.initialPath)(\"fill\", ctx_r1.fill)(\"stroke\", ctx_r1.stroke);\n  }\n}\nconst _c37 = [\"ngx-charts-line-series\", \"\"];\nfunction LineSeriesComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\nfunction LineSeriesComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 5);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"active\", ctx_r1.isActive(ctx_r1.data))(\"inactive\", ctx_r1.isInactive(ctx_r1.data));\n    i0.ɵɵproperty(\"data\", ctx_r1.data)(\"path\", ctx_r1.outerPath)(\"fill\", ctx_r1.hasGradient ? ctx_r1.gradientUrl : ctx_r1.colors.getColor(ctx_r1.data.name))(\"opacity\", ctx_r1.rangeFillOpacity)(\"animations\", ctx_r1.animations);\n  }\n}\nfunction LineChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function LineChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\nfunction LineChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function LineChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"referenceLines\", ctx_r1.referenceLines)(\"showRefLines\", ctx_r1.showRefLines)(\"showRefLabels\", ctx_r1.showRefLabels)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\nfunction LineChartComponent__svg_g_8__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"data\", series_r11)(\"activeEntries\", ctx_r10.activeEntries)(\"scaleType\", ctx_r10.scaleType)(\"curve\", ctx_r10.curve)(\"rangeFillOpacity\", ctx_r10.rangeFillOpacity)(\"hasRange\", ctx_r10.hasRange)(\"animations\", ctx_r10.animations);\n  }\n}\nfunction LineChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, LineChartComponent__svg_g_8__svg_g_1_Template, 2, 11, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\nfunction LineChartComponent__svg_g_9__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const series_r13 = ctx.$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r12.xScale)(\"yScale\", ctx_r12.yScale)(\"colors\", ctx_r12.colors)(\"data\", series_r13)(\"activeEntries\", ctx_r12.activeEntries)(\"scaleType\", ctx_r12.scaleType)(\"curve\", ctx_r12.curve)(\"rangeFillOpacity\", ctx_r12.rangeFillOpacity)(\"hasRange\", ctx_r12.hasRange)(\"animations\", ctx_r12.animations);\n  }\n}\nfunction LineChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, LineChartComponent__svg_g_9__svg_g_1_Template, 2, 10, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\nfunction LineChartComponent__svg_g_10__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 14);\n    i0.ɵɵlistener(\"select\", function LineChartComponent__svg_g_10__svg_g_2_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onClick($event));\n    })(\"activate\", function LineChartComponent__svg_g_10__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.onActivate($event));\n    })(\"deactivate\", function LineChartComponent__svg_g_10__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const series_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r14.xScale)(\"yScale\", ctx_r14.yScale)(\"colors\", ctx_r14.colors)(\"data\", series_r15)(\"scaleType\", ctx_r14.scaleType)(\"visibleValue\", ctx_r14.hoveredVertical)(\"activeEntries\", ctx_r14.activeEntries)(\"tooltipDisabled\", ctx_r14.tooltipDisabled)(\"tooltipTemplate\", ctx_r14.tooltipTemplate);\n  }\n}\nfunction LineChartComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 11);\n    i0.ɵɵlistener(\"mouseleave\", function LineChartComponent__svg_g_10_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.hideCircles());\n    });\n    i0.ɵɵelementStart(1, \"g\", 12);\n    i0.ɵɵlistener(\"hover\", function LineChartComponent__svg_g_10_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.updateHoveredVertical($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, LineChartComponent__svg_g_10__svg_g_2_Template, 2, 9, \"g\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r4.dims)(\"xSet\", ctx_r4.xSet)(\"xScale\", ctx_r4.xScale)(\"yScale\", ctx_r4.yScale)(\"results\", ctx_r4.results)(\"colors\", ctx_r4.colors)(\"tooltipDisabled\", ctx_r4.tooltipDisabled)(\"tooltipTemplate\", ctx_r4.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results);\n  }\n}\nfunction LineChartComponent__svg_g_11__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const series_r24 = ctx.$implicit;\n    const ctx_r23 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r23.timelineXScale)(\"yScale\", ctx_r23.timelineYScale)(\"colors\", ctx_r23.colors)(\"data\", series_r24)(\"scaleType\", ctx_r23.scaleType)(\"curve\", ctx_r23.curve)(\"hasRange\", ctx_r23.hasRange)(\"animations\", ctx_r23.animations);\n  }\n}\nfunction LineChartComponent__svg_g_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 15);\n    i0.ɵɵlistener(\"onDomainChange\", function LineChartComponent__svg_g_11_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r25.updateDomain($event));\n    });\n    i0.ɵɵtemplate(1, LineChartComponent__svg_g_11__svg_g_1_Template, 2, 8, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r5.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r5.timelineWidth, ctx_r5.height))(\"height\", ctx_r5.timelineHeight)(\"scheme\", ctx_r5.scheme)(\"customColors\", ctx_r5.customColors)(\"scaleType\", ctx_r5.scaleType)(\"legend\", ctx_r5.legend);\n    i0.ɵɵattribute(\"transform\", ctx_r5.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.results)(\"ngForTrackBy\", ctx_r5.trackBy);\n  }\n}\nconst _c38 = [\"ngx-charts-pie-label\", \"\"];\nconst _c39 = [\"ngx-charts-polar-series\", \"\"];\nfunction PolarSeriesComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r0.seriesColor)(\"name\", ctx_r0.gradientId)(\"startOpacity\", 0.25)(\"endOpacity\", 1)(\"stops\", ctx_r0.gradientStops);\n  }\n}\nfunction PolarSeriesComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"select\", function PolarSeriesComponent__svg_g_4_Template__svg_g_select_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.select.emit(circle_r2.data));\n    })(\"activate\", function PolarSeriesComponent__svg_g_4_Template__svg_g_activate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.activate.emit({\n        name: circle_r2.data.series\n      }));\n    })(\"deactivate\", function PolarSeriesComponent__svg_g_4_Template__svg_g_deactivate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.deactivate.emit({\n        name: circle_r2.data.series\n      }));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const circle_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"opacity\", ctx_r1.inactive ? 0.2 : 1);\n    i0.ɵɵproperty(\"cx\", circle_r2.cx)(\"cy\", circle_r2.cy)(\"r\", ctx_r1.circleRadius)(\"fill\", circle_r2.color)(\"tooltipDisabled\", ctx_r1.tooltipDisabled)(\"tooltipPlacement\", ctx_r1.placementTypes.Top)(\"tooltipType\", ctx_r1.styleTypes.tooltip)(\"tooltipTitle\", ctx_r1.tooltipTemplate ? undefined : ctx_r1.tooltipText(circle_r2))(\"tooltipTemplate\", ctx_r1.tooltipTemplate)(\"tooltipContext\", circle_r2.data);\n  }\n}\nfunction PolarChartComponent__svg_g_4__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"circle\", 7);\n  }\n  if (rf & 2) {\n    const r_r7 = ctx.$implicit;\n    i0.ɵɵattribute(\"r\", r_r7);\n  }\n}\nfunction PolarChartComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_4__svg_circle_1_Template, 1, 1, \"circle\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.radiusTicks);\n  }\n}\nfunction PolarChartComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 9);\n  }\n  if (rf & 2) {\n    const tick_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"data\", tick_r9)(\"radius\", ctx_r8.outerRadius)(\"label\", tick_r9.label)(\"max\", ctx_r8.outerRadius)(\"value\", ctx_r8.showGridLines ? 1 : ctx_r8.outerRadius)(\"explodeSlices\", true)(\"animations\", ctx_r8.animations)(\"labelTrim\", ctx_r8.labelTrim)(\"labelTrimSize\", ctx_r8.labelTrimSize);\n  }\n}\nfunction PolarChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_5__svg_g_1_Template, 1, 9, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.thetaTicks);\n  }\n}\nfunction PolarChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"dimensionsChanged\", function PolarChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r2.yAxisScale)(\"dims\", ctx_r2.yAxisDims)(\"showGridLines\", ctx_r2.showGridLines)(\"showLabel\", ctx_r2.showYAxisLabel)(\"labelText\", ctx_r2.yAxisLabel)(\"trimTicks\", ctx_r2.trimYAxisTicks)(\"maxTickLength\", ctx_r2.maxYAxisTickLength)(\"tickFormatting\", ctx_r2.yAxisTickFormatting)(\"wrapTicks\", ctx_r2.wrapTicks);\n    i0.ɵɵattribute(\"transform\", ctx_r2.transformYAxis);\n  }\n}\nfunction PolarChartComponent__svg_g_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 11);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"label\", ctx_r3.xAxisLabel)(\"offset\", ctx_r3.labelOffset)(\"orient\", ctx_r3.orientation.Bottom)(\"height\", ctx_r3.dims.height)(\"width\", ctx_r3.dims.width);\n  }\n}\nfunction PolarChartComponent__svg_g_8__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function PolarChartComponent__svg_g_8__svg_g_1_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onClick($event));\n    })(\"activate\", function PolarChartComponent__svg_g_8__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onActivate($event));\n    })(\"deactivate\", function PolarChartComponent__svg_g_8__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r17.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const series_r13 = ctx.$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"gradient\", ctx_r12.gradient)(\"xScale\", ctx_r12.xScale)(\"yScale\", ctx_r12.yScale)(\"colors\", ctx_r12.colors)(\"data\", series_r13)(\"activeEntries\", ctx_r12.activeEntries)(\"scaleType\", ctx_r12.scaleType)(\"curve\", ctx_r12.curve)(\"rangeFillOpacity\", ctx_r12.rangeFillOpacity)(\"animations\", ctx_r12.animations)(\"tooltipDisabled\", ctx_r12.tooltipDisabled)(\"tooltipTemplate\", ctx_r12.tooltipTemplate);\n  }\n}\nfunction PolarChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_8__svg_g_1_Template, 2, 13, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r4.transformPlot);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\nfunction PolarChartComponent__svg_g_9__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function PolarChartComponent__svg_g_9__svg_g_1_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r20.onClick($event));\n    })(\"activate\", function PolarChartComponent__svg_g_9__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onActivate($event));\n    })(\"deactivate\", function PolarChartComponent__svg_g_9__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const series_r19 = ctx.$implicit;\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"gradient\", ctx_r18.gradient)(\"xScale\", ctx_r18.xScale)(\"yScale\", ctx_r18.yScale)(\"colors\", ctx_r18.colors)(\"data\", series_r19)(\"activeEntries\", ctx_r18.activeEntries)(\"scaleType\", ctx_r18.scaleType)(\"curve\", ctx_r18.curve)(\"rangeFillOpacity\", ctx_r18.rangeFillOpacity)(\"animations\", ctx_r18.animations)(\"tooltipDisabled\", ctx_r18.tooltipDisabled)(\"tooltipTemplate\", ctx_r18.tooltipTemplate);\n  }\n}\nfunction PolarChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_9__svg_g_1_Template, 2, 12, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r5.transformPlot);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.results)(\"ngForTrackBy\", ctx_r5.trackBy);\n  }\n}\nconst _c40 = [\"ngx-charts-pie-arc\", \"\"];\nfunction PieArcComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"color\", ctx_r0.fill)(\"name\", ctx_r0.radialGradientId)(\"startOpacity\", ctx_r0.startOpacity);\n  }\n}\nconst _c41 = [\"ngx-charts-pie-series\", \"\"];\nfunction PieSeriesComponent__svg_g_0__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 3);\n  }\n  if (rf & 2) {\n    const arc_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", arc_r1)(\"radius\", ctx_r2.outerRadius)(\"color\", ctx_r2.color(arc_r1))(\"label\", ctx_r2.labelText(arc_r1))(\"labelTrim\", ctx_r2.trimLabels)(\"labelTrimSize\", ctx_r2.maxLabelLength)(\"max\", ctx_r2.max)(\"value\", arc_r1.value)(\"explodeSlices\", ctx_r2.explodeSlices)(\"animations\", ctx_r2.animations);\n  }\n}\nfunction PieSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PieSeriesComponent__svg_g_0__svg_g_1_Template, 1, 10, \"g\", 1);\n    i0.ɵɵelementStart(2, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function PieSeriesComponent__svg_g_0_Template__svg_g_select_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onClick($event));\n    })(\"activate\", function PieSeriesComponent__svg_g_0_Template__svg_g_activate_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.activate.emit($event));\n    })(\"deactivate\", function PieSeriesComponent__svg_g_0_Template__svg_g_deactivate_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.deactivate.emit($event));\n    })(\"dblclick\", function PieSeriesComponent__svg_g_0_Template__svg_g_dblclick_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.dblclick.emit($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const arc_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.labelVisible(arc_r1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"startAngle\", arc_r1.startAngle)(\"endAngle\", arc_r1.endAngle)(\"innerRadius\", ctx_r0.innerRadius)(\"outerRadius\", ctx_r0.outerRadius)(\"fill\", ctx_r0.color(arc_r1))(\"value\", arc_r1.data.value)(\"gradient\", ctx_r0.gradient)(\"data\", arc_r1.data)(\"max\", ctx_r0.max)(\"explodeSlices\", ctx_r0.explodeSlices)(\"isActive\", ctx_r0.isActive(arc_r1.data))(\"animate\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.getTooltipTitle(arc_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", arc_r1.data);\n  }\n}\nconst _c42 = \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\";\nconst _c43 = [\"ngx-charts-pie-grid-series\", \"\"];\nfunction PieGridSeriesComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onClick($event));\n    })(\"activate\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.activate.emit($event));\n    })(\"deactivate\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.deactivate.emit($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const arc_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"startAngle\", arc_r1.startAngle)(\"endAngle\", arc_r1.endAngle)(\"innerRadius\", ctx_r0.innerRadius)(\"outerRadius\", ctx_r0.outerRadius)(\"fill\", ctx_r0.color(arc_r1))(\"value\", arc_r1.data.value)(\"data\", arc_r1.data)(\"gradient\", false)(\"pointerEvents\", arc_r1.pointerEvents)(\"animate\", arc_r1.animate);\n    i0.ɵɵattribute(\"class\", arc_r1.class);\n  }\n}\nfunction PieGridComponent__svg_g_2__svg_text_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"text\", 10);\n  }\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"countTo\", series_r1.percent)(\"countSuffix\", \"%\");\n  }\n}\nfunction PieGridComponent__svg_g_2__svg_text_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", series_r1.percent.toLocaleString(), \" \");\n  }\n}\nfunction PieGridComponent__svg_g_2__svg_text_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"text\", 12);\n  }\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"countTo\", series_r1.total)(\"countPrefix\", ctx_r4.label + \": \");\n    i0.ɵɵattribute(\"y\", series_r1.outerRadius);\n  }\n}\nfunction PieGridComponent__svg_g_2__svg_text_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"y\", series_r1.outerRadius);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", ctx_r5.label, \": \", series_r1.total.toLocaleString(), \" \");\n  }\n}\nconst _c44 = function (a0) {\n  return {\n    data: a0\n  };\n};\nfunction PieGridComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 3)(1, \"g\", 4);\n    i0.ɵɵlistener(\"select\", function PieGridComponent__svg_g_2_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onClick($event));\n    })(\"activate\", function PieGridComponent__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onActivate($event));\n    })(\"deactivate\", function PieGridComponent__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, PieGridComponent__svg_g_2__svg_text_2_Template, 1, 2, \"text\", 5);\n    i0.ɵɵtemplate(3, PieGridComponent__svg_g_2__svg_text_3_Template, 2, 1, \"text\", 6);\n    i0.ɵɵelementStart(4, \"text\", 7);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, PieGridComponent__svg_g_2__svg_text_6_Template, 1, 3, \"text\", 8);\n    i0.ɵɵtemplate(7, PieGridComponent__svg_g_2__svg_text_7_Template, 2, 3, \"text\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const series_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", series_r1.transform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"colors\", series_r1.colors)(\"data\", series_r1.data)(\"innerRadius\", series_r1.innerRadius)(\"outerRadius\", series_r1.outerRadius)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.tooltipText(i0.ɵɵpureFunction1(17, _c44, series_r1)))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", series_r1.data[0].data);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.animations);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", series_r1.label, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.animations);\n  }\n}\nconst _c45 = [\"textEl\"];\nconst _c46 = [\"ngx-charts-card\", \"\"];\nfunction CardComponent__svg_path_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"path\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"fill\", ctx_r0.bandColor)(\"transform\", ctx_r0.transformBand)(\"d\", ctx_r0.bandPath);\n  }\n}\nconst _c47 = [\"ngx-charts-card-series\", \"\"];\nfunction CardSeriesComponent__svg_rect_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\", 2);\n  }\n  if (rf & 2) {\n    const c_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"fill\", ctx_r0.emptyColor);\n    i0.ɵɵattribute(\"x\", c_r2.x)(\"y\", c_r2.y)(\"width\", c_r2.width)(\"height\", c_r2.height);\n  }\n}\nfunction CardSeriesComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 3);\n    i0.ɵɵlistener(\"select\", function CardSeriesComponent__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onClick($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const c_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"x\", c_r3.x)(\"y\", c_r3.y)(\"width\", c_r3.width)(\"height\", c_r3.height)(\"color\", c_r3.color)(\"bandColor\", c_r3.bandColor)(\"textColor\", c_r3.textColor)(\"data\", c_r3.data)(\"label\", c_r3.label)(\"medianSize\", ctx_r1.medianSize)(\"valueFormatting\", ctx_r1.valueFormatting)(\"labelFormatting\", ctx_r1.labelFormatting)(\"animations\", ctx_r1.animations);\n  }\n}\nconst _c48 = [\"ngx-charts-tree-map-cell\", \"\"];\nfunction TreeMapCellComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.orientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\nfunction TreeMapCellComponent__svg_foreignObject_3__xhtml_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 8);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"countTo\", ctx_r2.value)(\"valueFormatting\", ctx_r2.valueFormatting);\n  }\n}\nfunction TreeMapCellComponent__svg_foreignObject_3__xhtml_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.formattedValue, \" \");\n  }\n}\nfunction TreeMapCellComponent__svg_foreignObject_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"foreignObject\", 4);\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵelement(2, \"span\", 5)(3, \"br\");\n    i0.ɵɵtemplate(4, TreeMapCellComponent__svg_foreignObject_3__xhtml_span_4_Template, 1, 2, \"span\", 6);\n    i0.ɵɵtemplate(5, TreeMapCellComponent__svg_foreignObject_3__xhtml_span_5_Template, 2, 1, \"span\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"pointer-events\", \"none\");\n    i0.ɵɵattribute(\"x\", ctx_r1.x)(\"y\", ctx_r1.y)(\"width\", ctx_r1.width)(\"height\", ctx_r1.height);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"color\", ctx_r1.getTextColor())(\"height\", ctx_r1.height + \"px\")(\"width\", ctx_r1.width + \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.formattedLabel, i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.animations);\n  }\n}\nconst _c49 = [\"ngx-charts-tree-map-cell-series\", \"\"];\nfunction TreeMapCellSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 1);\n    i0.ɵɵlistener(\"select\", function TreeMapCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onClick($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const c_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", c_r1.data)(\"x\", c_r1.x)(\"y\", c_r1.y)(\"width\", c_r1.width)(\"height\", c_r1.height)(\"fill\", c_r1.fill)(\"label\", c_r1.label)(\"value\", c_r1.value)(\"valueFormatting\", ctx_r0.valueFormatting)(\"labelFormatting\", ctx_r0.labelFormatting)(\"gradient\", ctx_r0.gradient)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(c_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", c_r1.data);\n  }\n}\nconst _c50 = [\"valueTextEl\"];\nconst _c51 = [\"unitsTextEl\"];\nfunction LinearGaugeComponent__svg_line_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 10);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r0.transformLine)(\"stroke\", ctx_r0.colors.getColor(ctx_r0.units));\n  }\n}\nfunction LinearGaugeComponent__svg_line_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 11);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r1.transformLine)(\"stroke\", ctx_r1.colors.getColor(ctx_r1.units));\n  }\n}\nconst _c52 = function () {\n  return {};\n};\nconst _c53 = [\"ngx-charts-gauge-arc\", \"\"];\nconst _c54 = [\"ngx-charts-gauge-axis\", \"\"];\nfunction GaugeAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵelement(1, \"path\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tick_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"d\", tick_r3.line);\n  }\n}\nfunction GaugeAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2)(1, \"text\", 3);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const tick_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"text-anchor\", tick_r4.textAnchor);\n    i0.ɵɵattribute(\"transform\", tick_r4.textTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tick_r4.text, \" \");\n  }\n}\nfunction GaugeAxisComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵelement(1, \"path\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tick_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"d\", tick_r5.line);\n  }\n}\nfunction GaugeComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 5);\n    i0.ɵɵlistener(\"select\", function GaugeComponent__svg_g_2_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onClick($event));\n    })(\"activate\", function GaugeComponent__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onActivate($event));\n    })(\"deactivate\", function GaugeComponent__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const arc_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r0.rotation);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"backgroundArc\", arc_r3.backgroundArc)(\"valueArc\", arc_r3.valueArc)(\"cornerRadius\", ctx_r0.cornerRadius)(\"colors\", ctx_r0.colors)(\"isActive\", ctx_r0.isActive(arc_r3.valueArc.data))(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"valueFormatting\", ctx_r0.valueFormatting)(\"animations\", ctx_r0.animations);\n  }\n}\nfunction GaugeComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"bigSegments\", ctx_r1.bigSegments)(\"smallSegments\", ctx_r1.smallSegments)(\"min\", ctx_r1.min)(\"max\", ctx_r1.max)(\"radius\", ctx_r1.outerRadius)(\"angleSpan\", ctx_r1.angleSpan)(\"valueScale\", ctx_r1.valueScale)(\"startAngle\", ctx_r1.startAngle)(\"tickFormatting\", ctx_r1.axisTickFormatting);\n  }\n}\nfunction GaugeComponent__svg_text_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 7, 8)(2, \"tspan\", 9);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"tspan\", 10);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n    i0.ɵɵattribute(\"transform\", ctx_r2.textTransform);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r2.displayValue);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.units);\n  }\n}\nfunction throttle(func, wait, options) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n  return function () {\n    const now = +new Date();\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n    const remaining = wait - (now - previous);\n    context = this;\n    // eslint-disable-next-line prefer-rest-params\n    args = arguments;\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nfunction throttleable(duration, options) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n        return this[key];\n      }\n    };\n  };\n}\nvar PlacementTypes;\n(function (PlacementTypes) {\n  PlacementTypes[\"Top\"] = \"top\";\n  PlacementTypes[\"Bottom\"] = \"bottom\";\n  PlacementTypes[\"Left\"] = \"left\";\n  PlacementTypes[\"Right\"] = \"right\";\n  PlacementTypes[\"Center\"] = \"center\";\n})(PlacementTypes || (PlacementTypes = {}));\nconst caretOffset = 7;\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === PlacementTypes.Top) {\n    return elDimensions.top - caretOffset;\n  }\n  if (alignment === PlacementTypes.Bottom) {\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n  }\n  if (alignment === PlacementTypes.Center) {\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n  }\n  return undefined;\n}\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === PlacementTypes.Left) {\n    return elDimensions.left - caretOffset;\n  }\n  if (alignment === PlacementTypes.Right) {\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n  }\n  if (alignment === PlacementTypes.Center) {\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n  }\n  return undefined;\n}\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\nclass PositionHelper {\n  /**\n   * Calculate vertical alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment) {\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n    if (result + popoverDimensions.height > window.innerHeight) {\n      result = window.innerHeight - popoverDimensions.height;\n    }\n    return result;\n  }\n  /**\n   * Calculate vertical caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n    let result;\n    if (alignment === PlacementTypes.Top) {\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n    }\n    if (alignment === PlacementTypes.Bottom) {\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n    }\n    if (alignment === PlacementTypes.Center) {\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n    }\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\n    }\n    return result;\n  }\n  /**\n   * Calculate horz alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment) {\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n    if (result + popoverDimensions.width > window.innerWidth) {\n      result = window.innerWidth - popoverDimensions.width;\n    }\n    return result;\n  }\n  /**\n   * Calculate horz caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n    let result;\n    if (alignment === PlacementTypes.Left) {\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n    }\n    if (alignment === PlacementTypes.Right) {\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n    }\n    if (alignment === PlacementTypes.Center) {\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n    }\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\n    }\n    return result;\n  }\n  /**\n   * Checks if the element's position should be flipped\n   *\n   * @memberOf PositionHelper\n   */\n  static shouldFlip(elDimensions, popoverDimensions, placement, spacing) {\n    let flip = false;\n    if (placement === PlacementTypes.Right) {\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n        flip = true;\n      }\n    }\n    if (placement === PlacementTypes.Left) {\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n        flip = true;\n      }\n    }\n    if (placement === PlacementTypes.Top) {\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n        flip = true;\n      }\n    }\n    if (placement === PlacementTypes.Bottom) {\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n        flip = true;\n      }\n    }\n    return flip;\n  }\n  /**\n   * Position caret\n   *\n   * @memberOf PositionHelper\n   */\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment) {\n    let top = 0;\n    let left = 0;\n    if (placement === PlacementTypes.Right) {\n      left = -7;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Left) {\n      left = elmDim.width;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Top) {\n      top = elmDim.height;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Bottom) {\n      top = -7;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    }\n    return {\n      top,\n      left\n    };\n  }\n  /**\n   * Position content\n   *\n   * @memberOf PositionHelper\n   */\n  static positionContent(placement, elmDim, hostDim, spacing, alignment) {\n    let top = 0;\n    let left = 0;\n    if (placement === PlacementTypes.Right) {\n      left = hostDim.left + hostDim.width + spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Left) {\n      left = hostDim.left - elmDim.width - spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Top) {\n      top = hostDim.top - elmDim.height - spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Bottom) {\n      top = hostDim.top + hostDim.height + spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    }\n    return {\n      top,\n      left\n    };\n  }\n  /**\n   * Determine placement based on flip\n   *\n   * @memberOf PositionHelper\n   */\n  static determinePlacement(placement, elmDim, hostDim, spacing) {\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n    if (shouldFlip) {\n      if (placement === PlacementTypes.Right) {\n        return PlacementTypes.Left;\n      } else if (placement === PlacementTypes.Left) {\n        return PlacementTypes.Right;\n      } else if (placement === PlacementTypes.Top) {\n        return PlacementTypes.Bottom;\n      } else if (placement === PlacementTypes.Bottom) {\n        return PlacementTypes.Top;\n      }\n    }\n    return placement;\n  }\n}\nclass TooltipContentComponent {\n  constructor(element, renderer, platformId) {\n    this.element = element;\n    this.renderer = renderer;\n    this.platformId = platformId;\n  }\n  get cssClasses() {\n    let clz = 'ngx-charts-tooltip-content';\n    clz += ` position-${this.placement}`;\n    clz += ` type-${this.type}`;\n    clz += ` ${this.cssClass}`;\n    return clz;\n  }\n  ngAfterViewInit() {\n    setTimeout(this.position.bind(this));\n  }\n  position() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n    const nativeElm = this.element.nativeElement;\n    const hostDim = this.host.nativeElement.getBoundingClientRect();\n    // if no dims were found, never show\n    if (!hostDim.height && !hostDim.width) return;\n    const elmDim = nativeElm.getBoundingClientRect();\n    this.checkFlip(hostDim, elmDim);\n    this.positionContent(nativeElm, hostDim, elmDim);\n    if (this.showCaret) {\n      this.positionCaret(hostDim, elmDim);\n    }\n    // animate its entry\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n  }\n  positionContent(nativeElm, hostDim, elmDim) {\n    const {\n      top,\n      left\n    } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n  }\n  positionCaret(hostDim, elmDim) {\n    const caretElm = this.caretElm.nativeElement;\n    const caretDimensions = caretElm.getBoundingClientRect();\n    const {\n      top,\n      left\n    } = PositionHelper.positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment);\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\n  }\n  checkFlip(hostDim, elmDim) {\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n  }\n  onWindowResize() {\n    this.position();\n  }\n}\nTooltipContentComponent.ɵfac = function TooltipContentComponent_Factory(t) {\n  return new (t || TooltipContentComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nTooltipContentComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TooltipContentComponent,\n  selectors: [[\"ngx-tooltip-content\"]],\n  viewQuery: function TooltipContentComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.caretElm = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function TooltipContentComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"resize\", function TooltipContentComponent_resize_HostBindingHandler() {\n        return ctx.onWindowResize();\n      }, false, i0.ɵɵresolveWindow);\n    }\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClasses);\n    }\n  },\n  inputs: {\n    host: \"host\",\n    showCaret: \"showCaret\",\n    type: \"type\",\n    placement: \"placement\",\n    alignment: \"alignment\",\n    spacing: \"spacing\",\n    cssClass: \"cssClass\",\n    title: \"title\",\n    template: \"template\",\n    context: \"context\"\n  },\n  decls: 6,\n  vars: 6,\n  consts: [[3, \"hidden\"], [\"caretElm\", \"\"], [1, \"tooltip-content\"], [4, \"ngIf\"], [3, \"innerHTML\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"innerHTML\"]],\n  template: function TooltipContentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵelement(1, \"span\", 0, 1);\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵtemplate(4, TooltipContentComponent_span_4_Template, 2, 4, \"span\", 3);\n      i0.ɵɵtemplate(5, TooltipContentComponent_span_5_Template, 1, 1, \"span\", 4);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassMapInterpolate1(\"tooltip-caret position-\", ctx.placement, \"\");\n      i0.ɵɵproperty(\"hidden\", !ctx.showCaret);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !ctx.title);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.title);\n    }\n  },\n  dependencies: [i2.NgIf, i2.NgTemplateOutlet],\n  styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"],\n  encapsulation: 2\n});\n__decorate([throttleable(100)], TooltipContentComponent.prototype, \"onWindowResize\", null);\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipContentComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-tooltip-content',\n      template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    host: [{\n      type: Input\n    }],\n    showCaret: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    placement: [{\n      type: Input\n    }],\n    alignment: [{\n      type: Input\n    }],\n    spacing: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    template: [{\n      type: Input\n    }],\n    context: [{\n      type: Input\n    }],\n    caretElm: [{\n      type: ViewChild,\n      args: ['caretElm']\n    }],\n    cssClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    onWindowResize: [{\n      type: HostListener,\n      args: ['window:resize']\n    }]\n  });\n})();\nclass InjectionRegisteryService {\n  constructor(injectionService) {\n    this.injectionService = injectionService;\n    this.defaults = {};\n    this.components = new Map();\n  }\n  getByType(type = this.type) {\n    return this.components.get(type);\n  }\n  create(bindings) {\n    return this.createByType(this.type, bindings);\n  }\n  createByType(type, bindings) {\n    bindings = this.assignDefaults(bindings);\n    const component = this.injectComponent(type, bindings);\n    this.register(type, component);\n    return component;\n  }\n  destroy(instance) {\n    const compsByType = this.components.get(instance.componentType);\n    if (compsByType && compsByType.length) {\n      const idx = compsByType.indexOf(instance);\n      if (idx > -1) {\n        const component = compsByType[idx];\n        component.destroy();\n        compsByType.splice(idx, 1);\n      }\n    }\n  }\n  destroyAll() {\n    this.destroyByType(this.type);\n  }\n  destroyByType(type) {\n    const comps = this.components.get(type);\n    if (comps && comps.length) {\n      let i = comps.length - 1;\n      while (i >= 0) {\n        this.destroy(comps[i--]);\n      }\n    }\n  }\n  injectComponent(type, bindings) {\n    return this.injectionService.appendComponent(type, bindings);\n  }\n  assignDefaults(bindings) {\n    const inputs = {\n      ...this.defaults.inputs\n    };\n    const outputs = {\n      ...this.defaults.outputs\n    };\n    if (!bindings.inputs && !bindings.outputs) {\n      bindings = {\n        inputs: bindings\n      };\n    }\n    if (inputs) {\n      bindings.inputs = {\n        ...inputs,\n        ...bindings.inputs\n      };\n    }\n    if (outputs) {\n      bindings.outputs = {\n        ...outputs,\n        ...bindings.outputs\n      };\n    }\n    return bindings;\n  }\n  register(type, component) {\n    if (!this.components.has(type)) {\n      this.components.set(type, []);\n    }\n    const types = this.components.get(type);\n    types.push(component);\n  }\n}\nfunction isViewContainerRef(x) {\n  return x.element;\n}\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\nclass InjectionService {\n  constructor(applicationRef, componentFactoryResolver, injector) {\n    this.applicationRef = applicationRef;\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.injector = injector;\n  }\n  /**\n   * Sets a default global root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   */\n  static setGlobalRootViewContainer(container) {\n    InjectionService.globalRootViewContainer = container;\n  }\n  /**\n   * Gets the root view container to inject the component to.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainer() {\n    if (this._container) return this._container;\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\n    throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.');\n  }\n  /**\n   * Overrides the default root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   *\n   * @memberOf InjectionService\n   */\n  setRootViewContainer(container) {\n    this._container = container;\n  }\n  /**\n   * Gets the html element for a component ref.\n   *\n   * @param componentRef\n   *\n   * @memberOf InjectionService\n   */\n  getComponentRootNode(component) {\n    if (isViewContainerRef(component)) {\n      return component.element.nativeElement;\n    }\n    if (component.hostView && component.hostView.rootNodes.length > 0) {\n      return component.hostView.rootNodes[0];\n    }\n    // the top most component root node has no `hostView`\n    return component.location.nativeElement;\n  }\n  /**\n   * Gets the root component container html element.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainerNode(component) {\n    return this.getComponentRootNode(component);\n  }\n  /**\n   * Projects the bindings onto the component\n   *\n   * @param component\n   * @param options\n   *\n   * @memberOf InjectionService\n   */\n  projectComponentBindings(component, bindings) {\n    if (bindings) {\n      if (bindings.inputs !== undefined) {\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n        for (const bindingName of bindingKeys) {\n          component.instance[bindingName] = bindings.inputs[bindingName];\n        }\n      }\n      if (bindings.outputs !== undefined) {\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n        for (const eventName of eventKeys) {\n          component.instance[eventName] = bindings.outputs[eventName];\n        }\n      }\n    }\n    return component;\n  }\n  /**\n   * Appends a component to a adjacent location\n   *\n   * @param componentClass\n   * @param [options={}]\n   * @param [location]\n   *\n   * @memberOf InjectionService\n   */\n  appendComponent(componentClass, bindings = {}, location) {\n    if (!location) location = this.getRootViewContainer();\n    const appendLocation = this.getComponentRootNode(location);\n    const portalHost = new DomPortalOutlet(appendLocation, this.componentFactoryResolver, this.applicationRef, this.injector);\n    const portal = new ComponentPortal(componentClass);\n    const componentRef = portalHost.attach(portal);\n    this.projectComponentBindings(componentRef, bindings);\n    return componentRef;\n  }\n}\nInjectionService.globalRootViewContainer = null;\nInjectionService.ɵfac = function InjectionService_Factory(t) {\n  return new (t || InjectionService)(i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.Injector));\n};\nInjectionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InjectionService,\n  factory: InjectionService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InjectionService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.ApplicationRef\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\nclass TooltipService extends InjectionRegisteryService {\n  constructor(injectionService) {\n    super(injectionService);\n    this.type = TooltipContentComponent;\n  }\n}\nTooltipService.ɵfac = function TooltipService_Factory(t) {\n  return new (t || TooltipService)(i0.ɵɵinject(InjectionService));\n};\nTooltipService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TooltipService,\n  factory: TooltipService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: InjectionService\n    }];\n  }, null);\n})();\nvar LegendPosition;\n(function (LegendPosition) {\n  LegendPosition[\"Right\"] = \"right\";\n  LegendPosition[\"Below\"] = \"below\";\n})(LegendPosition || (LegendPosition = {}));\nvar LegendType;\n(function (LegendType) {\n  LegendType[\"ScaleLegend\"] = \"scaleLegend\";\n  LegendType[\"Legend\"] = \"legend\";\n})(LegendType || (LegendType = {}));\nvar ScaleType;\n(function (ScaleType) {\n  ScaleType[\"Time\"] = \"time\";\n  ScaleType[\"Linear\"] = \"linear\";\n  ScaleType[\"Ordinal\"] = \"ordinal\";\n  ScaleType[\"Quantile\"] = \"quantile\";\n})(ScaleType || (ScaleType = {}));\nclass ScaleLegendComponent {\n  constructor() {\n    this.horizontal = false;\n  }\n  ngOnChanges(changes) {\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n    const direction = this.horizontal ? 'right' : 'bottom';\n    this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;\n  }\n  /**\n   * Generates the string used in the gradient stylesheet properties\n   * @param colors array of colors\n   * @param splits array of splits on a scale of (0, 1)\n   */\n  gradientString(colors, splits) {\n    // add the 100%\n    splits.push(1);\n    const pairs = [];\n    colors.reverse().forEach((c, i) => {\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n    });\n    return pairs.join(', ');\n  }\n}\nScaleLegendComponent.ɵfac = function ScaleLegendComponent_Factory(t) {\n  return new (t || ScaleLegendComponent)();\n};\nScaleLegendComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ScaleLegendComponent,\n  selectors: [[\"ngx-charts-scale-legend\"]],\n  inputs: {\n    valueRange: \"valueRange\",\n    colors: \"colors\",\n    height: \"height\",\n    width: \"width\",\n    horizontal: \"horizontal\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 8,\n  vars: 10,\n  consts: [[1, \"scale-legend\"], [1, \"scale-legend-label\"], [1, \"scale-legend-wrap\"]],\n  template: function ScaleLegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"span\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(4, \"div\", 2);\n      i0.ɵɵelementStart(5, \"div\", 1)(6, \"span\");\n      i0.ɵɵtext(7);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"height\", ctx.horizontal ? undefined : ctx.height, \"px\")(\"width\", ctx.width, \"px\");\n      i0.ɵɵclassProp(\"horizontal-legend\", ctx.horizontal);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.valueRange[1].toLocaleString());\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"background\", ctx.gradient);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.valueRange[0].toLocaleString());\n    }\n  },\n  styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScaleLegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-scale-legend',\n      template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"]\n    }]\n  }], null, {\n    valueRange: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    horizontal: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\nfunction formatLabel(label) {\n  if (label instanceof Date) {\n    label = label.toLocaleDateString();\n  } else {\n    label = label.toLocaleString();\n  }\n  return label;\n}\n/**\n * Escapes a label.\n *\n * @export\n */\nfunction escapeLabel(label) {\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n    return {\n      '&': '&amp;',\n      // tslint:disable-next-line: quotemark\n      \"'\": '&#x27;',\n      '`': '&#x60;',\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    }[match];\n  });\n}\nclass LegendEntryComponent {\n  constructor() {\n    this.isActive = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.toggle = new EventEmitter();\n  }\n  get trimmedLabel() {\n    return this.formattedLabel || '(empty)';\n  }\n  onMouseEnter() {\n    this.activate.emit({\n      name: this.label\n    });\n  }\n  onMouseLeave() {\n    this.deactivate.emit({\n      name: this.label\n    });\n  }\n}\nLegendEntryComponent.ɵfac = function LegendEntryComponent_Factory(t) {\n  return new (t || LegendEntryComponent)();\n};\nLegendEntryComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LegendEntryComponent,\n  selectors: [[\"ngx-charts-legend-entry\"]],\n  hostBindings: function LegendEntryComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function LegendEntryComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function LegendEntryComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    color: \"color\",\n    label: \"label\",\n    formattedLabel: \"formattedLabel\",\n    isActive: \"isActive\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    toggle: \"toggle\"\n  },\n  decls: 4,\n  vars: 6,\n  consts: [[\"tabindex\", \"-1\", 3, \"title\", \"click\"], [1, \"legend-label-color\", 3, \"click\"], [1, \"legend-label-text\"]],\n  template: function LegendEntryComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"span\", 0);\n      i0.ɵɵlistener(\"click\", function LegendEntryComponent_Template_span_click_0_listener() {\n        return ctx.select.emit(ctx.formattedLabel);\n      });\n      i0.ɵɵelementStart(1, \"span\", 1);\n      i0.ɵɵlistener(\"click\", function LegendEntryComponent_Template_span_click_1_listener() {\n        return ctx.toggle.emit(ctx.formattedLabel);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"span\", 2);\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"active\", ctx.isActive);\n      i0.ɵɵproperty(\"title\", ctx.formattedLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"background-color\", ctx.color);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.trimmedLabel, \" \");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LegendEntryComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-legend-entry',\n      template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    color: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    formattedLabel: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    toggle: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\nclass LegendComponent {\n  constructor(cd) {\n    this.cd = cd;\n    this.horizontal = false;\n    this.labelClick = new EventEmitter();\n    this.labelActivate = new EventEmitter();\n    this.labelDeactivate = new EventEmitter();\n    this.legendEntries = [];\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    this.cd.markForCheck();\n    this.legendEntries = this.getLegendEntries();\n  }\n  getLegendEntries() {\n    const items = [];\n    for (const label of this.data) {\n      const formattedLabel = formatLabel(label);\n      const idx = items.findIndex(i => {\n        return i.label === formattedLabel;\n      });\n      if (idx === -1) {\n        items.push({\n          label,\n          formattedLabel,\n          color: this.colors.getColor(label)\n        });\n      }\n    }\n    return items;\n  }\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.label === d.name;\n    });\n    return item !== undefined;\n  }\n  activate(item) {\n    this.labelActivate.emit(item);\n  }\n  deactivate(item) {\n    this.labelDeactivate.emit(item);\n  }\n  trackBy(index, item) {\n    return item.label;\n  }\n}\nLegendComponent.ɵfac = function LegendComponent_Factory(t) {\n  return new (t || LegendComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\nLegendComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LegendComponent,\n  selectors: [[\"ngx-charts-legend\"]],\n  inputs: {\n    data: \"data\",\n    title: \"title\",\n    colors: \"colors\",\n    height: \"height\",\n    width: \"width\",\n    activeEntries: \"activeEntries\",\n    horizontal: \"horizontal\"\n  },\n  outputs: {\n    labelClick: \"labelClick\",\n    labelActivate: \"labelActivate\",\n    labelDeactivate: \"labelDeactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 5,\n  vars: 9,\n  consts: [[\"class\", \"legend-title\", 4, \"ngIf\"], [1, \"legend-wrap\"], [1, \"legend-labels\"], [\"class\", \"legend-label\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"legend-title\"], [1, \"legend-title-text\"], [1, \"legend-label\"], [3, \"label\", \"formattedLabel\", \"color\", \"isActive\", \"select\", \"activate\", \"deactivate\"]],\n  template: function LegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵtemplate(1, LegendComponent_header_1_Template, 3, 1, \"header\", 0);\n      i0.ɵɵelementStart(2, \"div\", 1)(3, \"ul\", 2);\n      i0.ɵɵtemplate(4, LegendComponent_li_4_Template, 2, 4, \"li\", 3);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.title == null ? null : ctx.title.length) > 0);\n      i0.ɵɵadvance(2);\n      i0.ɵɵstyleProp(\"max-height\", ctx.height - 45, \"px\");\n      i0.ɵɵclassProp(\"horizontal-legend\", ctx.horizontal);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.legendEntries)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [LegendEntryComponent, i2.NgIf, i2.NgForOf],\n  styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-legend',\n      template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    horizontal: [{\n      type: Input\n    }],\n    labelClick: [{\n      type: Output\n    }],\n    labelActivate: [{\n      type: Output\n    }],\n    labelDeactivate: [{\n      type: Output\n    }]\n  });\n})();\nclass ChartComponent {\n  constructor() {\n    this.showLegend = false;\n    this.animations = true;\n    this.legendLabelClick = new EventEmitter();\n    this.legendLabelActivate = new EventEmitter();\n    this.legendLabelDeactivate = new EventEmitter();\n    this.LegendPosition = LegendPosition;\n    this.LegendType = LegendType;\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    let legendColumns = 0;\n    if (this.showLegend) {\n      this.legendType = this.getLegendType();\n      if (!this.legendOptions || this.legendOptions.position === LegendPosition.Right) {\n        if (this.legendType === LegendType.ScaleLegend) {\n          legendColumns = 1;\n        } else {\n          legendColumns = 2;\n        }\n      }\n    }\n    const chartColumns = 12 - legendColumns;\n    this.chartWidth = Math.floor(this.view[0] * chartColumns / 12.0);\n    this.legendWidth = !this.legendOptions || this.legendOptions.position === LegendPosition.Right ? Math.floor(this.view[0] * legendColumns / 12.0) : this.chartWidth;\n  }\n  getLegendType() {\n    return this.legendOptions.scaleType === ScaleType.Linear ? LegendType.ScaleLegend : LegendType.Legend;\n  }\n}\nChartComponent.ɵfac = function ChartComponent_Factory(t) {\n  return new (t || ChartComponent)();\n};\nChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ChartComponent,\n  selectors: [[\"ngx-charts-chart\"]],\n  inputs: {\n    view: \"view\",\n    showLegend: \"showLegend\",\n    legendOptions: \"legendOptions\",\n    legendType: \"legendType\",\n    activeEntries: \"activeEntries\",\n    animations: \"animations\"\n  },\n  outputs: {\n    legendLabelClick: \"legendLabelClick\",\n    legendLabelActivate: \"legendLabelActivate\",\n    legendLabelDeactivate: \"legendLabelDeactivate\"\n  },\n  features: [i0.ɵɵProvidersFeature([TooltipService]), i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c2,\n  decls: 5,\n  vars: 8,\n  consts: [[1, \"ngx-charts-outer\"], [1, \"ngx-charts\"], [\"class\", \"chart-legend\", 3, \"horizontal\", \"valueRange\", \"colors\", \"height\", \"width\", 4, \"ngIf\"], [\"class\", \"chart-legend\", 3, \"horizontal\", \"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"labelClick\", \"labelActivate\", \"labelDeactivate\", 4, \"ngIf\"], [1, \"chart-legend\", 3, \"horizontal\", \"valueRange\", \"colors\", \"height\", \"width\"], [1, \"chart-legend\", 3, \"horizontal\", \"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"labelClick\", \"labelActivate\", \"labelDeactivate\"]],\n  template: function ChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"svg\", 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, ChartComponent_ngx_charts_scale_legend_3_Template, 1, 5, \"ngx-charts-scale-legend\", 2);\n      i0.ɵɵtemplate(4, ChartComponent_ngx_charts_legend_4_Template, 1, 7, \"ngx-charts-legend\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.view[0], \"px\")(\"height\", ctx.view[1], \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.chartWidth)(\"height\", ctx.view[1]);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLegend && ctx.legendType === ctx.LegendType.ScaleLegend);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLegend && ctx.legendType === ctx.LegendType.Legend);\n    }\n  },\n  dependencies: [ScaleLegendComponent, LegendComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartComponent, [{\n    type: Component,\n    args: [{\n      providers: [TooltipService],\n      selector: 'ngx-charts-chart',\n      template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [style.height.px]=\"view[1]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    view: [{\n      type: Input\n    }],\n    showLegend: [{\n      type: Input\n    }],\n    legendOptions: [{\n      type: Input\n    }],\n    legendType: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    legendLabelClick: [{\n      type: Output\n    }],\n    legendLabelActivate: [{\n      type: Output\n    }],\n    legendLabelDeactivate: [{\n      type: Output\n    }]\n  });\n})();\n\n/**\n * Visibility Observer\n */\nclass VisibilityObserver {\n  constructor(element, zone) {\n    this.element = element;\n    this.zone = zone;\n    this.visible = new EventEmitter();\n    this.isVisible = false;\n    this.runCheck();\n  }\n  destroy() {\n    clearTimeout(this.timeout);\n  }\n  onVisibilityChange() {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n  runCheck() {\n    const check = () => {\n      if (!this.element) {\n        return;\n      }\n      // https://davidwalsh.name/offsetheight-visibility\n      const {\n        offsetHeight,\n        offsetWidth\n      } = this.element.nativeElement;\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 100);\n        });\n      }\n    };\n    this.zone.runOutsideAngular(() => {\n      this.timeout = setTimeout(() => check());\n    });\n  }\n}\nVisibilityObserver.ɵfac = function VisibilityObserver_Factory(t) {\n  return new (t || VisibilityObserver)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\nVisibilityObserver.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: VisibilityObserver,\n  selectors: [[\"visibility-observer\"]],\n  outputs: {\n    visible: \"visible\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(VisibilityObserver, [{\n    type: Directive,\n    args: [{\n      selector: 'visibility-observer'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    visible: [{\n      type: Output\n    }]\n  });\n})();\nfunction isDate(value) {\n  return toString.call(value) === '[object Date]';\n}\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\nclass BaseChartComponent {\n  constructor(chartElement, zone, cd, platformId) {\n    this.chartElement = chartElement;\n    this.zone = zone;\n    this.cd = cd;\n    this.platformId = platformId;\n    this.scheme = 'cool';\n    this.schemeType = ScaleType.Ordinal;\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.animations = false;\n    }\n  }\n  ngAfterViewInit() {\n    this.bindWindowResizeEvent();\n    // listen for visibility of the element for hidden by default scenario\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\n  }\n  ngOnDestroy() {\n    this.unbindEvents();\n    if (this.visibilityObserver) {\n      this.visibilityObserver.visible.unsubscribe();\n      this.visibilityObserver.destroy();\n    }\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    if (this.results) {\n      this.results = this.cloneData(this.results);\n    } else {\n      this.results = [];\n    }\n    if (this.view) {\n      this.width = this.view[0];\n      this.height = this.view[1];\n    } else {\n      const dims = this.getContainerDims();\n      if (dims) {\n        this.width = dims.width;\n        this.height = dims.height;\n      }\n    }\n    // default values if width or height are 0 or undefined\n    if (!this.width) {\n      this.width = 600;\n    }\n    if (!this.height) {\n      this.height = 400;\n    }\n    this.width = Math.floor(this.width);\n    this.height = Math.floor(this.height);\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n  getContainerDims() {\n    let width;\n    let height;\n    const hostElem = this.chartElement.nativeElement;\n    if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {\n      // Get the container dimensions\n      const dims = hostElem.parentNode.getBoundingClientRect();\n      width = dims.width;\n      height = dims.height;\n    }\n    if (width && height) {\n      return {\n        width,\n        height\n      };\n    }\n    return null;\n  }\n  /**\n   * Converts all date objects that appear as name\n   * into formatted date strings\n   */\n  formatDates() {\n    for (let i = 0; i < this.results.length; i++) {\n      const g = this.results[i];\n      g.label = g.name;\n      if (isDate(g.label)) {\n        g.label = g.label.toLocaleDateString();\n      }\n      if (g.series) {\n        for (let j = 0; j < g.series.length; j++) {\n          const d = g.series[j];\n          d.label = d.name;\n          if (isDate(d.label)) {\n            d.label = d.label.toLocaleDateString();\n          }\n        }\n      }\n    }\n  }\n  unbindEvents() {\n    if (this.resizeSubscription) {\n      this.resizeSubscription.unsubscribe();\n    }\n  }\n  bindWindowResizeEvent() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n    const source = fromEvent(window, 'resize');\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n      this.update();\n      if (this.cd) {\n        this.cd.markForCheck();\n      }\n    });\n    this.resizeSubscription = subscription;\n  }\n  /**\n   * Clones the data into a new object\n   *\n   * @memberOf BaseChart\n   */\n  cloneData(data) {\n    const results = [];\n    for (const item of data) {\n      const copy = {\n        name: item['name']\n      };\n      if (item['value'] !== undefined) {\n        copy['value'] = item['value'];\n      }\n      if (item['series'] !== undefined) {\n        copy['series'] = [];\n        for (const seriesItem of item['series']) {\n          const seriesItemCopy = Object.assign({}, seriesItem);\n          copy['series'].push(seriesItemCopy);\n        }\n      }\n      if (item['extra'] !== undefined) {\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n      }\n      results.push(copy);\n    }\n    return results;\n  }\n}\nBaseChartComponent.ɵfac = function BaseChartComponent_Factory(t) {\n  return new (t || BaseChartComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nBaseChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BaseChartComponent,\n  selectors: [[\"base-chart\"]],\n  inputs: {\n    results: \"results\",\n    view: \"view\",\n    scheme: \"scheme\",\n    schemeType: \"schemeType\",\n    customColors: \"customColors\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 0,\n  template: function BaseChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\");\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'base-chart',\n      template: ` <div></div> `\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    results: [{\n      type: Input\n    }],\n    view: [{\n      type: Input\n    }],\n    scheme: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    customColors: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\nvar Orientation;\n(function (Orientation) {\n  Orientation[\"Top\"] = \"top\";\n  Orientation[\"Bottom\"] = \"bottom\";\n  Orientation[\"Left\"] = \"left\";\n  Orientation[\"Right\"] = \"right\";\n})(Orientation || (Orientation = {}));\nclass AxisLabelComponent {\n  constructor(element) {\n    this.textHeight = 25;\n    this.margin = 5;\n    this.element = element.nativeElement;\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    this.strokeWidth = '0.01';\n    this.textAnchor = 'middle';\n    this.transform = '';\n    switch (this.orient) {\n      case Orientation.Top:\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case Orientation.Bottom:\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case Orientation.Left:\n        this.y = -(this.offset + this.textHeight + this.margin);\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      case Orientation.Right:\n        this.y = this.offset + this.margin;\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      default:\n    }\n  }\n}\nAxisLabelComponent.ɵfac = function AxisLabelComponent_Factory(t) {\n  return new (t || AxisLabelComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nAxisLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AxisLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-axis-label\", \"\"]],\n  inputs: {\n    orient: \"orient\",\n    label: \"label\",\n    offset: \"offset\",\n    width: \"width\",\n    height: \"height\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c3,\n  decls: 2,\n  vars: 6,\n  template: function AxisLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"text\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"stroke-width\", ctx.strokeWidth)(\"x\", ctx.x)(\"y\", ctx.y)(\"text-anchor\", ctx.textAnchor)(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.label, \" \");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AxisLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-axis-label]',\n      template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    orient: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }]\n  });\n})();\nfunction trimLabel(s, max = 16) {\n  if (typeof s !== 'string') {\n    if (typeof s === 'number') {\n      return s + '';\n    } else {\n      return '';\n    }\n  }\n  s = s.trim();\n  if (s.length <= max) {\n    return s;\n  } else {\n    return `${s.slice(0, max)}...`;\n  }\n}\nfunction reduceTicks(ticks, maxTicks) {\n  if (ticks.length > maxTicks) {\n    const reduced = [];\n    const modulus = Math.floor(ticks.length / maxTicks);\n    for (let i = 0; i < ticks.length; i++) {\n      if (i % modulus === 0) {\n        reduced.push(ticks[i]);\n      }\n    }\n    ticks = reduced;\n  }\n  return ticks;\n}\nfunction getTickLines(label, maxLength, maxLines) {\n  let totalLines = (label || '').toString().split(/\\s+/).reduce((lines, line) => {\n    const last = (lines.pop() || '') + ' ';\n    return last.length + line.length > maxLength ? [...lines, last.trim(), line.trim()] : [...lines, last + line];\n  }, []);\n  if (totalLines.length > maxLines) {\n    totalLines = totalLines.splice(0, maxLines);\n    totalLines[totalLines.length - 1] += '...';\n  }\n  return totalLines;\n}\nvar TextAnchor;\n(function (TextAnchor) {\n  TextAnchor[\"Start\"] = \"start\";\n  TextAnchor[\"Middle\"] = \"middle\";\n  TextAnchor[\"End\"] = \"end\";\n})(TextAnchor || (TextAnchor = {}));\nclass XAxisTicksComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.tickArguments = [5];\n    this.tickStroke = '#ccc';\n    this.trimTicks = true;\n    this.maxTickLength = 16;\n    this.showGridLines = false;\n    this.rotateTicks = true;\n    this.wrapTicks = false;\n    this.dimensionsChanged = new EventEmitter();\n    this.verticalSpacing = 20;\n    this.rotateLabels = false;\n    this.innerTickSize = 6;\n    this.outerTickSize = 6;\n    this.tickPadding = 3;\n    this.textAnchor = TextAnchor.Middle;\n    this.maxTicksLength = 0;\n    this.maxAllowedLength = 16;\n    this.height = 0;\n    this.approxHeight = 10;\n    this.maxPossibleLengthForTick = 16;\n  }\n  get isWrapTicksSupported() {\n    return this.wrapTicks && this.scale.step;\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  ngAfterViewInit() {\n    setTimeout(() => this.updateDims());\n  }\n  updateDims() {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.dimensionsChanged.emit({\n        height: this.approxHeight\n      });\n      return;\n    }\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n    if (height !== this.height) {\n      this.height = height;\n      this.dimensionsChanged.emit({\n        height: this.height\n      });\n      setTimeout(() => this.updateDims());\n    }\n  }\n  update() {\n    const scale = this.scale;\n    this.ticks = this.getTicks();\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      // eslint-disable-next-line prefer-spread\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n    this.adjustedScale = this.scale.bandwidth ? function (d) {\n      return this.scale(d) + this.scale.bandwidth() * 0.5;\n    } : this.scale;\n    this.textTransform = '';\n    if (angle && angle !== 0) {\n      this.textTransform = `rotate(${angle})`;\n      this.textAnchor = TextAnchor.End;\n      this.verticalSpacing = 10;\n    } else {\n      this.textAnchor = TextAnchor.Middle;\n    }\n    if (this.isWrapTicksSupported) {\n      // for SSR, if there is no angle, calculate height based on number of tick lines\n      if (!isPlatformBrowser(this.platformId) && (angle === 0 || angle === null)) {\n        const longestTick = this.ticks.reduce((savedText, text) => text.length > savedText.length ? text : savedText, '');\n        const tickLines = this.tickChunks(longestTick);\n        this.approxHeight = 10 * (tickLines.length || 1);\n      }\n      this.maxPossibleLengthForTick = this.getMaxPossibleLengthForTick(this.ticks);\n    }\n    setTimeout(() => this.updateDims());\n  }\n  getRotationAngle(ticks) {\n    let angle = 0;\n    this.maxTicksLength = 0;\n    for (let i = 0; i < ticks.length; i++) {\n      const tick = this.tickFormat(ticks[i]).toString();\n      let tickLength = tick.length;\n      if (this.trimTicks) {\n        tickLength = this.tickTrim(tick).length;\n      }\n      if (tickLength > this.maxTicksLength) {\n        this.maxTicksLength = tickLength;\n      }\n    }\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n    const charWidth = 7; // need to measure this\n    const wordWidth = len * charWidth;\n    let baseWidth = wordWidth;\n    const maxBaseWidth = Math.floor(this.width / ticks.length);\n    // calculate optimal angle\n    while (baseWidth > maxBaseWidth && angle > -90) {\n      angle -= 30;\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n    }\n    this.approxHeight = Math.max(Math.abs(Math.sin(angle * (Math.PI / 180)) * wordWidth), 10);\n    return angle;\n  }\n  getTicks() {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(100);\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n    return ticks;\n  }\n  getMaxTicks(tickWidth) {\n    return Math.floor(this.width / tickWidth);\n  }\n  tickTransform(tick) {\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n  }\n  gridLineTransform() {\n    return `translate(0,${-this.verticalSpacing - 5})`;\n  }\n  tickTrim(label) {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n  getMaxPossibleLengthForTick(ticks) {\n    if (this.scale.bandwidth) {\n      const averageCharacterWidth = 7; // approximate char width\n      const maxCharacters = Math.floor(this.scale.bandwidth() / averageCharacterWidth);\n      const label = ticks.reduce((savedText, text) => text.length > savedText.length ? text : savedText, '');\n      const truncatedText = label.slice(0, maxCharacters);\n      return Math.max(truncatedText.length, this.maxTickLength);\n    }\n    return this.maxTickLength;\n  }\n  tickChunks(label) {\n    if (label.toString().length > this.maxTickLength && this.scale.bandwidth) {\n      const maxAllowedLines = 5;\n      let maxLines = this.rotateTicks ? Math.floor(this.scale.step() / 14) : maxAllowedLines;\n      if (maxLines <= 1) {\n        return [this.tickTrim(label)];\n      }\n      const possibleStringLength = Math.max(this.maxPossibleLengthForTick, this.maxTickLength);\n      maxLines = Math.min(maxLines, maxAllowedLines);\n      const lines = getTickLines(label, possibleStringLength, maxLines < 1 ? 1 : maxLines);\n      return lines;\n    }\n    return [this.tickTrim(label)];\n  }\n}\nXAxisTicksComponent.ɵfac = function XAxisTicksComponent_Factory(t) {\n  return new (t || XAxisTicksComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nXAxisTicksComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XAxisTicksComponent,\n  selectors: [[\"g\", \"ngx-charts-x-axis-ticks\", \"\"]],\n  viewQuery: function XAxisTicksComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c4, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);\n    }\n  },\n  inputs: {\n    scale: \"scale\",\n    orient: \"orient\",\n    tickArguments: \"tickArguments\",\n    tickValues: \"tickValues\",\n    tickStroke: \"tickStroke\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    showGridLines: \"showGridLines\",\n    gridLineHeight: \"gridLineHeight\",\n    width: \"width\",\n    rotateTicks: \"rotateTicks\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c5,\n  decls: 4,\n  vars: 2,\n  consts: [[\"ticksel\", \"\"], [\"class\", \"tick\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"tick\"], [4, \"ngIf\"], [\"stroke-width\", \"0.01\", \"font-size\", \"12px\"], [4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"], [\"tmplMultilineTick\", \"\"], [\"tmplSinglelineTick\", \"\"], [\"x\", \"0\", 4, \"ngFor\", \"ngForOf\"], [\"x\", \"0\"], [\"y2\", \"0\", 1, \"gridline-path\", \"gridline-path-vertical\"]],\n  template: function XAxisTicksComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", null, 0);\n      i0.ɵɵtemplate(2, XAxisTicksComponent__svg_g_2_Template, 2, 2, \"g\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, XAxisTicksComponent__svg_g_3_Template, 2, 2, \"g\", 2);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XAxisTicksComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-x-axis-ticks]',\n      template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            font-size=\"12px\"\n            [attr.text-anchor]=\"textAnchor\"\n            [attr.transform]=\"textTransform\"\n          >\n            <ng-container *ngIf=\"isWrapTicksSupported; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * 12\">\n                {{ tickLine }}\n              </svg:tspan>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    scale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }],\n    tickArguments: [{\n      type: Input\n    }],\n    tickValues: [{\n      type: Input\n    }],\n    tickStroke: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    gridLineHeight: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    rotateTicks: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksElement: [{\n      type: ViewChild,\n      args: ['ticksel']\n    }]\n  });\n})();\nclass XAxisComponent {\n  constructor() {\n    this.rotateTicks = true;\n    this.showGridLines = false;\n    this.xOrient = Orientation.Bottom;\n    this.xAxisOffset = 0;\n    this.wrapTicks = false;\n    this.dimensionsChanged = new EventEmitter();\n    this.xAxisClassName = 'x axis';\n    this.labelOffset = 0;\n    this.fill = 'none';\n    this.stroke = 'stroke';\n    this.tickStroke = '#ccc';\n    this.strokeWidth = 'none';\n    this.padding = 5;\n    this.orientation = Orientation;\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n    if (typeof this.xAxisTickCount !== 'undefined') {\n      this.tickArguments = [this.xAxisTickCount];\n    }\n  }\n  emitTicksHeight({\n    height\n  }) {\n    const newLabelOffset = height + 25 + 5;\n    if (newLabelOffset !== this.labelOffset) {\n      this.labelOffset = newLabelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({\n          height\n        });\n      }, 0);\n    }\n  }\n}\nXAxisComponent.ɵfac = function XAxisComponent_Factory(t) {\n  return new (t || XAxisComponent)();\n};\nXAxisComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-x-axis\", \"\"]],\n  viewQuery: function XAxisComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(XAxisTicksComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksComponent = _t.first);\n    }\n  },\n  inputs: {\n    xScale: \"xScale\",\n    dims: \"dims\",\n    trimTicks: \"trimTicks\",\n    rotateTicks: \"rotateTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    showGridLines: \"showGridLines\",\n    showLabel: \"showLabel\",\n    labelText: \"labelText\",\n    ticks: \"ticks\",\n    xAxisTickCount: \"xAxisTickCount\",\n    xOrient: \"xOrient\",\n    xAxisOffset: \"xAxisOffset\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c6,\n  decls: 3,\n  vars: 4,\n  consts: [[\"ngx-charts-x-axis-ticks\", \"\", 3, \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineHeight\", \"width\", \"tickValues\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"ngx-charts-x-axis-ticks\", \"\", 3, \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineHeight\", \"width\", \"tickValues\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"]],\n  template: function XAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, XAxisComponent__svg_g_1_Template, 1, 13, \"g\", 0);\n      i0.ɵɵtemplate(2, XAxisComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"class\", ctx.xAxisClassName)(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xScale);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLabel);\n    }\n  },\n  dependencies: [XAxisTicksComponent, AxisLabelComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-x-axis]',\n      template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    xScale: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    rotateTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    showLabel: [{\n      type: Input\n    }],\n    labelText: [{\n      type: Input\n    }],\n    ticks: [{\n      type: Input\n    }],\n    xAxisTickCount: [{\n      type: Input\n    }],\n    xOrient: [{\n      type: Input\n    }],\n    xAxisOffset: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksComponent: [{\n      type: ViewChild,\n      args: [XAxisTicksComponent]\n    }]\n  });\n})();\n\n/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\nfunction roundedRect(x, y, w, h, r, [tl, tr, bl, br]) {\n  let retval = '';\n  w = Math.floor(w);\n  h = Math.floor(h);\n  w = w === 0 ? 1 : w;\n  h = h === 0 ? 1 : h;\n  retval = `M${[x + r, y]}`;\n  retval += `h${w - 2 * r}`;\n  if (tr) {\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n  } else {\n    retval += `h${r}v${r}`;\n  }\n  retval += `v${h - 2 * r}`;\n  if (br) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n  } else {\n    retval += `v${r}h${-r}`;\n  }\n  retval += `h${2 * r - w}`;\n  if (bl) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n  } else {\n    retval += `h${-r}v${-r}`;\n  }\n  retval += `v${2 * r - h}`;\n  if (tl) {\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n  } else {\n    retval += `v${-r}h${r}`;\n  }\n  retval += `z`;\n  return retval;\n}\nclass YAxisTicksComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.tickArguments = [5];\n    this.tickStroke = '#ccc';\n    this.trimTicks = true;\n    this.maxTickLength = 16;\n    this.showGridLines = false;\n    this.showRefLabels = false;\n    this.showRefLines = false;\n    this.wrapTicks = false;\n    this.dimensionsChanged = new EventEmitter();\n    this.innerTickSize = 6;\n    this.tickPadding = 3;\n    this.verticalSpacing = 20;\n    this.textAnchor = TextAnchor.Middle;\n    this.width = 0;\n    this.outerTickSize = 6;\n    this.rotateLabels = false;\n    this.referenceLineLength = 0;\n    this.Orientation = Orientation;\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  ngAfterViewInit() {\n    setTimeout(() => this.updateDims());\n  }\n  updateDims() {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.width = this.getApproximateAxisWidth();\n      this.dimensionsChanged.emit({\n        width: this.width\n      });\n      return;\n    }\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n    if (width !== this.width) {\n      this.width = width;\n      this.dimensionsChanged.emit({\n        width\n      });\n      setTimeout(() => this.updateDims());\n    }\n  }\n  update() {\n    const scale = this.scale;\n    const sign = this.orient === Orientation.Top || this.orient === Orientation.Right ? -1 : 1;\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n    this.ticks = this.getTicks();\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      // eslint-disable-next-line prefer-spread\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n    this.adjustedScale = scale.bandwidth ? d => {\n      // position the tick to middle considering number of lines of the tick\n      const positionMiddle = scale(d) + scale.bandwidth() * 0.5;\n      if (this.wrapTicks && d.toString().length > this.maxTickLength) {\n        const chunksLength = this.tickChunks(d).length;\n        if (chunksLength === 1) {\n          return positionMiddle;\n        }\n        const bandWidth = scale.bandwidth();\n        const heightOfLines = chunksLength * 8;\n        const availableFreeSpace = bandWidth * 0.5 - heightOfLines * 0.5;\n        return scale(d) + availableFreeSpace;\n      }\n      return positionMiddle;\n    } : scale;\n    if (this.showRefLines && this.referenceLines) {\n      this.setReferencelines();\n    }\n    switch (this.orient) {\n      case Orientation.Top:\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = TextAnchor.Middle;\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case Orientation.Bottom:\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = TextAnchor.Middle;\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case Orientation.Left:\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = TextAnchor.End;\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      case Orientation.Right:\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = TextAnchor.Start;\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      default:\n    }\n    setTimeout(() => this.updateDims());\n  }\n  setReferencelines() {\n    this.refMin = this.adjustedScale(Math.min.apply(null, this.referenceLines.map(item => item.value)));\n    this.refMax = this.adjustedScale(Math.max.apply(null, this.referenceLines.map(item => item.value)));\n    this.referenceLineLength = this.referenceLines.length;\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [false, false, false, false]);\n  }\n  getTicks() {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(50);\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n    return ticks;\n  }\n  getMaxTicks(tickHeight) {\n    return Math.floor(this.height / tickHeight);\n  }\n  tickTransform(tick) {\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n  }\n  gridLineTransform() {\n    return `translate(5,0)`;\n  }\n  tickTrim(label) {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n  getApproximateAxisWidth() {\n    const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));\n    const charWidth = 7;\n    return maxChars * charWidth;\n  }\n  tickChunks(label) {\n    if (label.toString().length > this.maxTickLength && this.scale.bandwidth) {\n      // for y-axis the width of the tick is fixed\n      const preferredWidth = this.maxTickLength;\n      const maxLines = Math.floor(this.scale.bandwidth() / 15);\n      if (maxLines <= 1) {\n        return [this.tickTrim(label)];\n      }\n      return getTickLines(label, preferredWidth, Math.min(maxLines, 5));\n    }\n    return [this.tickFormat(label)];\n  }\n}\nYAxisTicksComponent.ɵfac = function YAxisTicksComponent_Factory(t) {\n  return new (t || YAxisTicksComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nYAxisTicksComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: YAxisTicksComponent,\n  selectors: [[\"g\", \"ngx-charts-y-axis-ticks\", \"\"]],\n  viewQuery: function YAxisTicksComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c4, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);\n    }\n  },\n  inputs: {\n    scale: \"scale\",\n    orient: \"orient\",\n    tickArguments: \"tickArguments\",\n    tickValues: \"tickValues\",\n    tickStroke: \"tickStroke\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    showGridLines: \"showGridLines\",\n    gridLineWidth: \"gridLineWidth\",\n    height: \"height\",\n    referenceLines: \"referenceLines\",\n    showRefLabels: \"showRefLabels\",\n    showRefLines: \"showRefLines\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c7,\n  decls: 6,\n  vars: 4,\n  consts: [[\"ticksel\", \"\"], [\"class\", \"tick\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"reference-area\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"tick\"], [4, \"ngIf\"], [\"stroke-width\", \"0.01\"], [4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"], [\"tmplMultilineTick\", \"\"], [\"tmplSinglelineTick\", \"\"], [4, \"ngIf\", \"ngIfElse\"], [\"x\", \"0\", 4, \"ngFor\", \"ngForOf\"], [\"x\", \"0\"], [1, \"reference-area\"], [\"class\", \"gridline-path gridline-path-horizontal\", \"x1\", \"0\", 4, \"ngIf\"], [\"x1\", \"0\", 1, \"gridline-path\", \"gridline-path-horizontal\"], [\"x1\", \"0\", 1, \"refline-path\", \"gridline-path-horizontal\"], [1, \"refline-label\"]],\n  template: function YAxisTicksComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", null, 0);\n      i0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_2_Template, 2, 2, \"g\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, YAxisTicksComponent__svg_path_3_Template, 1, 2, \"path\", 2);\n      i0.ɵɵtemplate(4, YAxisTicksComponent__svg_g_4_Template, 2, 2, \"g\", 3);\n      i0.ɵɵtemplate(5, YAxisTicksComponent__svg_g_5_Template, 2, 1, \"g\", 3);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.referenceLineLength > 1 && ctx.refMax && ctx.refMin && ctx.showRefLines);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.referenceLines);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(YAxisTicksComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-y-axis-ticks]',\n      template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            [attr.dy]=\"dy\"\n            [attr.x]=\"x1\"\n            [attr.y]=\"y1\"\n            [attr.text-anchor]=\"textAnchor\"\n            [style.font-size]=\"'12px'\"\n          >\n            <ng-container *ngIf=\"wrapTicks; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <ng-container *ngIf=\"tickLines.length > 1; else tmplSinglelineTick\">\n                <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * (8 + tickSpacing)\">\n                  {{ tickLine }}\n                </svg:tspan>\n              </ng-container>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    scale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }],\n    tickArguments: [{\n      type: Input\n    }],\n    tickValues: [{\n      type: Input\n    }],\n    tickStroke: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    gridLineWidth: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksElement: [{\n      type: ViewChild,\n      args: ['ticksel']\n    }]\n  });\n})();\nclass YAxisComponent {\n  constructor() {\n    this.showGridLines = false;\n    this.yOrient = Orientation.Left;\n    this.yAxisOffset = 0;\n    this.wrapTicks = false;\n    this.dimensionsChanged = new EventEmitter();\n    this.yAxisClassName = 'y axis';\n    this.labelOffset = 15;\n    this.fill = 'none';\n    this.stroke = '#CCC';\n    this.tickStroke = '#CCC';\n    this.strokeWidth = 1;\n    this.padding = 5;\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    this.offset = -(this.yAxisOffset + this.padding);\n    if (this.yOrient === Orientation.Right) {\n      this.labelOffset = 65;\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n    } else {\n      this.transform = `translate(${this.offset} , 0)`;\n    }\n    if (this.yAxisTickCount !== undefined) {\n      this.tickArguments = [this.yAxisTickCount];\n    }\n  }\n  emitTicksWidth({\n    width\n  }) {\n    if (width !== this.labelOffset && this.yOrient === Orientation.Right) {\n      this.labelOffset = width + this.labelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({\n          width\n        });\n      }, 0);\n    } else if (width !== this.labelOffset) {\n      this.labelOffset = width;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({\n          width\n        });\n      }, 0);\n    }\n  }\n}\nYAxisComponent.ɵfac = function YAxisComponent_Factory(t) {\n  return new (t || YAxisComponent)();\n};\nYAxisComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: YAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-y-axis\", \"\"]],\n  viewQuery: function YAxisComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(YAxisTicksComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksComponent = _t.first);\n    }\n  },\n  inputs: {\n    yScale: \"yScale\",\n    dims: \"dims\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    ticks: \"ticks\",\n    showGridLines: \"showGridLines\",\n    showLabel: \"showLabel\",\n    labelText: \"labelText\",\n    yAxisTickCount: \"yAxisTickCount\",\n    yOrient: \"yOrient\",\n    referenceLines: \"referenceLines\",\n    showRefLines: \"showRefLines\",\n    showRefLabels: \"showRefLabels\",\n    yAxisOffset: \"yAxisOffset\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c8,\n  decls: 3,\n  vars: 4,\n  consts: [[\"ngx-charts-y-axis-ticks\", \"\", 3, \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineWidth\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"height\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"ngx-charts-y-axis-ticks\", \"\", 3, \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineWidth\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"height\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"]],\n  template: function YAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, YAxisComponent__svg_g_1_Template, 1, 15, \"g\", 0);\n      i0.ɵɵtemplate(2, YAxisComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"class\", ctx.yAxisClassName)(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yScale);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLabel);\n    }\n  },\n  dependencies: [YAxisTicksComponent, AxisLabelComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(YAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-y-axis]',\n      template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    yScale: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    ticks: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    showLabel: [{\n      type: Input\n    }],\n    labelText: [{\n      type: Input\n    }],\n    yAxisTickCount: [{\n      type: Input\n    }],\n    yOrient: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    yAxisOffset: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksComponent: [{\n      type: ViewChild,\n      args: [YAxisTicksComponent]\n    }]\n  });\n})();\nclass AxesModule {}\nAxesModule.ɵfac = function AxesModule_Factory(t) {\n  return new (t || AxesModule)();\n};\nAxesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AxesModule\n});\nAxesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AxesModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n      exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n    }]\n  }], null, null);\n})();\nvar StyleTypes;\n(function (StyleTypes) {\n  StyleTypes[\"popover\"] = \"popover\";\n  StyleTypes[\"tooltip\"] = \"tooltip\";\n})(StyleTypes || (StyleTypes = {}));\nvar ShowTypes;\n(function (ShowTypes) {\n  ShowTypes[ShowTypes[\"all\"] = 'all'] = \"all\";\n  ShowTypes[ShowTypes[\"focus\"] = 'focus'] = \"focus\";\n  ShowTypes[ShowTypes[\"mouseover\"] = 'mouseover'] = \"mouseover\";\n})(ShowTypes || (ShowTypes = {}));\nclass TooltipDirective {\n  constructor(tooltipService, viewContainerRef, renderer) {\n    this.tooltipService = tooltipService;\n    this.viewContainerRef = viewContainerRef;\n    this.renderer = renderer;\n    this.tooltipCssClass = '';\n    this.tooltipAppendToBody = true;\n    this.tooltipSpacing = 10;\n    this.tooltipDisabled = false;\n    this.tooltipShowCaret = true;\n    this.tooltipPlacement = PlacementTypes.Top;\n    this.tooltipAlignment = PlacementTypes.Center;\n    this.tooltipType = StyleTypes.popover;\n    this.tooltipCloseOnClickOutside = true;\n    this.tooltipCloseOnMouseLeave = true;\n    this.tooltipHideTimeout = 300;\n    this.tooltipShowTimeout = 100;\n    this.tooltipShowEvent = ShowTypes.all;\n    this.tooltipImmediateExit = false;\n    this.show = new EventEmitter();\n    this.hide = new EventEmitter();\n  }\n  get listensForFocus() {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n  }\n  get listensForHover() {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n  }\n  ngOnDestroy() {\n    this.hideTooltip(true);\n  }\n  onFocus() {\n    if (this.listensForFocus) {\n      this.showTooltip();\n    }\n  }\n  onBlur() {\n    if (this.listensForFocus) {\n      this.hideTooltip(true);\n    }\n  }\n  onMouseEnter() {\n    if (this.listensForHover) {\n      this.showTooltip();\n    }\n  }\n  onMouseLeave(target) {\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n      clearTimeout(this.timeout);\n      if (this.component) {\n        const contentDom = this.component.instance.element.nativeElement;\n        const contains = contentDom.contains(target);\n        if (contains) return;\n      }\n      this.hideTooltip(this.tooltipImmediateExit);\n    }\n  }\n  onMouseClick() {\n    if (this.listensForHover) {\n      this.hideTooltip(true);\n    }\n  }\n  showTooltip(immediate) {\n    if (this.component || this.tooltipDisabled) return;\n    const time = immediate ? 0 : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 400 : 0);\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      this.tooltipService.destroyAll();\n      const options = this.createBoundOptions();\n      this.component = this.tooltipService.create(options);\n      // add a tiny timeout to avoid event re-triggers\n      setTimeout(() => {\n        if (this.component) {\n          this.addHideListeners(this.component.instance.element.nativeElement);\n        }\n      }, 10);\n      this.show.emit(true);\n    }, time);\n  }\n  addHideListeners(tooltip) {\n    // on mouse enter, cancel the hide triggered by the leave\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n      clearTimeout(this.timeout);\n    });\n    // content mouse leave listener\n    if (this.tooltipCloseOnMouseLeave) {\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n        this.hideTooltip(this.tooltipImmediateExit);\n      });\n    }\n    // content close on click outside\n    if (this.tooltipCloseOnClickOutside) {\n      this.documentClickEvent = this.renderer.listen('window', 'click', event => {\n        const contains = tooltip.contains(event.target);\n        if (!contains) this.hideTooltip();\n      });\n    }\n  }\n  hideTooltip(immediate = false) {\n    if (!this.component) return;\n    const destroyFn = () => {\n      // remove events\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\n      if (this.documentClickEvent) this.documentClickEvent();\n      // emit events\n      this.hide.emit(true);\n      // destroy component\n      this.tooltipService.destroy(this.component);\n      this.component = undefined;\n    };\n    clearTimeout(this.timeout);\n    if (!immediate) {\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n    } else {\n      destroyFn();\n    }\n  }\n  createBoundOptions() {\n    return {\n      title: this.tooltipTitle,\n      template: this.tooltipTemplate,\n      host: this.viewContainerRef.element,\n      placement: this.tooltipPlacement,\n      alignment: this.tooltipAlignment,\n      type: this.tooltipType,\n      showCaret: this.tooltipShowCaret,\n      cssClass: this.tooltipCssClass,\n      spacing: this.tooltipSpacing,\n      context: this.tooltipContext\n    };\n  }\n}\nTooltipDirective.ɵfac = function TooltipDirective_Factory(t) {\n  return new (t || TooltipDirective)(i0.ɵɵdirectiveInject(TooltipService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\nTooltipDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TooltipDirective,\n  selectors: [[\"\", \"ngx-tooltip\", \"\"]],\n  hostBindings: function TooltipDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focusin\", function TooltipDirective_focusin_HostBindingHandler() {\n        return ctx.onFocus();\n      })(\"blur\", function TooltipDirective_blur_HostBindingHandler() {\n        return ctx.onBlur();\n      })(\"mouseenter\", function TooltipDirective_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function TooltipDirective_mouseleave_HostBindingHandler($event) {\n        return ctx.onMouseLeave($event.target);\n      })(\"click\", function TooltipDirective_click_HostBindingHandler() {\n        return ctx.onMouseClick();\n      });\n    }\n  },\n  inputs: {\n    tooltipCssClass: \"tooltipCssClass\",\n    tooltipTitle: \"tooltipTitle\",\n    tooltipAppendToBody: \"tooltipAppendToBody\",\n    tooltipSpacing: \"tooltipSpacing\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipShowCaret: \"tooltipShowCaret\",\n    tooltipPlacement: \"tooltipPlacement\",\n    tooltipAlignment: \"tooltipAlignment\",\n    tooltipType: \"tooltipType\",\n    tooltipCloseOnClickOutside: \"tooltipCloseOnClickOutside\",\n    tooltipCloseOnMouseLeave: \"tooltipCloseOnMouseLeave\",\n    tooltipHideTimeout: \"tooltipHideTimeout\",\n    tooltipShowTimeout: \"tooltipShowTimeout\",\n    tooltipTemplate: \"tooltipTemplate\",\n    tooltipShowEvent: \"tooltipShowEvent\",\n    tooltipContext: \"tooltipContext\",\n    tooltipImmediateExit: \"tooltipImmediateExit\"\n  },\n  outputs: {\n    show: \"show\",\n    hide: \"hide\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngx-tooltip]'\n    }]\n  }], function () {\n    return [{\n      type: TooltipService\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    tooltipCssClass: [{\n      type: Input\n    }],\n    tooltipTitle: [{\n      type: Input\n    }],\n    tooltipAppendToBody: [{\n      type: Input\n    }],\n    tooltipSpacing: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipShowCaret: [{\n      type: Input\n    }],\n    tooltipPlacement: [{\n      type: Input\n    }],\n    tooltipAlignment: [{\n      type: Input\n    }],\n    tooltipType: [{\n      type: Input\n    }],\n    tooltipCloseOnClickOutside: [{\n      type: Input\n    }],\n    tooltipCloseOnMouseLeave: [{\n      type: Input\n    }],\n    tooltipHideTimeout: [{\n      type: Input\n    }],\n    tooltipShowTimeout: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    tooltipShowEvent: [{\n      type: Input\n    }],\n    tooltipContext: [{\n      type: Input\n    }],\n    tooltipImmediateExit: [{\n      type: Input\n    }],\n    show: [{\n      type: Output\n    }],\n    hide: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: HostListener,\n      args: ['focusin']\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave', ['$event.target']]\n    }],\n    onMouseClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\nclass TooltipModule {}\nTooltipModule.ɵfac = function TooltipModule_Factory(t) {\n  return new (t || TooltipModule)();\n};\nTooltipModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TooltipModule\n});\nTooltipModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [InjectionService, TooltipService],\n  imports: [[CommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TooltipContentComponent, TooltipDirective],\n      providers: [InjectionService, TooltipService],\n      exports: [TooltipContentComponent, TooltipDirective],\n      imports: [CommonModule],\n      entryComponents: [TooltipContentComponent]\n    }]\n  }], null, null);\n})();\nconst cache = {};\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nfunction id() {\n  let newId = ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);\n  // append a 'a' because neo gets mad\n  newId = `a${newId}`;\n  // ensure not already used\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n  return id();\n}\nvar BarOrientation;\n(function (BarOrientation) {\n  BarOrientation[\"Vertical\"] = \"vertical\";\n  BarOrientation[\"Horizontal\"] = \"horizontal\";\n})(BarOrientation || (BarOrientation = {}));\nclass SvgLinearGradientComponent {\n  constructor() {\n    this.orientation = BarOrientation.Vertical;\n  }\n  ngOnChanges(changes) {\n    this.x1 = '0%';\n    this.x2 = '0%';\n    this.y1 = '0%';\n    this.y2 = '0%';\n    if (this.orientation === BarOrientation.Horizontal) {\n      this.x2 = '100%';\n    } else if (this.orientation === BarOrientation.Vertical) {\n      this.y1 = '100%';\n    }\n  }\n}\nSvgLinearGradientComponent.ɵfac = function SvgLinearGradientComponent_Factory(t) {\n  return new (t || SvgLinearGradientComponent)();\n};\nSvgLinearGradientComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SvgLinearGradientComponent,\n  selectors: [[\"g\", \"ngx-charts-svg-linear-gradient\", \"\"]],\n  inputs: {\n    orientation: \"orientation\",\n    name: \"name\",\n    stops: \"stops\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c9,\n  decls: 2,\n  vars: 6,\n  consts: [[3, \"id\"], [3, \"stop-color\", \"stop-opacity\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function SvgLinearGradientComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"linearGradient\", 0);\n      i0.ɵɵtemplate(1, SvgLinearGradientComponent__svg_stop_1_Template, 1, 5, \"stop\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.name);\n      i0.ɵɵattribute(\"x1\", ctx.x1)(\"y1\", ctx.y1)(\"x2\", ctx.x2)(\"y2\", ctx.y2);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.stops);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SvgLinearGradientComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-svg-linear-gradient]',\n      template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    orientation: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }]\n  });\n})();\nclass CircleComponent {\n  constructor() {\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n  onClick() {\n    this.select.emit(this.data);\n  }\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n  ngOnChanges(changes) {\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n    this.classNames += 'circle';\n  }\n}\nCircleComponent.ɵfac = function CircleComponent_Factory(t) {\n  return new (t || CircleComponent)();\n};\nCircleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CircleComponent,\n  selectors: [[\"g\", \"ngx-charts-circle\", \"\"]],\n  hostBindings: function CircleComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function CircleComponent_click_HostBindingHandler() {\n        return ctx.onClick();\n      })(\"mouseenter\", function CircleComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function CircleComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    cx: \"cx\",\n    cy: \"cy\",\n    r: \"r\",\n    fill: \"fill\",\n    stroke: \"stroke\",\n    data: \"data\",\n    classNames: \"classNames\",\n    circleOpacity: \"circleOpacity\",\n    pointerEvents: \"pointerEvents\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c10,\n  decls: 1,\n  vars: 8,\n  template: function CircleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"circle\");\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"cx\", ctx.cx)(\"cy\", ctx.cy)(\"r\", ctx.r)(\"fill\", ctx.fill)(\"stroke\", ctx.stroke)(\"opacity\", ctx.circleOpacity)(\"class\", ctx.classNames)(\"pointer-events\", ctx.pointerEvents);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CircleComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-circle]',\n      template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    cx: [{\n      type: Input\n    }],\n    cy: [{\n      type: Input\n    }],\n    r: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    stroke: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    classNames: [{\n      type: Input\n    }],\n    circleOpacity: [{\n      type: Input\n    }],\n    pointerEvents: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\nvar SeriesType;\n(function (SeriesType) {\n  SeriesType[\"Standard\"] = \"standard\";\n  SeriesType[\"Stacked\"] = \"stacked\";\n})(SeriesType || (SeriesType = {}));\nclass CircleSeriesComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.type = SeriesType.Standard;\n    this.tooltipDisabled = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.barVisible = false;\n    this.barOrientation = BarOrientation;\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n    this.isSSR = false;\n  }\n  ngOnInit() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n  ngOnChanges() {\n    this.update();\n  }\n  update() {\n    this.circle = this.getActiveCircle();\n  }\n  getActiveCircle() {\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\n      const label = d.name;\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n    });\n    if (indexActiveDataPoint === -1) {\n      // No valid point is 'active/hovered over' at this moment.\n      return undefined;\n    }\n    return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n  }\n  mapDataPointToCircle(d, i) {\n    const seriesName = this.data.name;\n    const value = d.value;\n    const label = d.name;\n    const tooltipLabel = formatLabel(label);\n    let cx;\n    if (this.scaleType === ScaleType.Time) {\n      cx = this.xScale(label);\n    } else if (this.scaleType === ScaleType.Linear) {\n      cx = this.xScale(Number(label));\n    } else {\n      cx = this.xScale(label);\n    }\n    const cy = this.yScale(this.type === SeriesType.Standard ? value : d.d1);\n    const radius = 5;\n    const height = this.yScale.range()[0] - cy;\n    const opacity = 1;\n    let color;\n    if (this.colors.scaleType === ScaleType.Linear) {\n      if (this.type === SeriesType.Standard) {\n        color = this.colors.getColor(value);\n      } else {\n        color = this.colors.getColor(d.d1);\n      }\n    } else {\n      color = this.colors.getColor(seriesName);\n    }\n    const data = Object.assign({}, d, {\n      series: seriesName,\n      value,\n      name: label\n    });\n    return {\n      classNames: [`circle-data-${i}`],\n      value,\n      label,\n      data,\n      cx,\n      cy,\n      radius,\n      height,\n      tooltipLabel,\n      color,\n      opacity,\n      seriesName,\n      gradientStops: this.getGradientStops(color),\n      min: d.min,\n      max: d.max\n    };\n  }\n  getTooltipText({\n    tooltipLabel,\n    value,\n    seriesName,\n    min,\n    max\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n  }\n  getTooltipMinMaxText(min, max) {\n    if (min !== undefined || max !== undefined) {\n      let result = ' (';\n      if (min !== undefined) {\n        if (max === undefined) {\n          result += '≥';\n        }\n        result += min.toLocaleString();\n        if (max !== undefined) {\n          result += ' - ';\n        }\n      } else if (max !== undefined) {\n        result += '≤';\n      }\n      if (max !== undefined) {\n        result += max.toLocaleString();\n      }\n      result += ')';\n      return result;\n    } else {\n      return '';\n    }\n  }\n  getGradientStops(color) {\n    return [{\n      offset: 0,\n      color,\n      opacity: 0.2\n    }, {\n      offset: 100,\n      color,\n      opacity: 1\n    }];\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n  activateCircle() {\n    this.barVisible = true;\n    this.activate.emit({\n      name: this.data.name\n    });\n  }\n  deactivateCircle() {\n    this.barVisible = false;\n    this.circle.opacity = 0;\n    this.deactivate.emit({\n      name: this.data.name\n    });\n  }\n}\nCircleSeriesComponent.ɵfac = function CircleSeriesComponent_Factory(t) {\n  return new (t || CircleSeriesComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nCircleSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CircleSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-circle-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    type: \"type\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    visibleValue: \"visibleValue\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c11,\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [\"class\", \"tooltip-bar\", 4, \"ngIf\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"], [1, \"tooltip-bar\"]],\n  template: function CircleSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CircleSeriesComponent__svg_g_0_Template, 6, 22, \"g\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.circle);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, CircleComponent, i2.NgIf, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      opacity: 0\n    }), animate(250, style({\n      opacity: 1\n    }))])])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CircleSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-circle-series]',\n      template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"!isSSR && barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:rect\n        *ngIf=\"isSSR && barVisible && type === 'standard'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0\n      }), animate(250, style({\n        opacity: 1\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    visibleValue: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\nclass GridPanelComponent {}\nGridPanelComponent.ɵfac = function GridPanelComponent_Factory(t) {\n  return new (t || GridPanelComponent)();\n};\nGridPanelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GridPanelComponent,\n  selectors: [[\"g\", \"ngx-charts-grid-panel\", \"\"]],\n  inputs: {\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\"\n  },\n  attrs: _c13,\n  decls: 1,\n  vars: 4,\n  consts: [[\"stroke\", \"none\", 1, \"gridpanel\"]],\n  template: function GridPanelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"rect\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"height\", ctx.height)(\"width\", ctx.width)(\"x\", ctx.x)(\"y\", ctx.y);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridPanelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-grid-panel]',\n      template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }]\n  });\n})();\nvar ClassEnum;\n(function (ClassEnum) {\n  ClassEnum[\"Odd\"] = \"odd\";\n  ClassEnum[\"Even\"] = \"even\";\n})(ClassEnum || (ClassEnum = {}));\nclass GridPanelSeriesComponent {\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    this.gridPanels = this.getGridPanels();\n  }\n  getGridPanels() {\n    return this.data.map(d => {\n      let offset;\n      let width;\n      let height;\n      let x;\n      let y;\n      let className = ClassEnum.Odd;\n      if (this.orient === BarOrientation.Vertical) {\n        const position = this.xScale(d.name);\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n        if (positionIndex % 2 === 1) {\n          className = ClassEnum.Even;\n        }\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n        width = this.xScale.bandwidth() + offset;\n        height = this.dims.height;\n        x = this.xScale(d.name) - offset / 2;\n        y = 0;\n      } else if (this.orient === BarOrientation.Horizontal) {\n        const position = this.yScale(d.name);\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n        if (positionIndex % 2 === 1) {\n          className = ClassEnum.Even;\n        }\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n        width = this.dims.width;\n        height = this.yScale.bandwidth() + offset;\n        x = 0;\n        y = this.yScale(d.name) - offset / 2;\n      }\n      return {\n        name: d.name,\n        class: className,\n        height,\n        width,\n        x,\n        y\n      };\n    });\n  }\n}\nGridPanelSeriesComponent.ɵfac = function GridPanelSeriesComponent_Factory(t) {\n  return new (t || GridPanelSeriesComponent)();\n};\nGridPanelSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GridPanelSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-grid-panel-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    dims: \"dims\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    orient: \"orient\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c14,\n  decls: 1,\n  vars: 1,\n  consts: [[\"ngx-charts-grid-panel\", \"\", 3, \"height\", \"width\", \"x\", \"y\", \"grid-panel\", \"odd\", \"even\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-grid-panel\", \"\", 3, \"height\", \"width\", \"x\", \"y\"]],\n  template: function GridPanelSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, GridPanelSeriesComponent__svg_g_0_Template, 1, 10, \"g\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.gridPanels);\n    }\n  },\n  dependencies: [GridPanelComponent, i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridPanelSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-grid-panel-series]',\n      template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }]\n  });\n})();\nclass SvgRadialGradientComponent {\n  constructor() {\n    this.endOpacity = 1;\n    this.cx = 0;\n    this.cy = 0;\n  }\n  get stops() {\n    return this.stopsInput || this.stopsDefault;\n  }\n  set stops(value) {\n    this.stopsInput = value;\n  }\n  ngOnChanges(changes) {\n    this.r = '30%';\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n      this.stopsDefault = [{\n        offset: 0,\n        color: this.color,\n        opacity: this.startOpacity\n      }, {\n        offset: 100,\n        color: this.color,\n        opacity: this.endOpacity\n      }];\n    }\n  }\n}\nSvgRadialGradientComponent.ɵfac = function SvgRadialGradientComponent_Factory(t) {\n  return new (t || SvgRadialGradientComponent)();\n};\nSvgRadialGradientComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SvgRadialGradientComponent,\n  selectors: [[\"g\", \"ngx-charts-svg-radial-gradient\", \"\"]],\n  inputs: {\n    color: \"color\",\n    name: \"name\",\n    startOpacity: \"startOpacity\",\n    endOpacity: \"endOpacity\",\n    cx: \"cx\",\n    cy: \"cy\",\n    stops: \"stops\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c15,\n  decls: 2,\n  vars: 5,\n  consts: [[\"gradientUnits\", \"userSpaceOnUse\", 3, \"id\"], [3, \"stop-color\", \"stop-opacity\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function SvgRadialGradientComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"radialGradient\", 0);\n      i0.ɵɵtemplate(1, SvgRadialGradientComponent__svg_stop_1_Template, 1, 5, \"stop\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.name);\n      i0.ɵɵattribute(\"cx\", ctx.cx)(\"cy\", ctx.cy)(\"r\", ctx.r);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.stops);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SvgRadialGradientComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-svg-radial-gradient]',\n      template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    color: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    startOpacity: [{\n      type: Input\n    }],\n    endOpacity: [{\n      type: Input\n    }],\n    cx: [{\n      type: Input\n    }],\n    cy: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }]\n  });\n})();\nclass AreaComponent {\n  constructor(element) {\n    this.opacity = 1;\n    this.startOpacity = 0.5;\n    this.endOpacity = 1;\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.animationsLoaded = false;\n    this.hasGradient = false;\n    this.barOrientation = BarOrientation;\n    this.element = element.nativeElement;\n  }\n  ngOnChanges() {\n    this.update();\n    if (!this.animationsLoaded) {\n      this.loadAnimation();\n      this.animationsLoaded = true;\n    }\n  }\n  update() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n    this.updatePathEl();\n  }\n  loadAnimation() {\n    this.areaPath = this.startingPath;\n    setTimeout(this.updatePathEl.bind(this), 100);\n  }\n  updatePathEl() {\n    const node = select(this.element).select('.area');\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.startOpacity\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: this.endOpacity\n    }];\n  }\n}\nAreaComponent.ɵfac = function AreaComponent_Factory(t) {\n  return new (t || AreaComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nAreaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaComponent,\n  selectors: [[\"g\", \"ngx-charts-area\", \"\"]],\n  inputs: {\n    data: \"data\",\n    path: \"path\",\n    startingPath: \"startingPath\",\n    fill: \"fill\",\n    opacity: \"opacity\",\n    startOpacity: \"startOpacity\",\n    endOpacity: \"endOpacity\",\n    gradient: \"gradient\",\n    stops: \"stops\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c16,\n  decls: 2,\n  vars: 5,\n  consts: [[4, \"ngIf\"], [1, \"area\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n  template: function AreaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, AreaComponent__svg_defs_0_Template, 2, 3, \"defs\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(1, \"path\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"opacity\", ctx.opacity);\n      i0.ɵɵattribute(\"d\", ctx.areaPath)(\"fill\", ctx.gradient ? ctx.gradientFill : ctx.fill);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-area]',\n      template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    path: [{\n      type: Input\n    }],\n    startingPath: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    opacity: [{\n      type: Input\n    }],\n    startOpacity: [{\n      type: Input\n    }],\n    endOpacity: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\n// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d) {\n  return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;\n}\n/**\n * Counts from a number to the end incrementally.\n */\nfunction count(countFrom, countTo, countDecimals, countDuration, callback) {\n  const startVal = Number(countFrom);\n  const endVal = Number(countTo);\n  const countDown = startVal > endVal;\n  const decimals = Math.max(0, countDecimals);\n  const dec = Math.pow(10, decimals);\n  const duration = Number(countDuration) * 1000;\n  let startTime;\n  function runCount(timestamp) {\n    let frameVal;\n    const progress = timestamp - startTime;\n    if (countDown) {\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n    } else {\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n    }\n    if (countDown) {\n      frameVal = frameVal < endVal ? endVal : frameVal;\n    } else {\n      frameVal = frameVal > endVal ? endVal : frameVal;\n    }\n    frameVal = Math.round(frameVal * dec) / dec;\n    const tick = progress < duration;\n    callback({\n      value: frameVal,\n      progress,\n      timestamp,\n      finished: !tick\n    });\n    if (tick) {\n      return requestAnimationFrame(val => runCount(val));\n    }\n  }\n  return requestAnimationFrame(timestamp => {\n    startTime = timestamp;\n    return runCount(timestamp);\n  });\n}\n/**\n * Determine decimals places\n *\n * @export\n */\nfunction decimalChecker(countTo) {\n  const endVal = Number(countTo);\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n    return 2;\n  }\n  return 0;\n}\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\nclass CountUpDirective {\n  constructor(cd, element) {\n    this.cd = cd;\n    this.countDuration = 1;\n    this.countPrefix = '';\n    this.countSuffix = '';\n    this.countChange = new EventEmitter();\n    this.countFinish = new EventEmitter();\n    this.value = '';\n    this._countDecimals = 0;\n    this._countTo = 0;\n    this._countFrom = 0;\n    this.nativeElement = element.nativeElement;\n  }\n  set countDecimals(val) {\n    this._countDecimals = val;\n  }\n  get countDecimals() {\n    if (this._countDecimals) return this._countDecimals;\n    return decimalChecker(this.countTo);\n  }\n  set countTo(val) {\n    this._countTo = parseFloat(val);\n    this.start();\n  }\n  get countTo() {\n    return this._countTo;\n  }\n  set countFrom(val) {\n    this._countFrom = parseFloat(val);\n    this.start();\n  }\n  get countFrom() {\n    return this._countFrom;\n  }\n  ngOnDestroy() {\n    cancelAnimationFrame(this.animationReq);\n  }\n  start() {\n    cancelAnimationFrame(this.animationReq);\n    const valueFormatting = this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n    const callback = ({\n      value,\n      progress,\n      finished\n    }) => {\n      this.value = valueFormatting(value);\n      this.cd.markForCheck();\n      if (!finished) this.countChange.emit({\n        value: this.value,\n        progress\n      });\n      if (finished) this.countFinish.emit({\n        value: this.value,\n        progress\n      });\n    };\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n  }\n}\nCountUpDirective.ɵfac = function CountUpDirective_Factory(t) {\n  return new (t || CountUpDirective)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nCountUpDirective.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CountUpDirective,\n  selectors: [[\"\", \"ngx-charts-count-up\", \"\"]],\n  inputs: {\n    countDuration: \"countDuration\",\n    countPrefix: \"countPrefix\",\n    countSuffix: \"countSuffix\",\n    valueFormatting: \"valueFormatting\",\n    countDecimals: \"countDecimals\",\n    countTo: \"countTo\",\n    countFrom: \"countFrom\"\n  },\n  outputs: {\n    countChange: \"countChange\",\n    countFinish: \"countFinish\"\n  },\n  attrs: _c17,\n  decls: 1,\n  vars: 1,\n  template: function CountUpDirective_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0);\n    }\n    if (rf & 2) {\n      i0.ɵɵtextInterpolate1(\" \", ctx.value, \" \");\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CountUpDirective, [{\n    type: Component,\n    args: [{\n      selector: '[ngx-charts-count-up]',\n      template: ` {{ value }} `\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    countDuration: [{\n      type: Input\n    }],\n    countPrefix: [{\n      type: Input\n    }],\n    countSuffix: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    countDecimals: [{\n      type: Input\n    }],\n    countTo: [{\n      type: Input\n    }],\n    countFrom: [{\n      type: Input\n    }],\n    countChange: [{\n      type: Output\n    }],\n    countFinish: [{\n      type: Output\n    }]\n  });\n})();\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nlet root;\nif (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n}\n// tslint:disable-next-line:variable-name\nconst MouseEvent = root.MouseEvent;\nfunction createMouseEvent(name, bubbles = false, cancelable = true) {\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n  if (typeof MouseEvent === 'function') {\n    // Sane browsers\n    return new MouseEvent(name, {\n      bubbles,\n      cancelable\n    });\n  } else {\n    // IE\n    const event = document.createEvent('MouseEvent');\n    event.initEvent(name, bubbles, cancelable);\n    return event;\n  }\n}\nclass TooltipArea {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.anchorOpacity = 0;\n    this.anchorPos = -1;\n    this.anchorValues = [];\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n    this.showPercentage = false;\n    this.tooltipDisabled = false;\n    this.hover = new EventEmitter();\n  }\n  getValues(xVal) {\n    const results = [];\n    for (const group of this.results) {\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\n      let groupName = group.name;\n      if (groupName instanceof Date) {\n        groupName = groupName.toLocaleDateString();\n      }\n      if (item) {\n        const label = item.name;\n        let val = item.value;\n        if (this.showPercentage) {\n          val = (item.d1 - item.d0).toFixed(2) + '%';\n        }\n        let color;\n        if (this.colors.scaleType === ScaleType.Linear) {\n          let v = val;\n          if (item.d1) {\n            v = item.d1;\n          }\n          color = this.colors.getColor(v);\n        } else {\n          color = this.colors.getColor(group.name);\n        }\n        const data = Object.assign({}, item, {\n          value: val,\n          name: label,\n          series: groupName,\n          min: item.min,\n          max: item.max,\n          color\n        });\n        results.push(data);\n      }\n    }\n    return results;\n  }\n  mouseMove(event) {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\n    const closestIndex = this.findClosestPointIndex(xPos);\n    const closestPoint = this.xSet[closestIndex];\n    this.anchorPos = this.xScale(closestPoint);\n    this.anchorPos = Math.max(0, this.anchorPos);\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n    this.anchorValues = this.getValues(closestPoint);\n    if (this.anchorPos !== this.lastAnchorPos) {\n      const ev = createMouseEvent('mouseleave');\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n      this.anchorOpacity = 0.7;\n      this.hover.emit({\n        value: closestPoint\n      });\n      this.showTooltip();\n      this.lastAnchorPos = this.anchorPos;\n    }\n  }\n  findClosestPointIndex(xPos) {\n    let minIndex = 0;\n    let maxIndex = this.xSet.length - 1;\n    let minDiff = Number.MAX_VALUE;\n    let closestIndex = 0;\n    while (minIndex <= maxIndex) {\n      const currentIndex = (minIndex + maxIndex) / 2 | 0;\n      const currentElement = this.xScale(this.xSet[currentIndex]);\n      const curDiff = Math.abs(currentElement - xPos);\n      if (curDiff < minDiff) {\n        minDiff = curDiff;\n        closestIndex = currentIndex;\n      }\n      if (currentElement < xPos) {\n        minIndex = currentIndex + 1;\n      } else if (currentElement > xPos) {\n        maxIndex = currentIndex - 1;\n      } else {\n        minDiff = 0;\n        closestIndex = currentIndex;\n        break;\n      }\n    }\n    return closestIndex;\n  }\n  showTooltip() {\n    const event = createMouseEvent('mouseenter');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n  }\n  hideTooltip() {\n    const event = createMouseEvent('mouseleave');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    this.anchorOpacity = 0;\n    this.lastAnchorPos = -1;\n  }\n  getToolTipText(tooltipItem) {\n    let result = '';\n    if (tooltipItem.series !== undefined) {\n      result += tooltipItem.series;\n    } else {\n      result += '???';\n    }\n    result += ': ';\n    if (tooltipItem.value !== undefined) {\n      result += tooltipItem.value.toLocaleString();\n    }\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n      result += ' (';\n      if (tooltipItem.min !== undefined) {\n        if (tooltipItem.max === undefined) {\n          result += '≥';\n        }\n        result += tooltipItem.min.toLocaleString();\n        if (tooltipItem.max !== undefined) {\n          result += ' - ';\n        }\n      } else if (tooltipItem.max !== undefined) {\n        result += '≤';\n      }\n      if (tooltipItem.max !== undefined) {\n        result += tooltipItem.max.toLocaleString();\n      }\n      result += ')';\n    }\n    return result;\n  }\n}\nTooltipArea.ɵfac = function TooltipArea_Factory(t) {\n  return new (t || TooltipArea)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nTooltipArea.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TooltipArea,\n  selectors: [[\"g\", \"ngx-charts-tooltip-area\", \"\"]],\n  viewQuery: function TooltipArea_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c18, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipAnchor = _t.first);\n    }\n  },\n  inputs: {\n    dims: \"dims\",\n    xSet: \"xSet\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    results: \"results\",\n    colors: \"colors\",\n    showPercentage: \"showPercentage\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    hover: \"hover\"\n  },\n  attrs: _c19,\n  decls: 6,\n  vars: 18,\n  consts: [[\"y\", \"0\", 1, \"tooltip-area\", 2, \"opacity\", \"0\", \"cursor\", \"'auto'\", 3, \"mousemove\", \"mouseleave\"], [\"defaultTooltipTemplate\", \"\"], [\"y\", \"0\", \"ngx-tooltip\", \"\", 1, \"tooltip-anchor\", 3, \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipSpacing\", \"tooltipTemplate\", \"tooltipContext\", \"tooltipImmediateExit\"], [\"tooltipAnchor\", \"\"], [1, \"area-tooltip-container\"], [\"class\", \"tooltip-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"tooltip-item\"], [1, \"tooltip-item-color\"]],\n  template: function TooltipArea_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\")(1, \"rect\", 0);\n      i0.ɵɵlistener(\"mousemove\", function TooltipArea_Template__svg_rect_mousemove_1_listener($event) {\n        return ctx.mouseMove($event);\n      })(\"mouseleave\", function TooltipArea_Template__svg_rect_mouseleave_1_listener() {\n        return ctx.hideTooltip();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, TooltipArea__svg_ng_template_2_Template, 2, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelement(4, \"rect\", 2, 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(3);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"x\", 0)(\"width\", ctx.dims.width)(\"height\", ctx.dims.height);\n      i0.ɵɵadvance(3);\n      i0.ɵɵstyleProp(\"opacity\", ctx.anchorOpacity)(\"pointer-events\", \"none\");\n      i0.ɵɵproperty(\"@animationState\", ctx.anchorOpacity !== 0 ? \"active\" : \"inactive\")(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", ctx.placementTypes.Right)(\"tooltipType\", ctx.styleTypes.tooltip)(\"tooltipSpacing\", 15)(\"tooltipTemplate\", ctx.tooltipTemplate ? ctx.tooltipTemplate : _r0)(\"tooltipContext\", ctx.anchorValues)(\"tooltipImmediateExit\", true);\n      i0.ɵɵattribute(\"x\", ctx.anchorPos)(\"width\", 1)(\"height\", ctx.dims.height);\n    }\n  },\n  dependencies: [i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition('inactive => active', [style({\n      opacity: 0\n    }), animate(250, style({\n      opacity: 0.7\n    }))]), transition('active => inactive', [style({\n      opacity: 0.7\n    }), animate(250, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipArea, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tooltip-area]',\n      template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition('inactive => active', [style({\n        opacity: 0\n      }), animate(250, style({\n        opacity: 0.7\n      }))]), transition('active => inactive', [style({\n        opacity: 0.7\n      }), animate(250, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    dims: [{\n      type: Input\n    }],\n    xSet: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    showPercentage: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    hover: [{\n      type: Output\n    }],\n    tooltipAnchor: [{\n      type: ViewChild,\n      args: ['tooltipAnchor', {\n        static: false\n      }]\n    }]\n  });\n})();\nclass Timeline {\n  constructor(element, cd) {\n    this.cd = cd;\n    this.height = 50;\n    this.select = new EventEmitter();\n    this.onDomainChange = new EventEmitter();\n    this.initialized = false;\n    this.element = element.nativeElement;\n  }\n  ngOnChanges(changes) {\n    this.update();\n    if (!this.initialized) {\n      this.addBrush();\n      this.initialized = true;\n    }\n  }\n  update() {\n    this.dims = this.getDims();\n    this.height = this.dims.height;\n    const offsetY = this.view[1] - this.height;\n    this.xDomain = this.getXDomain();\n    this.xScale = this.getXScale();\n    if (this.brush) {\n      this.updateBrush();\n    }\n    this.transform = `translate(0 , ${offsetY})`;\n    this.filterId = 'filter' + id().toString();\n    this.filter = `url(#${this.filterId})`;\n    this.cd.markForCheck();\n  }\n  getXDomain() {\n    let values = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n    let domain = [];\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else {\n      domain = values;\n    }\n    return domain;\n  }\n  getXScale() {\n    let scale;\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n    }\n    return scale;\n  }\n  addBrush() {\n    if (this.brush) return;\n    const height = this.height;\n    const width = this.view[0];\n    this.brush = brushX().extent([[0, 0], [width, height]]).on('brush end', ({\n      selection\n    }) => {\n      const newSelection = selection || this.xScale.range();\n      const newDomain = newSelection.map(this.xScale.invert);\n      this.onDomainChange.emit(newDomain);\n      this.cd.markForCheck();\n    });\n    select(this.element).select('.brush').call(this.brush);\n  }\n  updateBrush() {\n    if (!this.brush) return;\n    const height = this.height;\n    const width = this.view[0];\n    this.brush.extent([[0, 0], [width, height]]);\n    select(this.element).select('.brush').call(this.brush);\n    // clear hardcoded properties so they can be defined by CSS\n    select(this.element).select('.selection').attr('fill', undefined).attr('stroke', undefined).attr('fill-opacity', undefined);\n    this.cd.markForCheck();\n  }\n  getDims() {\n    const width = this.view[0];\n    const dims = {\n      width,\n      height: this.height\n    };\n    return dims;\n  }\n}\nTimeline.ɵfac = function Timeline_Factory(t) {\n  return new (t || Timeline)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\nTimeline.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: Timeline,\n  selectors: [[\"g\", \"ngx-charts-timeline\", \"\"]],\n  inputs: {\n    view: \"view\",\n    results: \"results\",\n    scheme: \"scheme\",\n    customColors: \"customColors\",\n    legend: \"legend\",\n    autoScale: \"autoScale\",\n    scaleType: \"scaleType\",\n    height: \"height\"\n  },\n  outputs: {\n    select: \"select\",\n    onDomainChange: \"onDomainChange\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c20,\n  ngContentSelectors: _c2,\n  decls: 7,\n  vars: 4,\n  consts: [[1, \"timeline\"], [\"in\", \"SourceGraphic\", \"type\", \"matrix\", \"values\", \"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"], [1, \"embedded-chart\"], [\"x\", \"0\", \"y\", \"0\", 1, \"brush-background\"], [1, \"brush\"]],\n  template: function Timeline_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0)(1, \"filter\");\n      i0.ɵɵelement(2, \"feColorMatrix\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"g\", 2);\n      i0.ɵɵprojection(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"rect\", 3)(6, \"g\", 4);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"id\", ctx.filterId);\n      i0.ɵɵadvance(4);\n      i0.ɵɵattribute(\"width\", ctx.view[0])(\"height\", ctx.height);\n    }\n  },\n  styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Timeline, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-timeline]',\n      template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    view: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    scheme: [{\n      type: Input\n    }],\n    customColors: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    onDomainChange: [{\n      type: Output\n    }]\n  });\n})();\nclass AdvancedLegendComponent {\n  constructor() {\n    this.label = 'Total';\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.legendItems = [];\n    this.labelFormatting = label => label;\n    this.percentageFormatting = percentage => percentage;\n    this.defaultValueFormatting = value => value.toLocaleString();\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  getTotal() {\n    return this.data.map(d => Number(d.value)).reduce((sum, d) => sum + d, 0);\n  }\n  update() {\n    this.total = this.getTotal();\n    this.roundedTotal = this.total;\n    this.legendItems = this.getLegendItems();\n  }\n  getLegendItems() {\n    return this.data.map(d => {\n      const label = formatLabel(d.name);\n      const value = d.value;\n      const color = this.colors.getColor(label);\n      const percentage = this.total > 0 ? value / this.total * 100 : 0;\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n      return {\n        _value: value,\n        data: d,\n        value,\n        color,\n        label: formattedLabel,\n        displayLabel: trimLabel(formattedLabel, 20),\n        origialLabel: d.name,\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n      };\n    });\n  }\n  trackBy(index, item) {\n    return item.label;\n  }\n}\nAdvancedLegendComponent.ɵfac = function AdvancedLegendComponent_Factory(t) {\n  return new (t || AdvancedLegendComponent)();\n};\nAdvancedLegendComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AdvancedLegendComponent,\n  selectors: [[\"ngx-charts-advanced-legend\"]],\n  inputs: {\n    width: \"width\",\n    data: \"data\",\n    colors: \"colors\",\n    label: \"label\",\n    animations: \"animations\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    percentageFormatting: \"percentageFormatting\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 8,\n  vars: 7,\n  consts: [[1, \"advanced-pie-legend\"], [\"class\", \"total-value\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"total-value\", 4, \"ngIf\"], [1, \"total-label\"], [1, \"legend-items-container\"], [1, \"legend-items\"], [\"tabindex\", \"-1\", \"class\", \"legend-item\", 3, \"mouseenter\", \"mouseleave\", \"click\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-count-up\", \"\", 1, \"total-value\", 3, \"countTo\", \"valueFormatting\"], [1, \"total-value\"], [\"tabindex\", \"-1\", 1, \"legend-item\", 3, \"mouseenter\", \"mouseleave\", \"click\"], [1, \"item-color\"], [\"class\", \"item-value\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"item-value\", 4, \"ngIf\"], [1, \"item-label\"], [\"class\", \"item-percent\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"countSuffix\", 4, \"ngIf\"], [\"class\", \"item-percent\", 4, \"ngIf\"], [\"ngx-charts-count-up\", \"\", 1, \"item-value\", 3, \"countTo\", \"valueFormatting\"], [1, \"item-value\"], [\"ngx-charts-count-up\", \"\", 1, \"item-percent\", 3, \"countTo\", \"countSuffix\"], [1, \"item-percent\"]],\n  template: function AdvancedLegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, AdvancedLegendComponent_div_1_Template, 1, 2, \"div\", 1);\n      i0.ɵɵtemplate(2, AdvancedLegendComponent_div_2_Template, 2, 1, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"div\", 5);\n      i0.ɵɵtemplate(7, AdvancedLegendComponent_div_7_Template, 8, 7, \"div\", 6);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.label, \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.legendItems)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [CountUpDirective, i2.NgIf, i2.NgForOf],\n  styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AdvancedLegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-advanced-legend',\n      template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"]\n    }]\n  }], null, {\n    width: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    percentageFormatting: [{\n      type: Input\n    }]\n  });\n})();\nconst COMPONENTS = [AreaComponent, BaseChartComponent, CountUpDirective, TooltipArea, ChartComponent, LegendComponent, LegendEntryComponent, ScaleLegendComponent, CircleComponent, CircleSeriesComponent, GridPanelComponent, GridPanelSeriesComponent, SvgLinearGradientComponent, SvgRadialGradientComponent, Timeline, AdvancedLegendComponent];\nclass ChartCommonModule {}\nChartCommonModule.ɵfac = function ChartCommonModule_Factory(t) {\n  return new (t || ChartCommonModule)();\n};\nChartCommonModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ChartCommonModule\n});\nChartCommonModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, AxesModule, TooltipModule], CommonModule, AxesModule, TooltipModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartCommonModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, AxesModule, TooltipModule],\n      declarations: [...COMPONENTS, VisibilityObserver],\n      exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n    }]\n  }], null, null);\n})();\nfunction calculateViewDimensions({\n  width,\n  height,\n  margins,\n  showXAxis = false,\n  showYAxis = false,\n  xAxisHeight = 0,\n  yAxisWidth = 0,\n  showXLabel = false,\n  showYLabel = false,\n  showLegend = false,\n  legendType = ScaleType.Ordinal,\n  legendPosition = LegendPosition.Right,\n  columns = 12\n}) {\n  let xOffset = margins[3];\n  let chartWidth = width;\n  let chartHeight = height - margins[0] - margins[2];\n  if (showLegend && legendPosition === LegendPosition.Right) {\n    if (legendType === ScaleType.Ordinal) {\n      columns -= 2;\n    } else {\n      columns -= 1;\n    }\n  }\n  chartWidth = chartWidth * columns / 12;\n  chartWidth = chartWidth - margins[1] - margins[3];\n  if (showXAxis) {\n    chartHeight -= 5;\n    chartHeight -= xAxisHeight;\n    if (showXLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartHeight -= offset;\n    }\n  }\n  if (showYAxis) {\n    chartWidth -= 5;\n    chartWidth -= yAxisWidth;\n    xOffset += yAxisWidth;\n    xOffset += 10;\n    if (showYLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartWidth -= offset;\n      xOffset += offset;\n    }\n  }\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight),\n    xOffset: Math.floor(xOffset)\n  };\n}\nconst colorSets = [{\n  name: 'vivid',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#647c8a', '#3f51b5', '#2196f3', '#00b862', '#afdf0a', '#a7b61a', '#f3e562', '#ff9800', '#ff5722', '#ff4514']\n}, {\n  name: 'natural',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#bf9d76', '#e99450', '#d89f59', '#f2dfa7', '#a5d7c6', '#7794b1', '#afafaf', '#707160', '#ba9383', '#d9d5c3']\n}, {\n  name: 'cool',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#a8385d', '#7aa3e5', '#a27ea8', '#aae3f5', '#adcded', '#a95963', '#8796c0', '#7ed3ed', '#50abcc', '#ad6886']\n}, {\n  name: 'fire',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n}, {\n  name: 'solar',\n  selectable: true,\n  group: ScaleType.Linear,\n  domain: ['#fff8e1', '#ffecb3', '#ffe082', '#ffd54f', '#ffca28', '#ffc107', '#ffb300', '#ffa000', '#ff8f00', '#ff6f00']\n}, {\n  name: 'air',\n  selectable: true,\n  group: ScaleType.Linear,\n  domain: ['#e1f5fe', '#b3e5fc', '#81d4fa', '#4fc3f7', '#29b6f6', '#03a9f4', '#039be5', '#0288d1', '#0277bd', '#01579b']\n}, {\n  name: 'aqua',\n  selectable: true,\n  group: ScaleType.Linear,\n  domain: ['#e0f7fa', '#b2ebf2', '#80deea', '#4dd0e1', '#26c6da', '#00bcd4', '#00acc1', '#0097a7', '#00838f', '#006064']\n}, {\n  name: 'flame',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#A10A28', '#D3342D', '#EF6D49', '#FAAD67', '#FDDE90', '#DBED91', '#A9D770', '#6CBA67', '#2C9653', '#146738']\n}, {\n  name: 'ocean',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#1D68FB', '#33C0FC', '#4AFFFE', '#AFFFFF', '#FFFC63', '#FDBD2D', '#FC8A25', '#FA4F1E', '#FA141B', '#BA38D1']\n}, {\n  name: 'forest',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#55C22D', '#C1F33D', '#3CC099', '#AFFFFF', '#8CFC9D', '#76CFFA', '#BA60FB', '#EE6490', '#C42A1C', '#FC9F32']\n}, {\n  name: 'horizon',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#2597FB', '#65EBFD', '#99FDD0', '#FCEE4B', '#FEFCFA', '#FDD6E3', '#FCB1A8', '#EF6F7B', '#CB96E8', '#EFDEE0']\n}, {\n  name: 'neons',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#FF3333', '#FF33FF', '#CC33FF', '#0000FF', '#33CCFF', '#33FFFF', '#33FF66', '#CCFF33', '#FFCC00', '#FF6600']\n}, {\n  name: 'picnic',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#FAC51D', '#66BD6D', '#FAA026', '#29BB9C', '#E96B56', '#55ACD2', '#B7332F', '#2C83C9', '#9166B8', '#92E7E8']\n}, {\n  name: 'night',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#2B1B5A', '#501356', '#183356', '#28203F', '#391B3C', '#1E2B3C', '#120634', '#2D0432', '#051932', '#453080', '#75267D', '#2C507D', '#4B3880', '#752F7D', '#35547D']\n}, {\n  name: 'nightLights',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#4e31a5', '#9c25a7', '#3065ab', '#57468b', '#904497', '#46648b', '#32118d', '#a00fb3', '#1052a2', '#6e51bd', '#b63cc3', '#6c97cb', '#8671c1', '#b455be', '#7496c3']\n}];\nclass ColorHelper {\n  constructor(scheme, type, domain, customColors) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    this.colorDomain = scheme.domain;\n    this.scaleType = type;\n    this.domain = domain;\n    this.customColors = customColors;\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\n  }\n  generateColorScheme(scheme, type, domain) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    let colorScale;\n    switch (type) {\n      case ScaleType.Quantile:\n        colorScale = scaleQuantile().range(scheme.domain).domain(domain);\n        break;\n      case ScaleType.Ordinal:\n        colorScale = scaleOrdinal().range(scheme.domain).domain(domain);\n        break;\n      case ScaleType.Linear:\n        {\n          const colorDomain = [...scheme.domain];\n          if (colorDomain.length === 1) {\n            colorDomain.push(colorDomain[0]);\n            this.colorDomain = colorDomain;\n          }\n          const points = range(0, 1, 1.0 / colorDomain.length);\n          colorScale = scaleLinear().range(colorDomain).domain(points);\n        }\n        break;\n      default:\n        break;\n    }\n    return colorScale;\n  }\n  getColor(value) {\n    if (value === undefined || value === null) {\n      throw new Error('Value can not be null');\n    }\n    if (this.scaleType === ScaleType.Linear) {\n      const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n      return this.scale(valueScale(value));\n    } else {\n      if (typeof this.customColors === 'function') {\n        return this.customColors(value);\n      }\n      const formattedValue = value.toString();\n      let found; // todo type customColors\n      if (this.customColors && this.customColors.length > 0) {\n        found = this.customColors.find(mapping => {\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n        });\n      }\n      if (found) {\n        return found.value;\n      } else {\n        return this.scale(value);\n      }\n    }\n  }\n  getLinearGradientStops(value, start) {\n    if (start === undefined) {\n      start = this.domain[0];\n    }\n    const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n    const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n    const endColor = this.getColor(value);\n    // generate the stops\n    const startVal = valueScale(start);\n    const startColor = this.getColor(start);\n    const endVal = valueScale(value);\n    let i = 1;\n    let currentVal = startVal;\n    const stops = [];\n    stops.push({\n      color: startColor,\n      offset: startVal,\n      originalOffset: startVal,\n      opacity: 1\n    });\n    while (currentVal < endVal && i < this.colorDomain.length) {\n      const color = this.colorDomain[i];\n      const offset = colorValueScale(color);\n      if (offset <= startVal) {\n        i++;\n        continue;\n      }\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n        break;\n      }\n      stops.push({\n        color,\n        offset,\n        opacity: 1\n      });\n      currentVal = offset;\n      i++;\n    }\n    if (stops[stops.length - 1].offset < 100) {\n      stops.push({\n        color: endColor,\n        offset: endVal,\n        opacity: 1\n      });\n    }\n    if (endVal === startVal) {\n      stops[0].offset = 0;\n      stops[1].offset = 100;\n    } else {\n      // normalize the offsets into percentages\n      if (stops[stops.length - 1].offset !== 100) {\n        for (const s of stops) {\n          s.offset = (s.offset - startVal) / (endVal - startVal) * 100;\n        }\n      }\n    }\n    return stops;\n  }\n}\n\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\nfunction getUniqueXDomainValues(results) {\n  const valueSet = new Set();\n  for (const result of results) {\n    for (const d of result.series) {\n      valueSet.add(d.name);\n    }\n  }\n  return Array.from(valueSet);\n}\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\nfunction getScaleType(values, checkDateType = true) {\n  if (checkDateType) {\n    const allDates = values.every(value => value instanceof Date);\n    if (allDates) {\n      return ScaleType.Time;\n    }\n  }\n  const allNumbers = values.every(value => typeof value === 'number');\n  if (allNumbers) {\n    return ScaleType.Linear;\n  }\n  return ScaleType.Ordinal;\n}\nfunction getXDomainArray(values, xScaleMin, xScaleMax) {\n  const scaleType = getScaleType(values);\n  let xSet = [];\n  let domain = [];\n  if (scaleType === ScaleType.Linear) {\n    values = values.map(v => Number(v));\n  }\n  let min;\n  let max;\n  if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n    const mappedValues = values.map(v => Number(v));\n    min = xScaleMin ? xScaleMin : Math.min(...mappedValues);\n    max = xScaleMax ? xScaleMax : Math.max(...mappedValues);\n  }\n  if (scaleType === ScaleType.Time) {\n    domain = [new Date(min), new Date(max)];\n    xSet = [...values].sort((a, b) => {\n      const aDate = a.getTime();\n      const bDate = b.getTime();\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    });\n  } else if (scaleType === ScaleType.Linear) {\n    domain = [min, max];\n    // Use compare function to sort numbers numerically\n    xSet = [...values].sort((a, b) => a - b);\n  } else {\n    domain = values;\n    xSet = values;\n  }\n  return {\n    domain,\n    xSet,\n    scaleType\n  };\n}\nfunction sortLinear(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    if (direction === 'asc') {\n      return a[property] - b[property];\n    } else {\n      return b[property] - a[property];\n    }\n  });\n}\nfunction sortByDomain(data, property, direction = 'asc', domain) {\n  return data.sort((a, b) => {\n    const aVal = a[property];\n    const bVal = b[property];\n    const aIdx = domain.indexOf(aVal);\n    const bIdx = domain.indexOf(bVal);\n    if (direction === 'asc') {\n      return aIdx - bIdx;\n    } else {\n      return bIdx - aIdx;\n    }\n  });\n}\nfunction sortByTime(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    const aDate = a[property].getTime();\n    const bDate = b[property].getTime();\n    if (direction === 'asc') {\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    } else {\n      if (aDate > bDate) return -1;\n      if (bDate > aDate) return 1;\n      return 0;\n    }\n  });\n}\nclass AreaSeriesComponent {\n  constructor() {\n    this.baseValue = 'auto';\n    this.stacked = false;\n    this.normalized = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    this.updateGradient();\n    let currentArea;\n    let startingArea;\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n    if (this.stacked || this.normalized) {\n      currentArea = area().x(xProperty).y0((d, i) => this.yScale(d.d0)).y1((d, i) => this.yScale(d.d1));\n      startingArea = area().x(xProperty).y0(d => this.yScale.range()[0]).y1(d => this.yScale.range()[0]);\n    } else {\n      currentArea = area().x(xProperty).y0(() => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)).y1(d => this.yScale(d.value));\n      startingArea = area().x(xProperty).y0(d => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)).y1(d => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue));\n    }\n    currentArea.curve(this.curve);\n    startingArea.curve(this.curve);\n    this.opacity = 0.8;\n    let data = this.data.series;\n    if (this.scaleType === ScaleType.Linear) {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n    this.path = currentArea(data);\n    this.startingPath = startingArea(data);\n  }\n  updateGradient() {\n    if (this.colors.scaleType === ScaleType.Linear) {\n      this.hasGradient = true;\n      if (this.stacked || this.normalized) {\n        const d0values = this.data.series.map(d => d.d0);\n        const d1values = this.data.series.map(d => d.d1);\n        const max = Math.max(...d1values);\n        const min = Math.min(...d0values);\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      } else {\n        const values = this.data.series.map(d => d.value);\n        const max = Math.max(...values);\n        this.gradientStops = this.colors.getLinearGradientStops(max);\n      }\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n    }\n  }\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n  isInactive(entry) {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\nAreaSeriesComponent.ɵfac = function AreaSeriesComponent_Factory(t) {\n  return new (t || AreaSeriesComponent)();\n};\nAreaSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-area-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    baseValue: \"baseValue\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    stacked: \"stacked\",\n    normalized: \"normalized\",\n    gradient: \"gradient\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c21,\n  decls: 1,\n  vars: 12,\n  consts: [[\"ngx-charts-area\", \"\", 1, \"area-series\", 3, \"data\", \"path\", \"fill\", \"stops\", \"startingPath\", \"opacity\", \"gradient\", \"animations\"]],\n  template: function AreaSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"g\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      i0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.path)(\"fill\", ctx.colors.getColor(ctx.data.name))(\"stops\", ctx.gradientStops)(\"startingPath\", ctx.startingPath)(\"opacity\", ctx.opacity)(\"gradient\", ctx.gradient || ctx.hasGradient)(\"animations\", ctx.animations);\n    }\n  },\n  dependencies: [AreaComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-area-series]',\n      template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    baseValue: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    stacked: [{\n      type: Input\n    }],\n    normalized: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\nclass AreaChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.xAxis = false;\n    this.yAxis = false;\n    this.baseValue = 'auto';\n    this.autoScale = false;\n    this.timeline = false;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n    let min;\n    let max;\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n    return domain;\n  }\n  getYDomain() {\n    const domain = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n    if (this.baseValue !== 'auto') {\n      values.push(this.baseValue);\n    }\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n    return [min, max];\n  }\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n  getXScale(domain, width) {\n    let scale;\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n    scale.range([0, width]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  getScaleType(values) {\n    let date = true;\n    let num = true;\n    for (const value of values) {\n      if (isDate(value)) {\n        date = false;\n      }\n      if (isNumber(value)) {\n        num = false;\n      }\n    }\n    if (date) {\n      return ScaleType.Time;\n    }\n    if (num) {\n      return ScaleType.Linear;\n    }\n    return ScaleType.Ordinal;\n  }\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n    this.select.emit(data);\n  }\n  setColors() {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n    this.activeEntries = [];\n  }\n}\nAreaChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAreaChartComponent_BaseFactory;\n  return function AreaChartComponent_Factory(t) {\n    return (ɵAreaChartComponent_BaseFactory || (ɵAreaChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AreaChartComponent)))(t || AreaChartComponent);\n  };\n}();\nAreaChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaChartComponent,\n  selectors: [[\"ngx-charts-area-chart\"]],\n  contentQueries: function AreaChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function AreaChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    baseValue: \"baseValue\",\n    autoScale: \"autoScale\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"gradient\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"curve\", \"animations\"]],\n  template: function AreaChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, AreaChartComponent__svg_g_5_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(6, AreaChartComponent__svg_g_6_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, AreaChartComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n      i0.ɵɵtemplate(9, AreaChartComponent__svg_g_9_Template, 3, 9, \"g\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(10, AreaChartComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline, i2.NgIf, i2.NgForOf],\n  styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    baseValue: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\nclass AreaChartNormalizedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.showXAxisLabel = false;\n    this.showYAxisLabel = false;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.yDomain = [0, 100];\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.seriesType = SeriesType;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n      let total = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n        if (d) {\n          total += d.value;\n        }\n      }\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n        if (total > 0) {\n          d.d0 = d.d0 * 100 / total;\n          d.d1 = d.d1 * 100 / total;\n        } else {\n          d.d0 = 0;\n          d.d1 = 0;\n        }\n      }\n    }\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n    return domain;\n  }\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n  getXScale(domain, width) {\n    let scale;\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n    scale.range([0, width]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n    this.select.emit(data);\n  }\n  setColors() {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n    this.activeEntries = [];\n  }\n}\nAreaChartNormalizedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAreaChartNormalizedComponent_BaseFactory;\n  return function AreaChartNormalizedComponent_Factory(t) {\n    return (ɵAreaChartNormalizedComponent_BaseFactory || (ɵAreaChartNormalizedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AreaChartNormalizedComponent)))(t || AreaChartNormalizedComponent);\n  };\n}();\nAreaChartNormalizedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaChartNormalizedComponent,\n  selectors: [[\"ngx-charts-area-chart-normalized\"]],\n  contentQueries: function AreaChartNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartNormalizedComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function AreaChartNormalizedComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"activeEntries\", \"gradient\", \"normalized\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"normalized\", \"curve\", \"animations\"]],\n  template: function AreaChartNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, AreaChartNormalizedComponent__svg_g_5_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(6, AreaChartNormalizedComponent__svg_g_6_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, AreaChartNormalizedComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n      i0.ɵɵtemplate(9, AreaChartNormalizedComponent__svg_g_9_Template, 3, 10, \"g\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(10, AreaChartNormalizedComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart-normalized',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\nclass AreaChartStackedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.xAxis = false;\n    this.yAxis = false;\n    this.timeline = false;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n    this.seriesType = SeriesType;\n  }\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n      }\n    }\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n    let min;\n    let max;\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n    return domain;\n  }\n  getYDomain() {\n    const domain = [];\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let sum = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n        if (d) {\n          sum += d.value;\n        }\n      }\n      domain.push(sum);\n    }\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n    return [min, max];\n  }\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n  getXScale(domain, width) {\n    let scale;\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n    scale.range([0, width]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n    this.select.emit(data);\n  }\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n  setColors() {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n    this.activeEntries = [];\n  }\n}\nAreaChartStackedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAreaChartStackedComponent_BaseFactory;\n  return function AreaChartStackedComponent_Factory(t) {\n    return (ɵAreaChartStackedComponent_BaseFactory || (ɵAreaChartStackedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AreaChartStackedComponent)))(t || AreaChartStackedComponent);\n  };\n}();\nAreaChartStackedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaChartStackedComponent,\n  selectors: [[\"ngx-charts-area-chart-stacked\"]],\n  contentQueries: function AreaChartStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartStackedComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function AreaChartStackedComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"activeEntries\", \"stacked\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [\"ngx-charts-circle-series\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"stacked\", \"curve\", \"animations\"]],\n  template: function AreaChartStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, AreaChartStackedComponent__svg_g_5_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(6, AreaChartStackedComponent__svg_g_6_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, AreaChartStackedComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n      i0.ɵɵtemplate(9, AreaChartStackedComponent__svg_g_9_Template, 3, 10, \"g\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(10, AreaChartStackedComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart-stacked',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\nclass AreaChartModule {}\nAreaChartModule.ɵfac = function AreaChartModule_Factory(t) {\n  return new (t || AreaChartModule)();\n};\nAreaChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AreaChartModule\n});\nAreaChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n      exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n    }]\n  }], null, null);\n})();\nclass BarComponent {\n  constructor(element) {\n    this.roundEdges = true;\n    this.gradient = false;\n    this.offset = 0;\n    this.isActive = false;\n    this.animations = true;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.hasGradient = false;\n    this.hideBar = false;\n    this.element = element.nativeElement;\n  }\n  ngOnChanges(changes) {\n    if (changes.roundEdges) {\n      this.loadAnimation();\n    }\n    this.update();\n  }\n  update() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n    this.updatePathEl();\n    this.checkToHideBar();\n  }\n  loadAnimation() {\n    this.path = this.getStartingPath();\n    setTimeout(this.update.bind(this), 100);\n  }\n  updatePathEl() {\n    const node = select(this.element).select('.bar');\n    const path = this.getPath();\n    if (this.animations) {\n      node.transition().duration(500).attr('d', path);\n    } else {\n      node.attr('d', path);\n    }\n  }\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.getStartOpacity()\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n  getStartingPath() {\n    if (!this.animations) {\n      return this.getPath();\n    }\n    let radius = this.getRadius();\n    let path;\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    } else {\n      if (this.orientation === BarOrientation.Vertical) {\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    }\n    return path;\n  }\n  getPath() {\n    let radius = this.getRadius();\n    let path;\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      }\n    } else {\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n    }\n    return path;\n  }\n  getRadius() {\n    let radius = 0;\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n    return radius;\n  }\n  getStartOpacity() {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n  get edges() {\n    let edges = [false, false, false, false];\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        if (this.data.value > 0) {\n          edges = [true, true, false, false];\n        } else {\n          edges = [false, false, true, true];\n        }\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        if (this.data.value > 0) {\n          edges = [false, true, false, true];\n        } else {\n          edges = [true, false, true, false];\n        }\n      }\n    }\n    return edges;\n  }\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n  checkToHideBar() {\n    this.hideBar = this.noBarWhenZero && (this.orientation === BarOrientation.Vertical && this.height === 0 || this.orientation === BarOrientation.Horizontal && this.width === 0);\n  }\n}\nBarComponent.ɵfac = function BarComponent_Factory(t) {\n  return new (t || BarComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nBarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarComponent,\n  selectors: [[\"g\", \"ngx-charts-bar\", \"\"]],\n  hostBindings: function BarComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function BarComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function BarComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    fill: \"fill\",\n    data: \"data\",\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\",\n    orientation: \"orientation\",\n    roundEdges: \"roundEdges\",\n    gradient: \"gradient\",\n    offset: \"offset\",\n    isActive: \"isActive\",\n    stops: \"stops\",\n    animations: \"animations\",\n    ariaLabel: \"ariaLabel\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c26,\n  decls: 2,\n  vars: 8,\n  consts: [[4, \"ngIf\"], [\"stroke\", \"none\", \"role\", \"img\", \"tabIndex\", \"-1\", 1, \"bar\", 3, \"click\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n  template: function BarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, BarComponent__svg_defs_0_Template, 2, 3, \"defs\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"path\", 1);\n      i0.ɵɵlistener(\"click\", function BarComponent_Template__svg_path_click_1_listener() {\n        return ctx.select.emit(ctx.data);\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.isActive)(\"hidden\", ctx.hideBar);\n      i0.ɵɵattribute(\"d\", ctx.path)(\"aria-label\", ctx.ariaLabel)(\"fill\", ctx.hasGradient ? ctx.gradientFill : ctx.fill);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bar]',\n      template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    fill: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    orientation: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\nvar BarChartType;\n(function (BarChartType) {\n  BarChartType[\"Standard\"] = \"standard\";\n  BarChartType[\"Normalized\"] = \"normalized\";\n  BarChartType[\"Stacked\"] = \"stacked\";\n})(BarChartType || (BarChartType = {}));\nvar D0Types;\n(function (D0Types) {\n  D0Types[\"positive\"] = \"positive\";\n  D0Types[\"negative\"] = \"negative\";\n})(D0Types || (D0Types = {}));\nclass BarLabelComponent {\n  constructor(element) {\n    this.dimensionsChanged = new EventEmitter();\n    this.horizontalPadding = 2;\n    this.verticalPadding = 5;\n    this.element = element.nativeElement;\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  getSize() {\n    const h = this.element.getBoundingClientRect().height;\n    const w = this.element.getBoundingClientRect().width;\n    return {\n      height: h,\n      width: w,\n      negative: this.value < 0\n    };\n  }\n  ngAfterViewInit() {\n    this.dimensionsChanged.emit(this.getSize());\n  }\n  update() {\n    if (this.valueFormatting) {\n      this.formatedValue = this.valueFormatting(this.value);\n    } else {\n      this.formatedValue = formatLabel(this.value);\n    }\n    if (this.orientation === 'horizontal') {\n      this.x = this.barX + this.barWidth;\n      // if the value is negative then it's on the left of the x0.\n      // we need to put the data label in front of the bar\n      if (this.value < 0) {\n        this.x = this.x - this.horizontalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.x = this.x + this.horizontalPadding;\n        this.textAnchor = 'start';\n      }\n      this.y = this.barY + this.barHeight / 2;\n    } else {\n      // orientation must be \"vertical\"\n      this.x = this.barX + this.barWidth / 2;\n      this.y = this.barY + this.barHeight;\n      if (this.value < 0) {\n        this.y = this.y + this.verticalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.y = this.y - this.verticalPadding;\n        this.textAnchor = 'start';\n      }\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n    }\n  }\n}\nBarLabelComponent.ɵfac = function BarLabelComponent_Factory(t) {\n  return new (t || BarLabelComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nBarLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-bar-label\", \"\"]],\n  inputs: {\n    value: \"value\",\n    valueFormatting: \"valueFormatting\",\n    barX: \"barX\",\n    barY: \"barY\",\n    barWidth: \"barWidth\",\n    barHeight: \"barHeight\",\n    orientation: \"orientation\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c27,\n  decls: 2,\n  vars: 5,\n  consts: [[\"alignment-baseline\", \"middle\", 1, \"textDataLabel\"]],\n  template: function BarLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"text\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"text-anchor\", ctx.textAnchor)(\"transform\", ctx.transform)(\"x\", ctx.x)(\"y\", ctx.y);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.formatedValue, \" \");\n    }\n  },\n  styles: [\".textDataLabel[_ngcontent-%COMP%]{font-size:11px}\"],\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bar-label]',\n      template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".textDataLabel{font-size:11px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    value: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    barX: [{\n      type: Input\n    }],\n    barY: [{\n      type: Input\n    }],\n    barWidth: [{\n      type: Input\n    }],\n    barHeight: [{\n      type: Input\n    }],\n    orientation: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }]\n  });\n})();\nclass SeriesHorizontal {\n  constructor() {\n    this.type = BarChartType.Standard;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dataLabelWidthChanged = new EventEmitter();\n    this.barsForDataLabels = [];\n    this.barOrientation = BarOrientation;\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    this.updateTooltipSettings();\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type;\n    d0Type = D0Types.positive;\n    let total;\n    if (this.type === BarChartType.Normalized) {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n    this.bars = this.series.map(d => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n      const bar = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        formattedLabel\n      };\n      bar.height = this.yScale.bandwidth();\n      if (this.type === BarChartType.Standard) {\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n        if (value < 0) {\n          bar.x = this.xScale(value);\n        } else {\n          bar.x = this.xScale(xScaleMin);\n        }\n        bar.y = this.yScale(label);\n      } else if (this.type === BarChartType.Stacked) {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === BarChartType.Normalized) {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n        if (total > 0) {\n          offset0 = offset0 * 100 / total;\n          offset1 = offset1 * 100 / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n      if (this.colors.scaleType === ScaleType.Ordinal) {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === BarChartType.Standard) {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName !== null && this.seriesName !== undefined) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n      bar.tooltipText = this.tooltipDisabled ? undefined : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n      return bar;\n    });\n    this.updateDataLabels();\n  }\n  updateDataLabels() {\n    if (this.type === BarChartType.Stacked) {\n      this.barsForDataLabels = [];\n      const section = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => d > 0 ? sum + d : sum, 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => d < 0 ? sum + d : sum, 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      // if total is positive then we show it on the right, otherwise on the left\n      if (section.total > 0) {\n        section.width = this.xScale(totalPositive);\n      } else {\n        section.width = this.xScale(totalNegative);\n      }\n      section.height = this.yScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section = {};\n        section.series = this.seriesName ?? d.label;\n        section.total = d.value;\n        section.x = this.xScale(0);\n        section.y = this.yScale(d.label);\n        section.width = this.xScale(section.total) - this.xScale(0);\n        section.height = this.yScale.bandwidth();\n        return section;\n      });\n    }\n  }\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n    this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n  }\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(active => {\n      return entry.name === active.name && entry.value === active.value;\n    });\n    return item !== undefined;\n  }\n  getLabel(dataItem) {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n  trackBy(index, bar) {\n    return bar.label;\n  }\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n  click(data) {\n    this.select.emit(data);\n  }\n}\nSeriesHorizontal.ɵfac = function SeriesHorizontal_Factory(t) {\n  return new (t || SeriesHorizontal)();\n};\nSeriesHorizontal.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SeriesHorizontal,\n  selectors: [[\"g\", \"ngx-charts-series-horizontal\", \"\"]],\n  inputs: {\n    dims: \"dims\",\n    type: \"type\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    seriesName: \"seriesName\",\n    tooltipTemplate: \"tooltipTemplate\",\n    roundEdges: \"roundEdges\",\n    animations: \"animations\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dataLabelWidthChanged: \"dataLabelWidthChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c28,\n  decls: 2,\n  vars: 3,\n  consts: [[\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"isActive\", \"ariaLabel\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [4, \"ngIf\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"isActive\", \"ariaLabel\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\"]],\n  template: function SeriesHorizontal_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, SeriesHorizontal__svg_g_0_Template, 1, 21, \"g\", 0);\n      i0.ɵɵtemplate(1, SeriesHorizontal__svg_g_1_Template, 2, 2, \"g\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.bars)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showDataLabel);\n    }\n  },\n  dependencies: [BarComponent, BarLabelComponent, i2.NgForOf, TooltipDirective, i2.NgIf],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SeriesHorizontal, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-series-horizontal]',\n      template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], null, {\n    dims: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    seriesName: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dataLabelWidthChanged: [{\n      type: Output\n    }]\n  });\n})();\nclass BarHorizontalComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n  }\n  update() {\n    super.update();\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n  getXScale() {\n    this.xDomain = this.getXDomain();\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  getYScale() {\n    this.yDomain = this.getYDomain();\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n  }\n  getXDomain() {\n    const values = this.results.map(d => d.value);\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n    return [min, max];\n  }\n  getYDomain() {\n    return this.results.map(d => d.label);\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  setColors() {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.yDomain;\n    } else {\n      domain = this.xDomain;\n    }\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n  onDataLabelMaxWidthChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n}\nBarHorizontalComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontalComponent_BaseFactory;\n  return function BarHorizontalComponent_Factory(t) {\n    return (ɵBarHorizontalComponent_BaseFactory || (ɵBarHorizontalComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontalComponent)))(t || BarHorizontalComponent);\n  };\n}();\nBarHorizontalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontalComponent,\n  selectors: [[\"ngx-charts-bar-horizontal\"]],\n  contentQueries: function BarHorizontalComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    xScaleMax: \"xScaleMax\",\n    xScaleMin: \"xScaleMin\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 25,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"activeEntries\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"]],\n  template: function BarHorizontalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarHorizontalComponent__svg_g_2_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontalComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(4, \"g\", 4);\n      i0.ɵɵlistener(\"select\", function BarHorizontalComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function BarHorizontalComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function BarHorizontalComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      })(\"dataLabelWidthChanged\", function BarHorizontalComponent_Template__svg_g_dataLabelWidthChanged_4_listener($event) {\n        return ctx.onDataLabelMaxWidthChanged($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(22, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"series\", ctx.results)(\"dims\", ctx.dims)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"activeEntries\", ctx.activeEntries)(\"roundEdges\", ctx.roundEdges)(\"animations\", ctx.animations)(\"showDataLabel\", ctx.showDataLabel)(\"dataLabelFormatting\", ctx.dataLabelFormatting)(\"noBarWhenZero\", ctx.noBarWhenZero);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesHorizontal, i2.NgIf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\nclass BarHorizontal2DComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.groupPadding = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n    this.isSSR = false;\n    this.barOrientation = BarOrientation;\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n  update() {\n    super.update();\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n  getGroupScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).paddingOuter(spacing / 2).domain(this.groupDomain);\n  }\n  getInnerScale() {\n    const height = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n  }\n  getValueScale() {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n    return domain;\n  }\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n    return domain;\n  }\n  getValueDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n  groupTransform(group) {\n    return `translate(0, ${this.groupScale(group.label)})`;\n  }\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n    this.select.emit(data);\n  }\n  setColors() {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n}\nBarHorizontal2DComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontal2DComponent_BaseFactory;\n  return function BarHorizontal2DComponent_Factory(t) {\n    return (ɵBarHorizontal2DComponent_BaseFactory || (ɵBarHorizontal2DComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontal2DComponent)))(t || BarHorizontal2DComponent);\n  };\n}();\nBarHorizontal2DComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontal2DComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-2d\"]],\n  contentQueries: function BarHorizontal2DComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    groupPadding: \"groupPadding\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    xScaleMax: \"xScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 7,\n  vars: 18,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-grid-panel-series\", \"\", 3, \"xScale\", \"yScale\", \"data\", \"dims\", \"orient\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"xScale\", \"activeEntries\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"]],\n  template: function BarHorizontal2DComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelement(2, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontal2DComponent__svg_g_3_Template, 1, 11, \"g\", 3);\n      i0.ɵɵtemplate(4, BarHorizontal2DComponent__svg_g_4_Template, 1, 10, \"g\", 4);\n      i0.ɵɵtemplate(5, BarHorizontal2DComponent__svg_g_5_Template, 2, 2, \"g\", 5);\n      i0.ɵɵtemplate(6, BarHorizontal2DComponent__svg_g_6_Template, 2, 2, \"g\", 5);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(15, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.valueScale)(\"yScale\", ctx.groupScale)(\"data\", ctx.results)(\"dims\", ctx.dims)(\"orient\", ctx.barOrientation.Horizontal);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, GridPanelSeriesComponent, XAxisComponent, YAxisComponent, SeriesHorizontal, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontal2DComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-2d',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    groupPadding: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\nclass BarHorizontalNormalizedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.valueDomain = [0, 100];\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.barChartType = BarChartType;\n    this.isSSR = false;\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n    return domain;\n  }\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n    return domain;\n  }\n  getYScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n  getXScale() {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  groupTransform(group) {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n    this.select.emit(data);\n  }\n  setColors() {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n}\nBarHorizontalNormalizedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontalNormalizedComponent_BaseFactory;\n  return function BarHorizontalNormalizedComponent_Factory(t) {\n    return (ɵBarHorizontalNormalizedComponent_BaseFactory || (ɵBarHorizontalNormalizedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontalNormalizedComponent)))(t || BarHorizontalNormalizedComponent);\n  };\n}();\nBarHorizontalNormalizedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontalNormalizedComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-normalized\"]],\n  contentQueries: function BarHorizontalNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BarHorizontalNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarHorizontalNormalizedComponent__svg_g_2_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontalNormalizedComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, BarHorizontalNormalizedComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(5, BarHorizontalNormalizedComponent__svg_g_5_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesHorizontal, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontalNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-normalized',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\nclass BarHorizontalStackedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n    this.barChartType = BarChartType;\n    this.isSSR = false;\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n  update() {\n    super.update();\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n    return domain;\n  }\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n    return domain;\n  }\n  getValueDomain() {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n  getYScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n  getXScale() {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  groupTransform(group) {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n    this.select.emit(data);\n  }\n  setColors() {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n}\nBarHorizontalStackedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontalStackedComponent_BaseFactory;\n  return function BarHorizontalStackedComponent_Factory(t) {\n    return (ɵBarHorizontalStackedComponent_BaseFactory || (ɵBarHorizontalStackedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontalStackedComponent)))(t || BarHorizontalStackedComponent);\n  };\n}();\nBarHorizontalStackedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontalStackedComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-stacked\"]],\n  contentQueries: function BarHorizontalStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    xScaleMax: \"xScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"colors\", \"series\", \"activeEntries\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"]],\n  template: function BarHorizontalStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarHorizontalStackedComponent__svg_g_2_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontalStackedComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵtemplate(4, BarHorizontalStackedComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(5, BarHorizontalStackedComponent__svg_g_5_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesHorizontal, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontalStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-stacked',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\nclass SeriesVerticalComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.type = BarChartType.Standard;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dataLabelHeightChanged = new EventEmitter();\n    this.barsForDataLabels = [];\n    this.barOrientation = BarOrientation;\n    this.isSSR = false;\n  }\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    this.updateTooltipSettings();\n    let width;\n    if (this.series.length) {\n      width = this.xScale.bandwidth();\n    }\n    width = Math.round(width);\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type = D0Types.positive;\n    let total;\n    if (this.type === BarChartType.Normalized) {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n      const bar = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        width,\n        formattedLabel,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n      if (this.type === BarChartType.Standard) {\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n        bar.x = this.xScale(label);\n        if (value < 0) {\n          bar.y = this.yScale(0);\n        } else {\n          bar.y = this.yScale(value);\n        }\n      } else if (this.type === BarChartType.Stacked) {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === BarChartType.Normalized) {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n        if (total > 0) {\n          offset0 = offset0 * 100 / total;\n          offset1 = offset1 * 100 / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n      if (this.colors.scaleType === ScaleType.Ordinal) {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === BarChartType.Standard) {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName !== null && this.seriesName !== undefined) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n      bar.tooltipText = this.tooltipDisabled ? undefined : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n      return bar;\n    });\n    this.updateDataLabels();\n  }\n  updateDataLabels() {\n    if (this.type === BarChartType.Stacked) {\n      this.barsForDataLabels = [];\n      const section = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => d > 0 ? sum + d : sum, 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => d < 0 ? sum + d : sum, 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      if (section.total > 0) {\n        section.height = this.yScale(totalPositive);\n      } else {\n        section.height = this.yScale(totalNegative);\n      }\n      section.width = this.xScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section = {};\n        section.series = this.seriesName ?? d.label;\n        section.total = d.value;\n        section.x = this.xScale(d.label);\n        section.y = this.yScale(0);\n        section.height = this.yScale(section.total) - this.yScale(0);\n        section.width = this.xScale.bandwidth();\n        return section;\n      });\n    }\n  }\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n    this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n  }\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(active => {\n      return entry.name === active.name && entry.value === active.value;\n    });\n    return item !== undefined;\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  getLabel(dataItem) {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n  trackBy(index, bar) {\n    return bar.label;\n  }\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n}\nSeriesVerticalComponent.ɵfac = function SeriesVerticalComponent_Factory(t) {\n  return new (t || SeriesVerticalComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nSeriesVerticalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SeriesVerticalComponent,\n  selectors: [[\"g\", \"ngx-charts-series-vertical\", \"\"]],\n  inputs: {\n    dims: \"dims\",\n    type: \"type\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    seriesName: \"seriesName\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    roundEdges: \"roundEdges\",\n    animations: \"animations\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dataLabelHeightChanged: \"dataLabelHeightChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c29,\n  decls: 3,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"ariaLabel\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"animations\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"ariaLabel\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"animations\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\"]],\n  template: function SeriesVerticalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, SeriesVerticalComponent__svg_g_0_Template, 2, 2, \"g\", 0);\n      i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_1_Template, 2, 2, \"g\", 0);\n      i0.ɵɵtemplate(2, SeriesVerticalComponent__svg_g_2_Template, 2, 2, \"g\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showDataLabel);\n    }\n  },\n  dependencies: [BarComponent, BarLabelComponent, i2.NgIf, i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SeriesVerticalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-series-vertical]',\n      template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [@animationState]=\"'active'\"\n        [@.disabled]=\"!animations\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    dims: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    seriesName: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dataLabelHeightChanged: [{\n      type: Output\n    }]\n  });\n})();\nclass BarVerticalComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n  }\n  update() {\n    super.update();\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n  getXScale() {\n    this.xDomain = this.getXDomain();\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n  }\n  getYScale() {\n    this.yDomain = this.getYDomain();\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  getXDomain() {\n    return this.results.map(d => d.label);\n  }\n  getYDomain() {\n    const values = this.results.map(d => d.value);\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      min = Math.min(min, ...this.yAxisTicks);\n    }\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      max = Math.max(max, ...this.yAxisTicks);\n    }\n    return [min, max];\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  setColors() {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.xDomain;\n    } else {\n      domain = this.yDomain;\n    }\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n  onDataLabelMaxHeightChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n}\nBarVerticalComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVerticalComponent_BaseFactory;\n  return function BarVerticalComponent_Factory(t) {\n    return (ɵBarVerticalComponent_BaseFactory || (ɵBarVerticalComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVerticalComponent)))(t || BarVerticalComponent);\n  };\n}();\nBarVerticalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVerticalComponent,\n  selectors: [[\"ngx-charts-bar-vertical\"]],\n  contentQueries: function BarVerticalComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    yScaleMax: \"yScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 25,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-vertical\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"activeEntries\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"activate\", \"deactivate\", \"select\", \"dataLabelHeightChanged\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"]],\n  template: function BarVerticalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarVerticalComponent__svg_g_2_Template, 1, 12, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVerticalComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(4, \"g\", 4);\n      i0.ɵɵlistener(\"activate\", function BarVerticalComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function BarVerticalComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      })(\"select\", function BarVerticalComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"dataLabelHeightChanged\", function BarVerticalComponent_Template__svg_g_dataLabelHeightChanged_4_listener($event) {\n        return ctx.onDataLabelMaxHeightChanged($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(22, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"series\", ctx.results)(\"dims\", ctx.dims)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"showDataLabel\", ctx.showDataLabel)(\"dataLabelFormatting\", ctx.dataLabelFormatting)(\"activeEntries\", ctx.activeEntries)(\"roundEdges\", ctx.roundEdges)(\"animations\", ctx.animations)(\"noBarWhenZero\", ctx.noBarWhenZero);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesVerticalComponent, i2.NgIf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVerticalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\nclass BarVertical2DComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.scaleType = ScaleType.Ordinal;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.groupPadding = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n    this.isSSR = false;\n    this.barOrientation = BarOrientation;\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n  update() {\n    super.update();\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n  getGroupScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).paddingOuter(spacing / 2).domain(this.groupDomain);\n  }\n  getInnerScale() {\n    const width = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n  }\n  getValueScale() {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n    return domain;\n  }\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n    return domain;\n  }\n  getValueDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n  groupTransform(group) {\n    return `translate(${this.groupScale(group.label)}, 0)`;\n  }\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n    this.select.emit(data);\n  }\n  setColors() {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n}\nBarVertical2DComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVertical2DComponent_BaseFactory;\n  return function BarVertical2DComponent_Factory(t) {\n    return (ɵBarVertical2DComponent_BaseFactory || (ɵBarVertical2DComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVertical2DComponent)))(t || BarVertical2DComponent);\n  };\n}();\nBarVertical2DComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVertical2DComponent,\n  selectors: [[\"ngx-charts-bar-vertical-2d\"]],\n  contentQueries: function BarVertical2DComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    scaleType: \"scaleType\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    groupPadding: \"groupPadding\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    yScaleMax: \"yScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 7,\n  vars: 18,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-grid-panel-series\", \"\", 3, \"xScale\", \"yScale\", \"data\", \"dims\", \"orient\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-series-vertical\", \"\", 3, \"activeEntries\", \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-vertical\", \"\", 3, \"activeEntries\", \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"]],\n  template: function BarVertical2DComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelement(2, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVertical2DComponent__svg_g_3_Template, 1, 11, \"g\", 3);\n      i0.ɵɵtemplate(4, BarVertical2DComponent__svg_g_4_Template, 1, 10, \"g\", 4);\n      i0.ɵɵtemplate(5, BarVertical2DComponent__svg_g_5_Template, 2, 2, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, BarVertical2DComponent__svg_g_6_Template, 2, 2, \"g\", 5);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(15, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.groupScale)(\"yScale\", ctx.valueScale)(\"data\", ctx.results)(\"dims\", ctx.dims)(\"orient\", ctx.barOrientation.Vertical);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, GridPanelSeriesComponent, XAxisComponent, YAxisComponent, SeriesVerticalComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVertical2DComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-2d',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            ngx-charts-series-vertical\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n            [activeEntries]=\"activeEntries\"\n            [xScale]=\"innerScale\"\n            [yScale]=\"valueScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    groupPadding: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\nclass BarVerticalNormalizedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.valueDomain = [0, 100];\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.isSSR = false;\n    this.barChartType = BarChartType;\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n    return domain;\n  }\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n    return domain;\n  }\n  getXScale() {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n  getYScale() {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name)}, 0)`;\n  }\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n    this.select.emit(data);\n  }\n  setColors() {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n}\nBarVerticalNormalizedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVerticalNormalizedComponent_BaseFactory;\n  return function BarVerticalNormalizedComponent_Factory(t) {\n    return (ɵBarVerticalNormalizedComponent_BaseFactory || (ɵBarVerticalNormalizedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVerticalNormalizedComponent)))(t || BarVerticalNormalizedComponent);\n  };\n}();\nBarVerticalNormalizedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVerticalNormalizedComponent,\n  selectors: [[\"ngx-charts-bar-vertical-normalized\"]],\n  contentQueries: function BarVerticalNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-vertical\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BarVerticalNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarVerticalNormalizedComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVerticalNormalizedComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵtemplate(4, BarVerticalNormalizedComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(5, BarVerticalNormalizedComponent__svg_g_5_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesVerticalComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVerticalNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-normalized',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\nclass BarVerticalStackedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n    this.isSSR = false;\n    this.barChartType = BarChartType;\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n  update() {\n    super.update();\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n    return domain;\n  }\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n    return domain;\n  }\n  getValueDomain() {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n  getXScale() {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n  getYScale() {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\n  }\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n    this.select.emit(data);\n  }\n  setColors() {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n}\nBarVerticalStackedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVerticalStackedComponent_BaseFactory;\n  return function BarVerticalStackedComponent_Factory(t) {\n    return (ɵBarVerticalStackedComponent_BaseFactory || (ɵBarVerticalStackedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVerticalStackedComponent)))(t || BarVerticalStackedComponent);\n  };\n}();\nBarVerticalStackedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVerticalStackedComponent,\n  selectors: [[\"ngx-charts-bar-vertical-stacked\"]],\n  contentQueries: function BarVerticalStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    yScaleMax: \"yScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-vertical\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"]],\n  template: function BarVerticalStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarVerticalStackedComponent__svg_g_2_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVerticalStackedComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵtemplate(4, BarVerticalStackedComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, BarVerticalStackedComponent__svg_g_5_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesVerticalComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVerticalStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-stacked',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\nclass BarChartModule {}\nBarChartModule.ɵfac = function BarChartModule_Factory(t) {\n  return new (t || BarChartModule)();\n};\nBarChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BarChartModule\n});\nBarChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent],\n      exports: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent]\n    }]\n  }], null, null);\n})();\nconst cloneDeep = rfdc();\nclass BoxComponent {\n  constructor(element, cd) {\n    this.cd = cd;\n    this.roundEdges = true;\n    this.gradient = false;\n    this.offset = 0;\n    this.isActive = false;\n    this.animations = true;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.BarOrientation = BarOrientation;\n    this.initialized = false;\n    this.hasGradient = false;\n    this.hideBar = false;\n    this.nativeElm = element.nativeElement;\n  }\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      this.loadAnimation();\n      this.initialized = true;\n    } else {\n      this.update();\n    }\n  }\n  update() {\n    this.boxStrokeWidth = Math.max(this.strokeWidth, 1);\n    this.whiskerStrokeWidth = Math.max(this.strokeWidth / 2, 1);\n    this.medianLineWidth = 1.5 * this.strokeWidth;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n    if (this.gradient) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n    this.updateLineEl();\n    this.updatePathEl();\n    this.checkToHideBar();\n    this.maskLineId = 'mask' + id().toString();\n    this.maskLine = `url(#${this.maskLineId})`;\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n  loadAnimation() {\n    this.boxPath = this.oldPath = this.getStartingPath();\n    this.oldLineCoordinates = this.getStartingLineCoordinates();\n    setTimeout(this.update.bind(this), 100);\n  }\n  updatePathEl() {\n    const nodeBar = select(this.nativeElm).selectAll('.bar');\n    const path = this.getPath();\n    if (this.animations) {\n      nodeBar.attr('d', this.oldPath).transition().ease(easeSinInOut).duration(500).attrTween('d', this.pathTween(path, 4));\n    } else {\n      nodeBar.attr('d', path);\n    }\n    this.oldPath = path;\n  }\n  updateLineEl() {\n    const lineEl = select(this.nativeElm).selectAll('.bar-line');\n    const lineCoordinates = this.lineCoordinates;\n    const oldLineCoordinates = this.oldLineCoordinates;\n    if (this.animations) {\n      lineEl.attr('x1', (_, index) => oldLineCoordinates[index].v1.x).attr('y1', (_, index) => oldLineCoordinates[index].v1.y).attr('x2', (_, index) => oldLineCoordinates[index].v2.x).attr('y2', (_, index) => oldLineCoordinates[index].v2.y).transition().ease(easeSinInOut).duration(500).attr('x1', (_, index) => lineCoordinates[index].v1.x).attr('y1', (_, index) => lineCoordinates[index].v1.y).attr('x2', (_, index) => lineCoordinates[index].v2.x).attr('y2', (_, index) => lineCoordinates[index].v2.y);\n    } else {\n      lineEl.attr('x1', (_, index) => lineCoordinates[index].v1.x).attr('y1', (_, index) => lineCoordinates[index].v1.y).attr('x2', (_, index) => lineCoordinates[index].v2.x).attr('y2', (_, index) => lineCoordinates[index].v2.y);\n    }\n    this.oldLineCoordinates = [...lineCoordinates];\n  }\n  /**\n   * See [D3 Selections](https://www.d3indepth.com/selections/)\n   * @param d The joined data.\n   * @param index The index of the element within the selection\n   * @param node The node element (Line).\n   */\n  lineTween(attr, d, index, node) {\n    const nodeLineEl = node[index];\n    return nodeLineEl[attr].baseVal.value;\n  }\n  // TODO: Refactor into another .ts file if https://github.com/swimlane/ngx-charts/pull/1179 gets merged.\n  pathTween(d1, precision) {\n    return function () {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const path0 = this;\n      const path1 = this.cloneNode();\n      path1.setAttribute('d', d1);\n      const n0 = path0?.getTotalLength();\n      const n1 = path1?.getTotalLength();\n      // Uniform sampling of distance based on specified precision.\n      const distances = [0];\n      let i = 0;\n      const dt = precision / Math.max(n0, n1);\n      while (i < 1) {\n        distances.push(i);\n        i += dt;\n      }\n      distances.push(1);\n      // Compute point-interpolators at each distance.\n      const points = distances.map(t => {\n        const p0 = path0.getPointAtLength(t * n0);\n        const p1 = path1.getPointAtLength(t * n1);\n        return interpolate([p0.x, p0.y], [p1.x, p1.y]);\n      });\n      // 't': T is the fraction of time (between 0 and 1) since the transition began.\n      return t => {\n        return t < 1 ? 'M' + points.map(p => p(t)).join('L') : d1;\n      };\n    };\n  }\n  getStartingPath() {\n    if (!this.animations) {\n      return this.getPath();\n    }\n    const radius = this.roundEdges ? 1 : 0;\n    const {\n      x,\n      y\n    } = this.lineCoordinates[2].v1;\n    return roundedRect(x - this.width, y - 1, this.width, 2, radius, this.edges);\n  }\n  getPath() {\n    const radius = this.getRadius();\n    let path = '';\n    path = roundedRect(this.x, this.y, this.width, this.height, Math.min(this.height, radius), this.edges);\n    return path;\n  }\n  getStartingLineCoordinates() {\n    if (!this.animations) {\n      return [...this.lineCoordinates];\n    }\n    const lineCoordinates = cloneDeep(this.lineCoordinates);\n    lineCoordinates[1].v1.y = lineCoordinates[1].v2.y = lineCoordinates[3].v1.y = lineCoordinates[3].v2.y = lineCoordinates[0].v1.y = lineCoordinates[0].v2.y = lineCoordinates[2].v1.y;\n    return lineCoordinates;\n  }\n  getRadius() {\n    let radius = 0;\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n    return radius;\n  }\n  getGradient() {\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.getStartOpacity()\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n  getStartOpacity() {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n  get edges() {\n    let edges = [false, false, false, false];\n    if (this.roundEdges) {\n      edges = [true, true, true, true];\n    }\n    return edges;\n  }\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n  checkToHideBar() {\n    this.hideBar = this.noBarWhenZero && this.height === 0;\n  }\n}\nBoxComponent.ɵfac = function BoxComponent_Factory(t) {\n  return new (t || BoxComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\nBoxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoxComponent,\n  selectors: [[\"g\", \"ngx-charts-box\", \"\"]],\n  hostBindings: function BoxComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function BoxComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function BoxComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    strokeColor: \"strokeColor\",\n    strokeWidth: \"strokeWidth\",\n    fill: \"fill\",\n    data: \"data\",\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\",\n    lineCoordinates: \"lineCoordinates\",\n    roundEdges: \"roundEdges\",\n    gradient: \"gradient\",\n    gradientStops: \"gradientStops\",\n    offset: \"offset\",\n    isActive: \"isActive\",\n    animations: \"animations\",\n    ariaLabel: \"ariaLabel\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c30,\n  decls: 9,\n  vars: 13,\n  consts: [[\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\", 4, \"ngIf\"], [\"height\", \"100%\", \"width\", \"100%\", \"fill\", \"white\", \"fill-opacity\", \"1\"], [\"fill\", \"black\", \"fill-opacity\", \"1\", 1, \"bar\"], [\"role\", \"img\", \"tabIndex\", \"-1\", 1, \"bar\", 3, \"click\"], [\"class\", \"bar-line\", \"fill\", \"none\", 3, \"hidden\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [\"fill\", \"none\", 1, \"bar-line\"]],\n  template: function BoxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"defs\");\n      i0.ɵɵtemplate(1, BoxComponent__svg_g_1_Template, 1, 3, \"g\", 0);\n      i0.ɵɵelementStart(2, \"mask\")(3, \"g\");\n      i0.ɵɵelement(4, \"rect\", 1)(5, \"path\", 2);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"g\")(7, \"path\", 3);\n      i0.ɵɵlistener(\"click\", function BoxComponent_Template__svg_path_click_7_listener() {\n        return ctx.select.emit(ctx.data);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, BoxComponent__svg_line_8_Template, 1, 9, \"line\", 4);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"id\", ctx.maskLineId);\n      i0.ɵɵadvance(3);\n      i0.ɵɵattribute(\"d\", ctx.boxPath);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"active\", ctx.isActive)(\"hidden\", ctx.hideBar);\n      i0.ɵɵattribute(\"d\", ctx.boxPath)(\"stroke\", ctx.strokeColor)(\"stroke-width\", ctx.boxStrokeWidth)(\"aria-label\", ctx.ariaLabel)(\"fill\", ctx.hasGradient ? ctx.gradientFill : ctx.fill);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.lineCoordinates);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, i2.NgIf, i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-box]',\n      template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    strokeColor: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    lineCoordinates: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    gradientStops: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\nclass BoxSeriesComponent {\n  constructor() {\n    this.animations = true;\n    this.tooltipDisabled = false;\n    this.gradient = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  update() {\n    this.updateTooltipSettings();\n    const width = this.series && this.series.series.length ? Math.round(this.xScale.bandwidth()) : null;\n    const seriesName = this.series.name;\n    // Calculate Quantile and Whiskers for each box serie.\n    this.counts = this.series.series;\n    const mappedCounts = this.counts.map(serie => Number(serie.value));\n    this.whiskers = [min(mappedCounts), max(mappedCounts)];\n    // We get the group count and must sort it in order to retrieve quantiles.\n    const groupCounts = this.counts.map(item => item.value).sort((a, b) => Number(a) - Number(b));\n    this.quartiles = this.getBoxQuantiles(groupCounts);\n    this.lineCoordinates = this.getLinesCoordinates(seriesName.toString(), this.whiskers, this.quartiles, width);\n    const value = this.quartiles[1];\n    const formattedLabel = formatLabel(seriesName);\n    const box = {\n      value,\n      data: this.counts,\n      label: seriesName,\n      formattedLabel,\n      width,\n      height: 0,\n      x: 0,\n      y: 0,\n      roundEdges: this.roundEdges,\n      quartiles: this.quartiles,\n      lineCoordinates: this.lineCoordinates\n    };\n    box.height = Math.abs(this.yScale(this.quartiles[0]) - this.yScale(this.quartiles[2]));\n    box.x = this.xScale(seriesName.toString());\n    box.y = this.yScale(this.quartiles[2]);\n    box.ariaLabel = formattedLabel + ' - Median: ' + value.toLocaleString();\n    if (this.colors.scaleType === ScaleType.Ordinal) {\n      box.color = this.colors.getColor(seriesName);\n    } else {\n      box.color = this.colors.getColor(this.quartiles[1]);\n      box.gradientStops = this.colors.getLinearGradientStops(this.quartiles[0], this.quartiles[2]);\n    }\n    const tooltipLabel = formattedLabel;\n    const formattedTooltipLabel = `\n    <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n    <span class=\"tooltip-val\">\n      • Q1: ${this.quartiles[0]} • Q2: ${this.quartiles[1]} • Q3: ${this.quartiles[2]}<br>\n      • Min: ${this.whiskers[0]} • Max: ${this.whiskers[1]}\n    </span>`;\n    box.tooltipText = this.tooltipDisabled ? undefined : formattedTooltipLabel;\n    this.tooltipTitle = this.tooltipDisabled ? undefined : box.tooltipText;\n    this.box = box;\n  }\n  getBoxQuantiles(inputData) {\n    return [quantile(inputData, 0.25), quantile(inputData, 0.5), quantile(inputData, 0.75)];\n  }\n  getLinesCoordinates(seriesName, whiskers, quartiles, barWidth) {\n    // The X value is not being centered, so had to sum half the width to align it.\n    const commonX = this.xScale(seriesName);\n    const offsetX = commonX + barWidth / 2;\n    const medianLineWidth = Math.max(barWidth + 4 * this.strokeWidth, 1);\n    const whiskerLineWidth = Math.max(barWidth / 3, 1);\n    const whiskerZero = this.yScale(whiskers[0]);\n    const whiskerOne = this.yScale(whiskers[1]);\n    const median = this.yScale(quartiles[1]);\n    const topLine = {\n      v1: {\n        x: offsetX + whiskerLineWidth / 2,\n        y: whiskerZero\n      },\n      v2: {\n        x: offsetX - whiskerLineWidth / 2,\n        y: whiskerZero\n      }\n    };\n    const medianLine = {\n      v1: {\n        x: offsetX + medianLineWidth / 2,\n        y: median\n      },\n      v2: {\n        x: offsetX - medianLineWidth / 2,\n        y: median\n      }\n    };\n    const bottomLine = {\n      v1: {\n        x: offsetX + whiskerLineWidth / 2,\n        y: whiskerOne\n      },\n      v2: {\n        x: offsetX - whiskerLineWidth / 2,\n        y: whiskerOne\n      }\n    };\n    const verticalLine = {\n      v1: {\n        x: offsetX,\n        y: whiskerZero\n      },\n      v2: {\n        x: offsetX,\n        y: whiskerOne\n      }\n    };\n    return [verticalLine, topLine, medianLine, bottomLine];\n  }\n  updateTooltipSettings() {\n    if (this.tooltipDisabled) {\n      this.tooltipPlacement = undefined;\n      this.tooltipType = undefined;\n    } else {\n      if (!this.tooltipPlacement) {\n        this.tooltipPlacement = PlacementTypes.Top;\n      }\n      if (!this.tooltipType) {\n        this.tooltipType = StyleTypes.tooltip;\n      }\n    }\n  }\n}\nBoxSeriesComponent.ɵfac = function BoxSeriesComponent_Factory(t) {\n  return new (t || BoxSeriesComponent)();\n};\nBoxSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoxSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-box-series\", \"\"]],\n  inputs: {\n    dims: \"dims\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    animations: \"animations\",\n    strokeColor: \"strokeColor\",\n    strokeWidth: \"strokeWidth\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    tooltipPlacement: \"tooltipPlacement\",\n    tooltipType: \"tooltipType\",\n    roundEdges: \"roundEdges\",\n    gradient: \"gradient\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c31,\n  decls: 1,\n  vars: 22,\n  consts: [[\"ngx-charts-box\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"roundEdges\", \"fill\", \"gradientStops\", \"strokeColor\", \"strokeWidth\", \"data\", \"lineCoordinates\", \"gradient\", \"ariaLabel\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"animations\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BoxSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵlistener(\"select\", function BoxSeriesComponent_Template__svg_g_select_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function BoxSeriesComponent_Template__svg_g_activate_0_listener($event) {\n        return ctx.activate.emit($event);\n      })(\"deactivate\", function BoxSeriesComponent_Template__svg_g_deactivate_0_listener($event) {\n        return ctx.deactivate.emit($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"@animationState\", \"active\")(\"@.disabled\", !ctx.animations)(\"width\", ctx.box.width)(\"height\", ctx.box.height)(\"x\", ctx.box.x)(\"y\", ctx.box.y)(\"roundEdges\", ctx.box.roundEdges)(\"fill\", ctx.box.color)(\"gradientStops\", ctx.box.gradientStops)(\"strokeColor\", ctx.strokeColor)(\"strokeWidth\", ctx.strokeWidth)(\"data\", ctx.box.data)(\"lineCoordinates\", ctx.box.lineCoordinates)(\"gradient\", ctx.gradient)(\"ariaLabel\", ctx.box.ariaLabel)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", ctx.tooltipPlacement)(\"tooltipType\", ctx.tooltipType)(\"tooltipTitle\", ctx.tooltipTitle)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipContext\", ctx.box.data)(\"animations\", ctx.animations);\n    }\n  },\n  dependencies: [BoxComponent, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-box-series]',\n      template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], null, {\n    dims: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    tooltipPlacement: [{\n      type: Input\n    }],\n    tooltipType: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\nclass BoxChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    /** Show or hide the legend. */\n    this.legend = false;\n    this.legendPosition = LegendPosition.Right;\n    this.legendTitle = 'Legend';\n    this.showGridLines = true;\n    this.xAxis = true;\n    this.yAxis = true;\n    this.showXAxisLabel = true;\n    this.showYAxisLabel = true;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.strokeColor = '#FFFFFF';\n    this.strokeWidth = 2;\n    this.tooltipDisabled = false;\n    this.wrapTicks = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    /** Chart Margins (For each side, counterclock wise). */\n    this.margin = [10, 20, 10, 20];\n    /** Chart X axis dimension. */\n    this.xAxisHeight = 0;\n    /** Chart Y axis dimension. */\n    this.yAxisWidth = 0;\n  }\n  trackBy(index, item) {\n    return item.name;\n  }\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n  setColors() {\n    let domain = [];\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n  setScales() {\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n  }\n  getXScale(domain, width) {\n    const scale = scaleBand().domain(domain.map(d => d.toString())).rangeRound([0, width]).padding(0.5);\n    return scale;\n  }\n  getYScale(domain, height) {\n    const scale = scaleLinear().domain(domain).range([height, 0]);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  getUniqueBoxChartXDomainValues(results) {\n    const valueSet = new Set();\n    for (const result of results) {\n      valueSet.add(result.name);\n    }\n    return Array.from(valueSet);\n  }\n  getXDomain() {\n    let domain = [];\n    const values = this.getUniqueBoxChartXDomainValues(this.results);\n    let min;\n    let max;\n    if (typeof values[0] === 'string') {\n      domain = values.map(val => val.toString());\n    } else if (typeof values[0] === 'number') {\n      const mappedValues = values.map(v => Number(v));\n      min = Math.min(...mappedValues);\n      max = Math.max(...mappedValues);\n      domain = [min, max];\n    } else {\n      const mappedValues = values.map(v => Number(new Date(v)));\n      min = Math.min(...mappedValues);\n      max = Math.max(...mappedValues);\n      domain = [new Date(min), new Date(max)];\n    }\n    return domain;\n  }\n  getYDomain() {\n    const domain = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n      }\n    }\n    const values = [...domain];\n    const mappedValues = values.map(v => Number(v));\n    const min = Math.min(...mappedValues);\n    const max = Math.max(...mappedValues);\n    return [min, max];\n  }\n  getSeriesDomain() {\n    return this.results.map(d => `${d.name}`);\n  }\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  onActivate(data) {\n    this.activate.emit(data);\n  }\n  onDeactivate(data) {\n    this.deactivate.emit(data);\n  }\n  getLegendOptions() {\n    const legendOpts = {\n      scaleType: this.schemeType,\n      colors: this.colors,\n      domain: [],\n      position: this.legendPosition,\n      title: this.legendTitle\n    };\n    if (this.schemeType === ScaleType.Ordinal) {\n      legendOpts.domain = this.xDomain;\n      legendOpts.colors = this.colors;\n    } else {\n      legendOpts.domain = this.yDomain;\n      legendOpts.colors = this.colors.scale;\n    }\n    return legendOpts;\n  }\n}\nBoxChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBoxChartComponent_BaseFactory;\n  return function BoxChartComponent_Factory(t) {\n    return (ɵBoxChartComponent_BaseFactory || (ɵBoxChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BoxChartComponent)))(t || BoxChartComponent);\n  };\n}();\nBoxChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoxChartComponent,\n  selectors: [[\"ngx-charts-box-chart\"]],\n  contentQueries: function BoxChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendPosition: \"legendPosition\",\n    legendTitle: \"legendTitle\",\n    legendOptionsConfig: \"legendOptionsConfig\",\n    showGridLines: \"showGridLines\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    roundDomains: \"roundDomains\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    roundEdges: \"roundEdges\",\n    strokeColor: \"strokeColor\",\n    strokeWidth: \"strokeWidth\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 23,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"box-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"dims\", \"yScale\", \"showLabel\", \"labelText\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-box-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"roundEdges\", \"strokeColor\", \"strokeWidth\", \"tooltipDisabled\", \"tooltipTemplate\", \"series\", \"dims\", \"animations\", \"gradient\", \"activate\", \"deactivate\", \"select\"]],\n  template: function BoxChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BoxChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BoxChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function BoxChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1)(2, \"g\", 2);\n      i0.ɵɵlistener(\"dimensionsChanged\", function BoxChartComponent_Template__svg_g_dimensionsChanged_2_listener($event) {\n        return ctx.updateXAxisHeight($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"g\", 3);\n      i0.ɵɵlistener(\"dimensionsChanged\", function BoxChartComponent_Template__svg_g_dimensionsChanged_3_listener($event) {\n        return ctx.updateYAxisWidth($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\");\n      i0.ɵɵtemplate(5, BoxChartComponent__svg_g_5_Template, 2, 12, \"g\", 4);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(20, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"showGridLines\", ctx.showGridLines)(\"dims\", ctx.dims)(\"xScale\", ctx.xScale)(\"showLabel\", ctx.showXAxisLabel)(\"labelText\", ctx.xAxisLabel)(\"wrapTicks\", ctx.wrapTicks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"showGridLines\", ctx.showGridLines)(\"dims\", ctx.dims)(\"yScale\", ctx.yScale)(\"showLabel\", ctx.showYAxisLabel)(\"labelText\", ctx.yAxisLabel)(\"wrapTicks\", ctx.wrapTicks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, BoxSeriesComponent, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-box-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendOptionsConfig: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate', {\n        static: false\n      }]\n    }]\n  });\n})();\nclass BoxChartModule {}\nBoxChartModule.ɵfac = function BoxChartModule_Factory(t) {\n  return new (t || BoxChartModule)();\n};\nBoxChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BoxChartModule\n});\nBoxChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent],\n      exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent]\n    }]\n  }], null, null);\n})();\nfunction getDomain(values, scaleType, autoScale, minVal, maxVal) {\n  let domain = [];\n  if (scaleType === ScaleType.Linear) {\n    values = values.map(v => Number(v));\n    if (!autoScale) {\n      values.push(0);\n    }\n  }\n  if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n    const min = minVal || minVal === 0 ? minVal : Math.min(...values);\n    const max = maxVal ? maxVal : Math.max(...values);\n    domain = [min, max];\n  } else {\n    domain = values;\n  }\n  return domain;\n}\nfunction getScale(domain, range, scaleType, roundDomains) {\n  switch (scaleType) {\n    case ScaleType.Time:\n      return scaleTime().range(range).domain(domain);\n    case ScaleType.Linear:\n      {\n        const scale = scaleLinear().range(range).domain(domain);\n        if (roundDomains) {\n          return scale.nice();\n        }\n        return scale;\n      }\n    case ScaleType.Ordinal:\n      return scalePoint().range([range[0], range[1]]).domain(domain.map(r => r.toString()));\n    default:\n      return undefined;\n  }\n}\nclass BubbleSeriesComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.tooltipDisabled = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n    this.isSSR = false;\n  }\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    this.circles = this.getCircles();\n  }\n  getCircles() {\n    const seriesName = this.data.name;\n    return this.data.series.map((d, i) => {\n      if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n        const y = d.y;\n        const x = d.x;\n        const r = d.r;\n        const radius = this.rScale(r || 1);\n        const tooltipLabel = formatLabel(d.name);\n        const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(x)) : this.xScale(x);\n        const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(y)) : this.yScale(y);\n        const color = this.colors.scaleType === ScaleType.Linear ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n        const isActive = !this.activeEntries.length ? true : this.isActive({\n          name: seriesName\n        });\n        const opacity = isActive ? 1 : 0.3;\n        const data = Object.assign({}, d, {\n          series: seriesName,\n          name: d.name,\n          value: d.y,\n          x: d.x,\n          radius: d.r\n        });\n        return {\n          data,\n          x,\n          y,\n          r,\n          classNames: [`circle-data-${i}`],\n          value: y,\n          label: x,\n          cx,\n          cy,\n          radius,\n          tooltipLabel,\n          color,\n          opacity,\n          seriesName,\n          isActive,\n          transform: `translate(${cx},${cy})`\n        };\n      }\n    }).filter(circle => circle !== undefined);\n  }\n  getTooltipText(circle) {\n    const hasRadius = typeof circle.r !== 'undefined';\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n    const x = formatLabel(circle.x);\n    const y = formatLabel(circle.y);\n    const name = hasSeriesName && hasTooltipLabel ? `${circle.seriesName} • ${circle.tooltipLabel}` : circle.seriesName + circle.tooltipLabel;\n    const tooltipTitle = hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n    return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n  isVisible(circle) {\n    if (this.activeEntries.length > 0) {\n      return this.isActive({\n        name: circle.seriesName\n      });\n    }\n    return circle.opacity !== 0;\n  }\n  activateCircle(circle) {\n    circle.barVisible = true;\n    this.activate.emit({\n      name: this.data.name\n    });\n  }\n  deactivateCircle(circle) {\n    circle.barVisible = false;\n    this.deactivate.emit({\n      name: this.data.name\n    });\n  }\n  trackBy(index, circle) {\n    return `${circle.data.series} ${circle.data.name}`;\n  }\n}\nBubbleSeriesComponent.ɵfac = function BubbleSeriesComponent_Factory(t) {\n  return new (t || BubbleSeriesComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nBubbleSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BubbleSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-bubble-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    rScale: \"rScale\",\n    xScaleType: \"xScaleType\",\n    yScaleType: \"yScaleType\",\n    colors: \"colors\",\n    visibleValue: \"visibleValue\",\n    activeEntries: \"activeEntries\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c32,\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-circle\", \"\", \"class\", \"circle\", \"ngx-tooltip\", \"\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"opacity\", \"active\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngIf\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BubbleSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, BubbleSeriesComponent__svg_g_0_Template, 4, 3, \"g\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.circles)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [CircleComponent, i2.NgForOf, i2.NgIf, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }), animate(250, style({\n      opacity: 1,\n      transform: 'scale(1)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BubbleSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bubble-series]',\n      template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          *ngIf=\"!isSSR\"\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n        <svg:g\n          *ngIf=\"isSSR\"\n          ngx-charts-circle\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }), animate(250, style({\n        opacity: 1,\n        transform: 'scale(1)'\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    rScale: [{\n      type: Input\n    }],\n    xScaleType: [{\n      type: Input\n    }],\n    yScaleType: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    visibleValue: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\nclass BubbleChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.showGridLines = true;\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.xAxis = true;\n    this.yAxis = true;\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.maxRadius = 10;\n    this.minRadius = 3;\n    this.schemeType = ScaleType.Ordinal;\n    this.tooltipDisabled = false;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.scaleType = ScaleType.Linear;\n    this.margin = [10, 20, 10, 20];\n    this.bubblePadding = [0, 0, 0, 0];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.activeEntries = [];\n    this.isSSR = false;\n  }\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.seriesDomain = this.results.map(d => d.name);\n    this.rDomain = this.getRDomain();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n    const colorDomain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.rDomain;\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n    this.data = this.results;\n    this.minRadius = Math.max(this.minRadius, 1);\n    this.maxRadius = Math.max(this.maxRadius, 1);\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n    this.bubblePadding = [0, 0, 0, 0];\n    this.setScales();\n    this.bubblePadding = this.getBubblePadding();\n    this.setScales();\n    this.legendOptions = this.getLegendOptions();\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n  hideCircles() {\n    this.deactivateAll();\n  }\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n    this.select.emit(data);\n  }\n  getBubblePadding() {\n    let yMin = 0;\n    let xMin = 0;\n    let yMax = this.dims.height;\n    let xMax = this.dims.width;\n    for (const s of this.data) {\n      for (const d of s.series) {\n        const r = this.rScale(d.r);\n        const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(d.x)) : this.xScale(d.x);\n        const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(d.y)) : this.yScale(d.y);\n        xMin = Math.max(r - cx, xMin);\n        yMin = Math.max(r - cy, yMin);\n        yMax = Math.max(cy + r, yMax);\n        xMax = Math.max(cx + r, xMax);\n      }\n    }\n    xMax = Math.max(xMax - this.dims.width, 0);\n    yMax = Math.max(yMax - this.dims.height, 0);\n    return [yMin, xMax, yMax, xMin];\n  }\n  setScales() {\n    let width = this.dims.width;\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n      width = width - this.bubblePadding[1];\n    }\n    let height = this.dims.height;\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n      height = height - this.bubblePadding[2];\n    }\n    this.xScale = this.getXScale(this.xDomain, width);\n    this.yScale = this.getYScale(this.yDomain, height);\n  }\n  getYScale(domain, height) {\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n  }\n  getXScale(domain, width) {\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n  }\n  getRScale(domain, range) {\n    const scale = scaleLinear().range(range).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      position: this.legendPosition,\n      title: undefined\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.rDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n  getXDomain() {\n    const values = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.x)) {\n          values.push(d.x);\n        }\n      }\n    }\n    this.xScaleType = getScaleType(values);\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n  }\n  getYDomain() {\n    const values = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.y)) {\n          values.push(d.y);\n        }\n      }\n    }\n    this.yScaleType = getScaleType(values);\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n  }\n  getRDomain() {\n    let min = Infinity;\n    let max = -Infinity;\n    for (const results of this.results) {\n      for (const d of results.series) {\n        const value = Number(d.r) || 1;\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    }\n    return [min, max];\n  }\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n    this.activeEntries = [];\n  }\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n}\nBubbleChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBubbleChartComponent_BaseFactory;\n  return function BubbleChartComponent_Factory(t) {\n    return (ɵBubbleChartComponent_BaseFactory || (ɵBubbleChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BubbleChartComponent)))(t || BubbleChartComponent);\n  };\n}();\nBubbleChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BubbleChartComponent,\n  selectors: [[\"ngx-charts-bubble-chart\"]],\n  contentQueries: function BubbleChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function BubbleChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function BubbleChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    showGridLines: \"showGridLines\",\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    maxRadius: \"maxRadius\",\n    minRadius: \"minRadius\",\n    autoScale: \"autoScale\",\n    schemeType: \"schemeType\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 10,\n  vars: 19,\n  consts: [[3, \"view\", \"showLegend\", \"activeEntries\", \"legendOptions\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bubble-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"x\", \"0\", \"y\", \"0\", 1, \"bubble-chart-area\", 2, \"fill\", \"rgb(255, 0, 0)\", \"opacity\", \"0\", \"cursor\", \"'auto'\", 3, \"mouseenter\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bubble-series\", \"\", 3, \"xScale\", \"yScale\", \"rScale\", \"xScaleType\", \"yScaleType\", \"xAxisLabel\", \"yAxisLabel\", \"colors\", \"data\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BubbleChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, BubbleChartComponent__svg_g_5_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(6, BubbleChartComponent__svg_g_6_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(7, \"rect\", 4);\n      i0.ɵɵlistener(\"mouseenter\", function BubbleChartComponent_Template__svg_rect_mouseenter_7_listener() {\n        return ctx.deactivateAll();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, BubbleChartComponent__svg_g_8_Template, 2, 3, \"g\", 5);\n      i0.ɵɵtemplate(9, BubbleChartComponent__svg_g_9_Template, 2, 3, \"g\", 5);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(16, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"activeEntries\", ctx.activeEntries)(\"legendOptions\", ctx.legendOptions)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width)(\"height\", ctx.dims.height);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, BubbleSeriesComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BubbleChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bubble-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g *ngIf=\"!isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    showGridLines: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    maxRadius: [{\n      type: Input\n    }],\n    minRadius: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\nclass BubbleChartModule {}\nBubbleChartModule.ɵfac = function BubbleChartModule_Factory(t) {\n  return new (t || BubbleChartModule)();\n};\nBubbleChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BubbleChartModule\n});\nBubbleChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BubbleChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BubbleChartComponent, BubbleSeriesComponent],\n      exports: [BubbleChartComponent, BubbleSeriesComponent]\n    }]\n  }], null, null);\n})();\nclass HeatMapCellComponent {\n  constructor(element) {\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.barOrientation = BarOrientation;\n    this.element = element.nativeElement;\n  }\n  ngOnChanges(changes) {\n    this.transform = `translate(${this.x} , ${this.y})`;\n    this.startOpacity = 0.3;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n    if (this.animations) {\n      this.loadAnimation();\n    }\n  }\n  getGradientStops() {\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.startOpacity\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n  loadAnimation() {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0);\n    this.animateToCurrentForm();\n  }\n  animateToCurrentForm() {\n    const node = select(this.element).select('.cell');\n    node.transition().duration(750).attr('opacity', 1);\n  }\n  onClick() {\n    this.select.emit(this.data);\n  }\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n}\nHeatMapCellComponent.ɵfac = function HeatMapCellComponent_Factory(t) {\n  return new (t || HeatMapCellComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nHeatMapCellComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HeatMapCellComponent,\n  selectors: [[\"g\", \"ngx-charts-heat-map-cell\", \"\"]],\n  hostBindings: function HeatMapCellComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function HeatMapCellComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function HeatMapCellComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    fill: \"fill\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    data: \"data\",\n    gradient: \"gradient\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c33,\n  decls: 3,\n  vars: 5,\n  consts: [[1, \"cell\"], [4, \"ngIf\"], [\"rx\", \"3\", 1, \"cell\", 3, \"click\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n  template: function HeatMapCellComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵtemplate(1, HeatMapCellComponent__svg_defs_1_Template, 2, 3, \"defs\", 1);\n      i0.ɵɵelementStart(2, \"rect\", 2);\n      i0.ɵɵlistener(\"click\", function HeatMapCellComponent_Template__svg_rect_click_2_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"fill\", ctx.gradient ? ctx.gradientUrl : ctx.fill)(\"width\", ctx.width)(\"height\", ctx.height);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatMapCellComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-heat-map-cell]',\n      template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    fill: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\nclass HeatCellSeriesComponent {\n  constructor() {\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n  ngOnInit() {\n    if (!this.tooltipText) {\n      this.tooltipText = this.getTooltipText;\n    }\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    this.cells = this.getCells();\n  }\n  getCells() {\n    const cells = [];\n    this.data.map(row => {\n      row.series.map(cell => {\n        const value = cell.value;\n        cell.series = row.name;\n        cells.push({\n          row,\n          cell,\n          x: this.xScale(row.name),\n          y: this.yScale(cell.name),\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: this.colors.getColor(value),\n          data: value,\n          label: formatLabel(cell.name),\n          series: row.name\n        });\n      });\n    });\n    return cells;\n  }\n  getTooltipText({\n    label,\n    data,\n    series\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n  }\n  trackBy(index, item) {\n    return item.label;\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n}\nHeatCellSeriesComponent.ɵfac = function HeatCellSeriesComponent_Factory(t) {\n  return new (t || HeatCellSeriesComponent)();\n};\nHeatCellSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HeatCellSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-heat-map-cell-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    colors: \"colors\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    gradient: \"gradient\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c34,\n  decls: 1,\n  vars: 2,\n  consts: [[\"ngx-charts-heat-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"fill\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-heat-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"fill\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function HeatCellSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, HeatCellSeriesComponent__svg_g_0_Template, 1, 18, \"g\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.cells)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [HeatMapCellComponent, i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatCellSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-heat-map-cell-series]',\n      template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\nclass HeatMapComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.innerPadding = 8;\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.tooltipDisabled = false;\n    this.activeEntries = [];\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.scaleType = ScaleType.Linear;\n  }\n  update() {\n    super.update();\n    this.formatDates();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.valueDomain = this.getValueDomain();\n    this.scaleType = getScaleType(this.valueDomain, false);\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.scaleType,\n      legendPosition: this.legendPosition\n    });\n    if (this.scaleType === ScaleType.Linear) {\n      let min = this.min;\n      let max = this.max;\n      if (!this.min) {\n        min = Math.min(0, ...this.valueDomain);\n      }\n      if (!this.max) {\n        max = Math.max(...this.valueDomain);\n      }\n      this.valueDomain = [min, max];\n    }\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.rects = this.getRects();\n  }\n  getXDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.name)) {\n        domain.push(group.name);\n      }\n    }\n    return domain;\n  }\n  getYDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.name)) {\n          domain.push(d.name);\n        }\n      }\n    }\n    return domain;\n  }\n  getValueDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n    return domain;\n  }\n  /**\n   * Converts the input to gap paddingInner in fraction\n   * Supports the following inputs:\n   *    Numbers: 8\n   *    Strings: \"8\", \"8px\", \"8%\"\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n   *\n   * @memberOf HeatMapComponent\n   */\n  getDimension(value, index = 0, N, L) {\n    if (typeof value === 'string') {\n      value = value.replace('[', '').replace(']', '').replace('px', '')\n      // tslint:disable-next-line: quotemark\n      .replace(\"'\", '');\n      if (value.includes(',')) {\n        value = value.split(',');\n      }\n    }\n    if (Array.isArray(value) && typeof index === 'number') {\n      return this.getDimension(value[index], null, N, L);\n    }\n    if (typeof value === 'string' && value.includes('%')) {\n      return +value.replace('%', '') / 100;\n    }\n    return N / (L / +value + 1);\n  }\n  getXScale() {\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n    return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n  }\n  getYScale() {\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n    return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n  }\n  getRects() {\n    const rects = [];\n    this.xDomain.map(xVal => {\n      this.yDomain.map(yVal => {\n        rects.push({\n          x: this.xScale(xVal),\n          y: this.yScale(yVal),\n          rx: 3,\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: 'rgba(200,200,200,0.03)'\n        });\n      });\n    });\n    return rects;\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n  }\n  getLegendOptions() {\n    return {\n      scaleType: this.scaleType,\n      domain: this.valueDomain,\n      colors: this.scaleType === ScaleType.Ordinal ? this.colors : this.colors.scale,\n      title: this.scaleType === ScaleType.Ordinal ? this.legendTitle : undefined,\n      position: this.legendPosition\n    };\n  }\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n}\nHeatMapComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵHeatMapComponent_BaseFactory;\n  return function HeatMapComponent_Factory(t) {\n    return (ɵHeatMapComponent_BaseFactory || (ɵHeatMapComponent_BaseFactory = i0.ɵɵgetInheritedFactory(HeatMapComponent)))(t || HeatMapComponent);\n  };\n}();\nHeatMapComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HeatMapComponent,\n  selectors: [[\"ngx-charts-heat-map\"]],\n  contentQueries: function HeatMapComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    gradient: \"gradient\",\n    innerPadding: \"innerPadding\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    min: \"min\",\n    max: \"max\",\n    activeEntries: \"activeEntries\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"animations\", \"legendOptions\", \"legendLabelClick\"], [1, \"heat-map\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-heat-map-cell-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"]],\n  template: function HeatMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function HeatMapComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, HeatMapComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, HeatMapComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, HeatMapComponent__svg_rect_4_Template, 1, 6, \"rect\", 4);\n      i0.ɵɵelementStart(5, \"g\", 5);\n      i0.ɵɵlistener(\"select\", function HeatMapComponent_Template__svg_g_select_5_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function HeatMapComponent_Template__svg_g_activate_5_listener($event) {\n        return ctx.onActivate($event, undefined);\n      })(\"deactivate\", function HeatMapComponent_Template__svg_g_deactivate_5_listener($event) {\n        return ctx.onDeactivate($event, undefined);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"animations\", ctx.animations)(\"legendOptions\", ctx.legendOptions);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.rects);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"data\", ctx.results)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, HeatCellSeriesComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatMapComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-heat-map',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\nclass HeatMapModule {}\nHeatMapModule.ɵfac = function HeatMapModule_Factory(t) {\n  return new (t || HeatMapModule)();\n};\nHeatMapModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: HeatMapModule\n});\nHeatMapModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatMapModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n      exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n    }]\n  }], null, null);\n})();\nclass LineComponent {\n  constructor(element, platformId) {\n    this.element = element;\n    this.platformId = platformId;\n    this.fill = 'none';\n    this.animations = true;\n    // @Output() select = new EventEmitter();\n    this.initialized = false;\n    this.isSSR = false;\n  }\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.initialPath = this.path;\n    } else {\n      this.updatePathEl();\n    }\n  }\n  updatePathEl() {\n    const node = select(this.element.nativeElement).select('.line');\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n}\nLineComponent.ɵfac = function LineComponent_Factory(t) {\n  return new (t || LineComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nLineComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LineComponent,\n  selectors: [[\"g\", \"ngx-charts-line\", \"\"]],\n  inputs: {\n    path: \"path\",\n    stroke: \"stroke\",\n    data: \"data\",\n    fill: \"fill\",\n    animations: \"animations\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c36,\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [\"stroke-width\", \"1.5px\", 1, \"line\"]],\n  template: function LineComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, LineComponent__svg_g_0_Template, 2, 4, \"g\", 0);\n      i0.ɵɵtemplate(1, LineComponent__svg_g_1_Template, 2, 3, \"g\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [i2.NgIf],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      strokeDasharray: 2000,\n      strokeDashoffset: 2000\n    }), animate(1000, style({\n      strokeDashoffset: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-line]',\n      template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:path\n        [@animationState]=\"'active'\"\n        class=\"line\"\n        [attr.d]=\"initialPath\"\n        [attr.fill]=\"fill\"\n        [attr.stroke]=\"stroke\"\n        stroke-width=\"1.5px\"\n      />\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:path class=\"line\" [attr.d]=\"initialPath\" [attr.fill]=\"fill\" [attr.stroke]=\"stroke\" stroke-width=\"1.5px\" />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        strokeDasharray: 2000,\n        strokeDashoffset: 2000\n      }), animate(1000, style({\n        strokeDashoffset: 0\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    path: [{\n      type: Input\n    }],\n    stroke: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }]\n  });\n})();\nclass LineSeriesComponent {\n  constructor() {\n    this.animations = true;\n    this.barOrientation = BarOrientation;\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    this.updateGradients();\n    const data = this.sortData(this.data.series);\n    const lineGen = this.getLineGenerator();\n    this.path = lineGen(data) || '';\n    const areaGen = this.getAreaGenerator();\n    this.areaPath = areaGen(data) || '';\n    if (this.hasRange) {\n      const range = this.getRangeGenerator();\n      this.outerPath = range(data) || '';\n    }\n    if (this.hasGradient) {\n      this.stroke = this.gradientUrl;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      if (max === min) {\n        this.stroke = this.colors.getColor(max);\n      }\n    } else {\n      this.stroke = this.colors.getColor(this.data.name);\n    }\n  }\n  getLineGenerator() {\n    return line().x(d => {\n      const label = d.name;\n      let value;\n      if (this.scaleType === ScaleType.Time) {\n        value = this.xScale(label);\n      } else if (this.scaleType === ScaleType.Linear) {\n        value = this.xScale(Number(label));\n      } else {\n        value = this.xScale(label);\n      }\n      return value;\n    }).y(d => this.yScale(d.value)).curve(this.curve);\n  }\n  getRangeGenerator() {\n    return area().x(d => {\n      const label = d.name;\n      let value;\n      if (this.scaleType === ScaleType.Time) {\n        value = this.xScale(label);\n      } else if (this.scaleType === ScaleType.Linear) {\n        value = this.xScale(Number(label));\n      } else {\n        value = this.xScale(label);\n      }\n      return value;\n    }).y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value)).y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value)).curve(this.curve);\n  }\n  getAreaGenerator() {\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n    return area().x(xProperty).y0(() => this.yScale.range()[0]).y1(d => this.yScale(d.value)).curve(this.curve);\n  }\n  sortData(data) {\n    if (this.scaleType === ScaleType.Linear) {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n    return data;\n  }\n  updateGradients() {\n    if (this.colors.scaleType === ScaleType.Linear) {\n      this.hasGradient = true;\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = `url(#${this.gradientId})`;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n      this.areaGradientStops = undefined;\n    }\n  }\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n  isInactive(entry) {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\nLineSeriesComponent.ɵfac = function LineSeriesComponent_Factory(t) {\n  return new (t || LineSeriesComponent)();\n};\nLineSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LineSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-line-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    hasRange: \"hasRange\",\n    animations: \"animations\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c37,\n  decls: 6,\n  vars: 22,\n  consts: [[\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\", 4, \"ngIf\"], [\"ngx-charts-area\", \"\", 1, \"line-highlight\", 3, \"data\", \"path\", \"fill\", \"opacity\", \"startOpacity\", \"gradient\", \"stops\", \"animations\"], [\"ngx-charts-line\", \"\", 1, \"line-series\", 3, \"data\", \"path\", \"stroke\", \"animations\"], [\"ngx-charts-area\", \"\", \"class\", \"line-series-range\", 3, \"data\", \"path\", \"fill\", \"active\", \"inactive\", \"opacity\", \"animations\", 4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [\"ngx-charts-area\", \"\", 1, \"line-series-range\", 3, \"data\", \"path\", \"fill\", \"opacity\", \"animations\"]],\n  template: function LineSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\")(1, \"defs\");\n      i0.ɵɵtemplate(2, LineSeriesComponent__svg_g_2_Template, 1, 3, \"g\", 0);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"g\", 1)(4, \"g\", 2);\n      i0.ɵɵtemplate(5, LineSeriesComponent__svg_g_5_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      i0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.areaPath)(\"fill\", ctx.hasGradient ? ctx.gradientUrl : ctx.colors.getColor(ctx.data.name))(\"opacity\", 0.25)(\"startOpacity\", 0)(\"gradient\", true)(\"stops\", ctx.areaGradientStops)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      i0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.path)(\"stroke\", ctx.stroke)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasRange);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, AreaComponent, LineComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-line-series]',\n      template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    hasRange: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }]\n  });\n})();\nclass LineChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.showRefLines = false;\n    this.showRefLabels = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n    this.isSSR = false;\n  }\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n    let min;\n    let max;\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n    return domain;\n  }\n  getYDomain() {\n    const domain = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n    return [min, max];\n  }\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n  getXScale(domain, width) {\n    let scale;\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime().range([0, width]).domain(domain);\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear().range([0, width]).domain(domain);\n      if (this.roundDomains) {\n        scale = scale.nice();\n      }\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n    }\n    return scale;\n  }\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n  setColors() {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n  onActivate(item) {\n    this.deactivateAll();\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = [item];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n    this.activeEntries = [];\n  }\n}\nLineChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵLineChartComponent_BaseFactory;\n  return function LineChartComponent_Factory(t) {\n    return (ɵLineChartComponent_BaseFactory || (ɵLineChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(LineChartComponent)))(t || LineChartComponent);\n  };\n}();\nLineChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LineChartComponent,\n  selectors: [[\"ngx-charts-line-chart\"]],\n  contentQueries: function LineChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function LineChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function LineChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    autoScale: \"autoScale\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showRefLines: \"showRefLines\",\n    referenceLines: \"referenceLines\",\n    showRefLabels: \"showRefLabels\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 12,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"line-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"scaleType\", \"legend\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-line-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"curve\", \"rangeFillOpacity\", \"hasRange\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"scaleType\", \"legend\", \"onDomainChange\"], [\"ngx-charts-line-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"curve\", \"hasRange\", \"animations\"]],\n  template: function LineChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function LineChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function LineChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function LineChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, LineChartComponent__svg_g_5_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(6, LineChartComponent__svg_g_6_Template, 1, 13, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, LineChartComponent__svg_g_8_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(9, LineChartComponent__svg_g_9_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(10, LineChartComponent__svg_g_10_Template, 3, 9, \"g\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(11, LineChartComponent__svg_g_11_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, LineSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-line-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngIf=\"!isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n          <svg:g *ngIf=\"isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\nclass LineChartModule {}\nLineChartModule.ɵfac = function LineChartModule_Factory(t) {\n  return new (t || LineChartModule)();\n};\nLineChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: LineChartModule\n});\nLineChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n      exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n    }]\n  }], null, null);\n})();\nclass PieLabelComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.animations = true;\n    this.labelTrim = true;\n    this.labelTrimSize = 10;\n    this.trimLabel = trimLabel;\n  }\n  ngOnChanges(changes) {\n    this.setTransforms();\n    this.update();\n  }\n  setTransforms() {\n    if (isPlatformServer(this.platformId)) {\n      this.styleTransform = `translate3d(${this.textX}px,${this.textY}px, 0)`;\n      this.attrTransform = `translate(${this.textX},${this.textY})`;\n      this.textTransition = !this.animations ? null : 'transform 0.75s';\n    } else {\n      const isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n      this.styleTransform = isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n      this.attrTransform = !isIE ? null : `translate(${this.textX},${this.textY})`;\n      this.textTransition = isIE || !this.animations ? null : 'transform 0.75s';\n    }\n  }\n  update() {\n    let startRadius = this.radius;\n    if (this.explodeSlices) {\n      startRadius = this.radius * this.value / this.max;\n    }\n    const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\n    // Calculate innerPos then scale outer position to match label position\n    const innerPos = innerArc.centroid(this.data);\n    let scale = this.data.pos[1] / innerPos[1];\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n      scale = 1;\n    }\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n  }\n  get textX() {\n    return this.data.pos[0];\n  }\n  get textY() {\n    return this.data.pos[1];\n  }\n  textAnchor() {\n    return this.midAngle(this.data) < Math.PI ? TextAnchor.Start : TextAnchor.End;\n  }\n  midAngle(d) {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n}\nPieLabelComponent.ɵfac = function PieLabelComponent_Factory(t) {\n  return new (t || PieLabelComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nPieLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-label\", \"\"]],\n  inputs: {\n    data: \"data\",\n    radius: \"radius\",\n    label: \"label\",\n    color: \"color\",\n    max: \"max\",\n    value: \"value\",\n    explodeSlices: \"explodeSlices\",\n    animations: \"animations\",\n    labelTrim: \"labelTrim\",\n    labelTrimSize: \"labelTrimSize\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c38,\n  decls: 6,\n  vars: 17,\n  consts: [[\"dy\", \".35em\", 1, \"pie-label\"], [\"fill\", \"none\", 1, \"pie-label-line\", \"line\"]],\n  template: function PieLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"title\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(2, \"g\")(3, \"text\", 0);\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(5, \"path\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"transform\", ctx.styleTransform)(\"transition\", ctx.textTransition);\n      i0.ɵɵattribute(\"transform\", ctx.attrTransform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"text-anchor\", ctx.textAnchor())(\"shape-rendering\", \"crispEdges\");\n      i0.ɵɵclassProp(\"animation\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.labelTrim ? ctx.trimLabel(ctx.label, ctx.labelTrimSize) : ctx.label, \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"animation\", ctx.animations);\n      i0.ɵɵattribute(\"d\", ctx.line)(\"stroke\", ctx.color);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-label]',\n      template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    labelTrim: [{\n      type: Input\n    }],\n    labelTrimSize: [{\n      type: Input\n    }]\n  });\n})();\nclass PolarSeriesComponent {\n  constructor() {\n    this.tooltipDisabled = false;\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.circleRadius = 3;\n    this.barOrientation = BarOrientation;\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    this.updateGradients();\n    const line = this.getLineGenerator();\n    const data = this.sortData(this.data.series);\n    const seriesName = this.data.name;\n    const linearScaleType = this.colors.scaleType === ScaleType.Linear;\n    const min = this.yScale.domain()[0];\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n    this.path = line(data) || '';\n    this.circles = data.map(d => {\n      const a = this.getAngle(d);\n      const r = this.getRadius(d);\n      const value = d.value;\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n      const cData = Object.assign({}, d, {\n        series: seriesName,\n        value,\n        name: d.name\n      });\n      return {\n        data: cData,\n        cx: r * Math.sin(a),\n        cy: -r * Math.cos(a),\n        value,\n        color,\n        label: d.name\n      };\n    });\n    this.active = this.isActive(this.data);\n    this.inactive = this.isInactive(this.data);\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n  }\n  getAngle(d) {\n    const label = d.name;\n    if (this.scaleType === ScaleType.Time) {\n      return this.xScale(label);\n    } else if (this.scaleType === ScaleType.Linear) {\n      return this.xScale(Number(label));\n    }\n    return this.xScale(label);\n  }\n  getRadius(d) {\n    return this.yScale(d.value);\n  }\n  getLineGenerator() {\n    return lineRadial().angle(d => this.getAngle(d)).radius(d => this.getRadius(d)).curve(this.curve);\n  }\n  sortData(data) {\n    if (this.scaleType === ScaleType.Linear) {\n      return sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      return sortByTime(data, 'name');\n    }\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n  }\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n  isInactive(entry) {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n  defaultTooltipText({\n    label,\n    value\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n  updateGradients() {\n    this.hasGradient = this.gradient || this.colors.scaleType === ScaleType.Linear;\n    if (!this.hasGradient) {\n      return;\n    }\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    if (this.colors.scaleType === ScaleType.Linear) {\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n    } else {\n      this.gradientStops = undefined;\n    }\n  }\n}\nPolarSeriesComponent.ɵfac = function PolarSeriesComponent_Factory(t) {\n  return new (t || PolarSeriesComponent)();\n};\nPolarSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PolarSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-polar-series\", \"\"]],\n  inputs: {\n    name: \"name\",\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    gradient: \"gradient\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c39,\n  decls: 5,\n  vars: 11,\n  consts: [[1, \"polar-charts-series\"], [\"ngx-charts-svg-radial-gradient\", \"\", 3, \"color\", \"name\", \"startOpacity\", \"endOpacity\", \"stops\", 4, \"ngIf\"], [\"ngx-charts-line\", \"\", 1, \"polar-series-path\", 3, \"path\", \"stroke\", \"fill\", \"animations\"], [\"ngx-charts-circle\", \"\", \"class\", \"circle\", \"ngx-tooltip\", \"\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"opacity\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-svg-radial-gradient\", \"\", 3, \"color\", \"name\", \"startOpacity\", \"endOpacity\", \"stops\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PolarSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0)(1, \"defs\");\n      i0.ɵɵtemplate(2, PolarSeriesComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"g\", 2);\n      i0.ɵɵtemplate(4, PolarSeriesComponent__svg_g_4_Template, 1, 12, \"g\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.active)(\"inactive\", ctx.inactive);\n      i0.ɵɵproperty(\"path\", ctx.path)(\"stroke\", ctx.hasGradient ? ctx.gradientUrl : ctx.seriesColor)(\"fill\", ctx.hasGradient ? ctx.gradientUrl : ctx.seriesColor)(\"animations\", ctx.animations);\n      i0.ɵɵattribute(\"fill-opacity\", ctx.rangeFillOpacity);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.circles);\n    }\n  },\n  dependencies: [SvgRadialGradientComponent, LineComponent, CircleComponent, i2.NgIf, i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PolarSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-polar-series]',\n      template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    name: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\nconst twoPI = 2 * Math.PI;\nclass PolarChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.showGridLines = true;\n    this.curve = curveCardinalClosed;\n    this.activeEntries = [];\n    this.rangeFillOpacity = 0.15;\n    this.trimYAxisTicks = true;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.showSeriesOnHover = true;\n    this.gradient = false;\n    this.yAxisMinScale = 0;\n    this.labelTrim = true;\n    this.labelTrimSize = 10;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    // series: any; // ???\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.orientation = Orientation;\n    this.isSSR = false;\n  }\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n  update() {\n    super.update();\n    this.setDims();\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.setTicks();\n  }\n  setDims() {\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    const halfWidth = Math.floor(this.dims.width / 2);\n    const halfHeight = Math.floor(this.dims.height / 2);\n    const outerRadius = this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5);\n    const yOffset = Math.max(0, halfHeight - outerRadius);\n    this.yAxisDims = {\n      ...this.dims,\n      width: halfWidth\n    };\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.transformYAxis = `translate(0, ${yOffset})`;\n    this.labelOffset = this.dims.height + 40;\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n  }\n  setScales() {\n    const xValues = this.getXValues();\n    this.scaleType = getScaleType(xValues);\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, twoPI);\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n  }\n  setTicks() {\n    let tickFormat;\n    if (this.xAxisTickFormatting) {\n      tickFormat = this.xAxisTickFormatting;\n    } else if (this.xScale.tickFormat) {\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n    } else {\n      tickFormat = d => {\n        if (isDate(d)) {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n    const outerRadius = this.outerRadius;\n    const s = 1.1;\n    this.thetaTicks = this.xDomain.map(d => {\n      const startAngle = this.xScale(d);\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n      const label = tickFormat(d);\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n      const pos = [dd, s * startPos[1]];\n      return {\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle: startAngle,\n        value: outerRadius,\n        label,\n        startPos,\n        pos\n      };\n    });\n    const minDistance = 10;\n    /* from pie chart, abstract out -*/\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n      const a = this.thetaTicks[i];\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\n        const b = this.thetaTicks[j];\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n  }\n  getXValues() {\n    const values = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n    return values;\n  }\n  getXDomain(values = this.getXValues()) {\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    }\n    return values;\n  }\n  getYValues() {\n    const domain = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n    return domain;\n  }\n  getYDomain(domain = this.getYValues()) {\n    let min = Math.min(...domain);\n    const max = Math.max(this.yAxisMinScale, ...domain);\n    min = Math.max(0, min);\n    if (!this.autoScale) {\n      min = Math.min(0, min);\n    }\n    return [min, max];\n  }\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n  getXScale(domain, width) {\n    switch (this.scaleType) {\n      case ScaleType.Time:\n        return scaleTime().range([0, width]).domain(domain);\n      case ScaleType.Linear:\n        {\n          const scale = scaleLinear().range([0, width]).domain(domain);\n          return this.roundDomains ? scale.nice() : scale;\n        }\n      default:\n        return scalePoint().range([0, width - twoPI / domain.length]).padding(0).domain(domain);\n    }\n  }\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([0, height]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n    this.select.emit(data);\n  }\n  setColors() {\n    const domain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.yDomain.reverse();\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n  getLegendOptions() {\n    if (this.schemeType === ScaleType.Ordinal) {\n      return {\n        scaleType: this.schemeType,\n        colors: this.colors,\n        domain: this.seriesDomain,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n    return {\n      scaleType: this.schemeType,\n      colors: this.colors.scale,\n      domain: this.yDomain,\n      title: undefined,\n      position: this.legendPosition\n    };\n  }\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n    this.activeEntries = [];\n  }\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n}\nPolarChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵPolarChartComponent_BaseFactory;\n  return function PolarChartComponent_Factory(t) {\n    return (ɵPolarChartComponent_BaseFactory || (ɵPolarChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PolarChartComponent)))(t || PolarChartComponent);\n  };\n}();\nPolarChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PolarChartComponent,\n  selectors: [[\"ngx-charts-polar-chart\"]],\n  contentQueries: function PolarChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    autoScale: \"autoScale\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showSeriesOnHover: \"showSeriesOnHover\",\n    gradient: \"gradient\",\n    yAxisMinScale: \"yAxisMinScale\",\n    labelTrim: \"labelTrim\",\n    labelTrimSize: \"labelTrimSize\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 10,\n  vars: 17,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"polar-chart\", \"chart\"], [\"cx\", \"0\", \"cy\", \"0\", 1, \"polar-chart-background\"], [4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"class\", \"gridline-path radial-gridline-path\", \"cx\", \"0\", \"cy\", \"0\", 4, \"ngFor\", \"ngForOf\"], [\"cx\", \"0\", \"cy\", \"0\", 1, \"gridline-path\", \"radial-gridline-path\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"label\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"label\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-polar-series\", \"\", 3, \"gradient\", \"xScale\", \"yScale\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"curve\", \"rangeFillOpacity\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PolarChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1)(2, \"g\");\n      i0.ɵɵelement(3, \"circle\", 2);\n      i0.ɵɵtemplate(4, PolarChartComponent__svg_g_4_Template, 2, 1, \"g\", 3);\n      i0.ɵɵtemplate(5, PolarChartComponent__svg_g_5_Template, 2, 1, \"g\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, PolarChartComponent__svg_g_6_Template, 1, 10, \"g\", 4);\n      i0.ɵɵtemplate(7, PolarChartComponent__svg_g_7_Template, 1, 5, \"g\", 5);\n      i0.ɵɵtemplate(8, PolarChartComponent__svg_g_8_Template, 2, 3, \"g\", 3);\n      i0.ɵɵtemplate(9, PolarChartComponent__svg_g_9_Template, 2, 3, \"g\", 3);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(14, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transformPlot);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"r\", ctx.outerRadius);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showGridLines);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis && ctx.showXAxisLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, PieLabelComponent, YAxisComponent, AxisLabelComponent, PolarSeriesComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25, \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PolarChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-polar-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showSeriesOnHover: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    yAxisMinScale: [{\n      type: Input\n    }],\n    labelTrim: [{\n      type: Input\n    }],\n    labelTrimSize: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\nclass PieArcComponent {\n  constructor(element) {\n    this.startAngle = 0;\n    this.endAngle = Math.PI * 2;\n    this.cornerRadius = 0;\n    this.explodeSlices = false;\n    this.gradient = false;\n    this.animate = true;\n    this.pointerEvents = true;\n    this.isActive = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dblclick = new EventEmitter();\n    this.barOrientation = BarOrientation;\n    this.initialized = false;\n    this.element = element.nativeElement;\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  getGradient() {\n    return this.gradient ? this.gradientFill : this.fill;\n  }\n  getPointerEvents() {\n    return this.pointerEvents ? 'auto' : 'none';\n  }\n  update() {\n    const calc = this.calculateArc();\n    this.startOpacity = 0.5;\n    this.radialGradientId = 'linearGrad' + id().toString();\n    this.gradientFill = `url(#${this.radialGradientId})`;\n    if (this.animate) {\n      if (this.initialized) {\n        this.updateAnimation();\n      } else {\n        this.loadAnimation();\n        this.initialized = true;\n      }\n    } else {\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n    }\n  }\n  calculateArc() {\n    let outerRadius = this.outerRadius;\n    if (this.explodeSlices && this.innerRadius === 0) {\n      outerRadius = this.outerRadius * this.value / this.max;\n    }\n    return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n  }\n  loadAnimation() {\n    const node = select(this.element).selectAll('.arc').data([{\n      startAngle: this.startAngle,\n      endAngle: this.endAngle\n    }]);\n    const calc = this.calculateArc();\n    node.transition().attrTween('d', function (d) {\n      this._current = this._current || d;\n      const copyOfD = Object.assign({}, d);\n      copyOfD.endAngle = copyOfD.startAngle;\n      const interpolater = interpolate(copyOfD, copyOfD);\n      this._current = interpolater(0);\n      return function (t) {\n        return calc(interpolater(t));\n      };\n    }).transition().duration(750).attrTween('d', function (d) {\n      this._current = this._current || d;\n      const interpolater = interpolate(this._current, d);\n      this._current = interpolater(0);\n      return function (t) {\n        return calc(interpolater(t));\n      };\n    });\n  }\n  updateAnimation() {\n    const node = select(this.element).selectAll('.arc').data([{\n      startAngle: this.startAngle,\n      endAngle: this.endAngle\n    }]);\n    const calc = this.calculateArc();\n    node.transition().duration(750).attrTween('d', function (d) {\n      this._current = this._current || d;\n      const interpolater = interpolate(this._current, d);\n      this._current = interpolater(0);\n      return function (t) {\n        return calc(interpolater(t));\n      };\n    });\n  }\n  onClick() {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n  }\n  onDblClick(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this._timeout);\n    this.dblclick.emit({\n      data: this.data,\n      nativeEvent: event\n    });\n  }\n}\nPieArcComponent.ɵfac = function PieArcComponent_Factory(t) {\n  return new (t || PieArcComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nPieArcComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieArcComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-arc\", \"\"]],\n  inputs: {\n    fill: \"fill\",\n    startAngle: \"startAngle\",\n    endAngle: \"endAngle\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    cornerRadius: \"cornerRadius\",\n    value: \"value\",\n    max: \"max\",\n    data: \"data\",\n    explodeSlices: \"explodeSlices\",\n    gradient: \"gradient\",\n    animate: \"animate\",\n    pointerEvents: \"pointerEvents\",\n    isActive: \"isActive\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dblclick: \"dblclick\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c40,\n  decls: 3,\n  vars: 7,\n  consts: [[1, \"arc-group\"], [4, \"ngIf\"], [1, \"arc\", 3, \"click\", \"dblclick\", \"mouseenter\", \"mouseleave\"], [\"ngx-charts-svg-radial-gradient\", \"\", 3, \"color\", \"name\", \"startOpacity\"]],\n  template: function PieArcComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵtemplate(1, PieArcComponent__svg_defs_1_Template, 2, 3, \"defs\", 1);\n      i0.ɵɵelementStart(2, \"path\", 2);\n      i0.ɵɵlistener(\"click\", function PieArcComponent_Template__svg_path_click_2_listener() {\n        return ctx.onClick();\n      })(\"dblclick\", function PieArcComponent_Template__svg_path_dblclick_2_listener($event) {\n        return ctx.onDblClick($event);\n      })(\"mouseenter\", function PieArcComponent_Template__svg_path_mouseenter_2_listener() {\n        return ctx.activate.emit(ctx.data);\n      })(\"mouseleave\", function PieArcComponent_Template__svg_path_mouseleave_2_listener() {\n        return ctx.deactivate.emit(ctx.data);\n      });\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"pointer-events\", ctx.getPointerEvents());\n      i0.ɵɵclassProp(\"active\", ctx.isActive);\n      i0.ɵɵattribute(\"d\", ctx.path)(\"fill\", ctx.getGradient());\n    }\n  },\n  dependencies: [SvgRadialGradientComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieArcComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-arc]',\n      template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    fill: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    endAngle: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    cornerRadius: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animate: [{\n      type: Input\n    }],\n    pointerEvents: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dblclick: [{\n      type: Output\n    }]\n  });\n})();\nclass PieSeriesComponent {\n  constructor() {\n    this.series = [];\n    this.innerRadius = 60;\n    this.outerRadius = 80;\n    this.trimLabels = true;\n    this.maxLabelLength = 10;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dblclick = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    const pieGenerator = pie().value(d => d.value).sort(null);\n    const arcData = pieGenerator(this.series);\n    this.max = max(arcData, d => {\n      return d.value;\n    });\n    this.data = this.calculateLabelPositions(arcData);\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n  midAngle(d) {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n  outerArc() {\n    const factor = 1.5;\n    return arc().innerRadius(this.outerRadius * factor).outerRadius(this.outerRadius * factor);\n  }\n  calculateLabelPositions(pieData) {\n    const factor = 1.5;\n    const minDistance = 10;\n    const labelPositions = pieData;\n    labelPositions.forEach(d => {\n      d.pos = this.outerArc().centroid(d);\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n    });\n    for (let i = 0; i < labelPositions.length - 1; i++) {\n      const a = labelPositions[i];\n      if (!this.labelVisible(a)) {\n        continue;\n      }\n      for (let j = i + 1; j < labelPositions.length; j++) {\n        const b = labelPositions[j];\n        if (!this.labelVisible(b)) {\n          continue;\n        }\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n    return labelPositions;\n  }\n  labelVisible(myArc) {\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n  }\n  getTooltipTitle(a) {\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\n  }\n  labelText(myArc) {\n    if (this.labelFormatting) {\n      return this.labelFormatting(myArc.data.name);\n    }\n    return this.label(myArc);\n  }\n  label(myArc) {\n    return formatLabel(myArc.data.name);\n  }\n  defaultTooltipText(myArc) {\n    const label = this.label(myArc);\n    const val = formatLabel(myArc.data.value);\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n  color(myArc) {\n    return this.colors.getColor(this.label(myArc));\n  }\n  trackBy(index, item) {\n    return item.data.name;\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n}\nPieSeriesComponent.ɵfac = function PieSeriesComponent_Factory(t) {\n  return new (t || PieSeriesComponent)();\n};\nPieSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-series\", \"\"]],\n  inputs: {\n    colors: \"colors\",\n    series: \"series\",\n    dims: \"dims\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    explodeSlices: \"explodeSlices\",\n    showLabels: \"showLabels\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    labelFormatting: \"labelFormatting\",\n    trimLabels: \"trimLabels\",\n    maxLabelLength: \"maxLabelLength\",\n    tooltipText: \"tooltipText\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dblclick: \"dblclick\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c41,\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"color\", \"label\", \"labelTrim\", \"labelTrimSize\", \"max\", \"value\", \"explodeSlices\", \"animations\", 4, \"ngIf\"], [\"ngx-charts-pie-arc\", \"\", \"ngx-tooltip\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"gradient\", \"data\", \"max\", \"explodeSlices\", \"isActive\", \"animate\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", \"dblclick\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"color\", \"label\", \"labelTrim\", \"labelTrimSize\", \"max\", \"value\", \"explodeSlices\", \"animations\"]],\n  template: function PieSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, PieSeriesComponent__svg_g_0_Template, 3, 19, \"g\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.data)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [PieLabelComponent, PieArcComponent, i2.NgForOf, i2.NgIf, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-series]',\n      template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    colors: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    showLabels: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    trimLabels: [{\n      type: Input\n    }],\n    maxLabelLength: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dblclick: [{\n      type: Output\n    }]\n  });\n})();\nclass AdvancedPieChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.activeEntries = [];\n    this.tooltipDisabled = false;\n    this.label = 'Total';\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [20, 20, 20, 20];\n  }\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width * 4 / 12.0,\n      height: this.height,\n      margins: this.margin\n    });\n    this.formatDates();\n    this.domain = this.getDomain();\n    this.setColors();\n    const xOffset = this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n    this.innerRadius = this.outerRadius * 0.75;\n    this.transform = `translate(${xOffset} , ${yOffset})`;\n  }\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n}\nAdvancedPieChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAdvancedPieChartComponent_BaseFactory;\n  return function AdvancedPieChartComponent_Factory(t) {\n    return (ɵAdvancedPieChartComponent_BaseFactory || (ɵAdvancedPieChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AdvancedPieChartComponent)))(t || AdvancedPieChartComponent);\n  };\n}();\nAdvancedPieChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AdvancedPieChartComponent,\n  selectors: [[\"ngx-charts-advanced-pie-chart\"]],\n  contentQueries: function AdvancedPieChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    label: \"label\",\n    valueFormatting: \"valueFormatting\",\n    nameFormatting: \"nameFormatting\",\n    percentageFormatting: \"percentageFormatting\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 7,\n  vars: 37,\n  consts: [[1, \"advanced-pie\", \"chart\"], [3, \"view\", \"showLegend\", \"animations\"], [1, \"pie\", \"chart\"], [\"ngx-charts-pie-series\", \"\", 3, \"colors\", \"series\", \"innerRadius\", \"activeEntries\", \"outerRadius\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"animations\", \"select\", \"activate\", \"deactivate\"], [1, \"advanced-pie-legend-wrapper\"], [3, \"data\", \"colors\", \"width\", \"label\", \"animations\", \"valueFormatting\", \"labelFormatting\", \"percentageFormatting\", \"select\", \"activate\", \"deactivate\"]],\n  template: function AdvancedPieChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"div\", 0)(2, \"ngx-charts-chart\", 1);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(3, \"g\", 2)(4, \"g\", 3);\n      i0.ɵɵlistener(\"select\", function AdvancedPieChartComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function AdvancedPieChartComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function AdvancedPieChartComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"ngx-charts-advanced-legend\", 5);\n      i0.ɵɵlistener(\"select\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_select_6_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_activate_6_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"deactivate\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_deactivate_6_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\")(\"height\", ctx.height, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"width\", ctx.dims.width, \"px\")(\"height\", ctx.dims.height, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(34, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"series\", ctx.results)(\"innerRadius\", ctx.innerRadius)(\"activeEntries\", ctx.activeEntries)(\"outerRadius\", ctx.outerRadius)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"width\", ctx.width - ctx.dims.width, \"px\")(\"height\", ctx.height, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"data\", ctx.results)(\"colors\", ctx.colors)(\"width\", ctx.width - ctx.dims.width - ctx.margin[1])(\"label\", ctx.label)(\"animations\", ctx.animations)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.nameFormatting)(\"percentageFormatting\", ctx.percentageFormatting);\n    }\n  },\n  dependencies: [ChartComponent, PieSeriesComponent, AdvancedLegendComponent],\n  styles: [_c25, \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AdvancedPieChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-advanced-pie-chart',\n      template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"]\n    }]\n  }], null, {\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    nameFormatting: [{\n      type: Input\n    }],\n    percentageFormatting: [{\n      type: Input\n    }]\n  });\n})();\nclass PieChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.labels = false;\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.explodeSlices = false;\n    this.doughnut = false;\n    this.arcWidth = 0.25;\n    this.activeEntries = [];\n    this.tooltipDisabled = false;\n    this.trimLabels = true;\n    this.maxLabelLength = 10;\n    this.dblclick = new EventEmitter();\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n  update() {\n    super.update();\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\n      this.margins = [30, 80, 30, 80];\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n      // default value for margins\n      this.margins = [20, 20, 20, 20];\n    }\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margins,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    const xOffset = this.margins[3] + this.dims.width / 2;\n    const yOffset = this.margins[0] + this.dims.height / 2;\n    this.translation = `translate(${xOffset}, ${yOffset})`;\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\n    if (this.labels) {\n      // make room for labels\n      this.outerRadius /= 3;\n    } else {\n      this.outerRadius /= 2;\n    }\n    this.innerRadius = 0;\n    if (this.doughnut) {\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n    }\n    this.domain = this.getDomain();\n    // sort data according to domain\n    this.data = this.results.sort((a, b) => {\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n    });\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n  }\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n  getLegendOptions() {\n    return {\n      scaleType: ScaleType.Ordinal,\n      domain: this.domain,\n      colors: this.colors,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  hasNoOptionalMarginsSet() {\n    return !this.margins || this.margins.length <= 0;\n  }\n}\nPieChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵPieChartComponent_BaseFactory;\n  return function PieChartComponent_Factory(t) {\n    return (ɵPieChartComponent_BaseFactory || (ɵPieChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PieChartComponent)))(t || PieChartComponent);\n  };\n}();\nPieChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieChartComponent,\n  selectors: [[\"ngx-charts-pie-chart\"]],\n  contentQueries: function PieChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    labels: \"labels\",\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    explodeSlices: \"explodeSlices\",\n    doughnut: \"doughnut\",\n    arcWidth: \"arcWidth\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    labelFormatting: \"labelFormatting\",\n    trimLabels: \"trimLabels\",\n    maxLabelLength: \"maxLabelLength\",\n    tooltipText: \"tooltipText\",\n    margins: \"margins\"\n  },\n  outputs: {\n    dblclick: \"dblclick\",\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 24,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"pie-chart\", \"chart\"], [\"ngx-charts-pie-series\", \"\", 3, \"colors\", \"series\", \"showLabels\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"activeEntries\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"dblclick\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PieChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function PieChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function PieChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      })(\"legendLabelClick\", function PieChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1)(2, \"g\", 2);\n      i0.ɵɵlistener(\"dblclick\", function PieChartComponent_Template__svg_g_dblclick_2_listener($event) {\n        return ctx.dblclick.emit($event);\n      })(\"select\", function PieChartComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function PieChartComponent_Template__svg_g_activate_2_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function PieChartComponent_Template__svg_g_deactivate_2_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(21, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.translation);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"series\", ctx.data)(\"showLabels\", ctx.labels)(\"labelFormatting\", ctx.labelFormatting)(\"trimLabels\", ctx.trimLabels)(\"maxLabelLength\", ctx.maxLabelLength)(\"activeEntries\", ctx.activeEntries)(\"innerRadius\", ctx.innerRadius)(\"outerRadius\", ctx.outerRadius)(\"explodeSlices\", ctx.explodeSlices)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText);\n    }\n  },\n  dependencies: [ChartComponent, PieSeriesComponent],\n  styles: [_c25, _c42],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-pie-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"]\n    }]\n  }], null, {\n    labels: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    doughnut: [{\n      type: Input\n    }],\n    arcWidth: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    trimLabels: [{\n      type: Input\n    }],\n    maxLabelLength: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    dblclick: [{\n      type: Output\n    }],\n    margins: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\nfunction gridSize(dims, len, minWidth) {\n  let rows = 1;\n  let cols = len;\n  const width = dims.width;\n  if (width > minWidth) {\n    while (width / cols < minWidth) {\n      rows += 1;\n      cols = Math.ceil(len / rows);\n    }\n  }\n  return [cols, rows];\n}\nfunction gridLayout(dims, data, minWidth, designatedTotal) {\n  const xScale = scaleBand();\n  const yScale = scaleBand();\n  const width = dims.width;\n  const height = dims.height;\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\n  const xDomain = [];\n  const yDomain = [];\n  for (let i = 0; i < rows; i++) {\n    yDomain.push(i);\n  }\n  for (let i = 0; i < columns; i++) {\n    xDomain.push(i);\n  }\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n  xScale.rangeRound([0, width], 0.1);\n  yScale.rangeRound([0, height], 0.1);\n  const res = [];\n  const total = designatedTotal ? designatedTotal : getTotal(data);\n  const cardWidth = xScale.bandwidth();\n  const cardHeight = yScale.bandwidth();\n  for (let i = 0; i < data.length; i++) {\n    res[i] = {};\n    res[i].data = {\n      name: data[i] ? data[i].name : '',\n      value: data[i] ? data[i].value : undefined,\n      extra: data[i] ? data[i].extra : undefined,\n      label: data[i] ? data[i].label : ''\n    };\n    res[i].x = xScale(i % columns);\n    res[i].y = yScale(Math.floor(i / columns));\n    res[i].width = cardWidth;\n    res[i].height = cardHeight;\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n    res[i].data.total = total;\n  }\n  return res;\n}\nfunction getTotal(results) {\n  return results.map(d => d ? d.value : 0).reduce((sum, val) => sum + val, 0);\n}\nclass PieGridSeriesComponent {\n  constructor(element) {\n    this.innerRadius = 70;\n    this.outerRadius = 80;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.element = element.nativeElement;\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    this.layout = pie().value(d => d.data.value).sort(null);\n    this.arcs = this.getArcs();\n  }\n  getArcs() {\n    return this.layout(this.data).map((arc, index) => {\n      const label = arc.data.data.name;\n      const other = arc.data.data.other;\n      if (index === 0) {\n        arc.startAngle = 0;\n      }\n      const color = this.colors(label);\n      return {\n        data: arc.data.data,\n        class: 'arc ' + 'arc' + index,\n        fill: color,\n        startAngle: other ? 0 : arc.startAngle,\n        endAngle: arc.endAngle,\n        animate: this.animations && !other,\n        pointerEvents: !other\n      };\n    });\n  }\n  onClick(data) {\n    this.select.emit(this.data[0].data);\n  }\n  trackBy(index, item) {\n    return item.data.name;\n  }\n  label(arc) {\n    return arc.data.name;\n  }\n  color(arc) {\n    return this.colors(this.label(arc));\n  }\n}\nPieGridSeriesComponent.ɵfac = function PieGridSeriesComponent_Factory(t) {\n  return new (t || PieGridSeriesComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nPieGridSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieGridSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-grid-series\", \"\"]],\n  inputs: {\n    colors: \"colors\",\n    data: \"data\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c43,\n  decls: 2,\n  vars: 2,\n  consts: [[1, \"pie-grid-arcs\"], [\"ngx-charts-pie-arc\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"data\", \"gradient\", \"pointerEvents\", \"animate\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-pie-arc\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"data\", \"gradient\", \"pointerEvents\", \"animate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PieGridSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵtemplate(1, PieGridSeriesComponent__svg_g_1_Template, 1, 11, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.arcs)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [PieArcComponent, i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieGridSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-grid-series]',\n      template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    colors: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\nclass PieGridComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.tooltipDisabled = false;\n    this.label = 'Total';\n    this.minWidth = 150;\n    this.activeEntries = [];\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [20, 20, 20, 20];\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.formatDates();\n    this.domain = this.getDomain();\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n    this.series = this.getSeries();\n    this.setColors();\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n  defaultTooltipText({\n    data\n  }) {\n    const label = trimLabel(formatLabel(data.name));\n    const val = data.value.toLocaleString();\n    return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n  getSeries() {\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n    return this.data.map(d => {\n      const baselineLabelHeight = 20;\n      const padding = 10;\n      const name = d.data.name;\n      const label = formatLabel(name);\n      const value = d.data.value;\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n      const innerRadius = radius * 0.9;\n      let count = 0;\n      const colors = () => {\n        count += 1;\n        if (count === 1) {\n          return 'rgba(100,100,100,0.3)';\n        } else {\n          return this.colorScale.getColor(label);\n        }\n      };\n      const xPos = d.x + (d.width - padding) / 2;\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n      return {\n        transform: `translate(${xPos}, ${yPos})`,\n        colors,\n        innerRadius,\n        outerRadius: radius,\n        name,\n        label: trimLabel(label),\n        total: value,\n        value,\n        percent: format('.1%')(d.data.percent),\n        data: [d, {\n          data: {\n            other: true,\n            value: total - value,\n            name: d.data.name\n          }\n        }]\n      };\n    });\n  }\n  getTotal() {\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  setColors() {\n    this.colorScale = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n}\nPieGridComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵPieGridComponent_BaseFactory;\n  return function PieGridComponent_Factory(t) {\n    return (ɵPieGridComponent_BaseFactory || (ɵPieGridComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PieGridComponent)))(t || PieGridComponent);\n  };\n}();\nPieGridComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieGridComponent,\n  selectors: [[\"ngx-charts-pie-grid\"]],\n  contentQueries: function PieGridComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    designatedTotal: \"designatedTotal\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    label: \"label\",\n    minWidth: \"minWidth\",\n    activeEntries: \"activeEntries\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 8,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"pie-grid\", \"chart\"], [\"class\", \"pie-grid-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"pie-grid-item\"], [\"ngx-charts-pie-grid-series\", \"\", \"ngx-tooltip\", \"\", 3, \"colors\", \"data\", \"innerRadius\", \"outerRadius\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"], [\"class\", \"label percent-label\", \"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"ngx-charts-count-up\", \"\", \"text-anchor\", \"middle\", 3, \"countTo\", \"countSuffix\", 4, \"ngIf\"], [\"class\", \"label percent-label\", \"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 4, \"ngIf\"], [\"dy\", \"0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 1, \"label\"], [\"class\", \"label\", \"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"countPrefix\", 4, \"ngIf\"], [\"class\", \"label\", \"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", 4, \"ngIf\"], [\"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"ngx-charts-count-up\", \"\", \"text-anchor\", \"middle\", 1, \"label\", \"percent-label\", 3, \"countTo\", \"countSuffix\"], [\"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 1, \"label\", \"percent-label\"], [\"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", \"ngx-charts-count-up\", \"\", 1, \"label\", 3, \"countTo\", \"countPrefix\"], [\"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", 1, \"label\"]],\n  template: function PieGridComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, PieGridComponent__svg_g_2_Template, 8, 19, \"g\", 2);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(5, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.series);\n    }\n  },\n  dependencies: [ChartComponent, PieGridSeriesComponent, CountUpDirective, i2.NgForOf, TooltipDirective, i2.NgIf],\n  styles: [_c25, \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieGridComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-pie-grid',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"]\n    }]\n  }], null, {\n    designatedTotal: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    minWidth: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\nclass PieChartModule {}\nPieChartModule.ɵfac = function PieChartModule_Factory(t) {\n  return new (t || PieChartModule)();\n};\nPieChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PieChartModule\n});\nPieChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent],\n      exports: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent]\n    }]\n  }], null, null);\n})();\nclass PolarChartModule {}\nPolarChartModule.ɵfac = function PolarChartModule_Factory(t) {\n  return new (t || PolarChartModule)();\n};\nPolarChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PolarChartModule\n});\nPolarChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule, PieChartModule, LineChartModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PolarChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule, PieChartModule, LineChartModule],\n      declarations: [PolarChartComponent, PolarSeriesComponent],\n      exports: [PolarChartComponent, PolarSeriesComponent]\n    }]\n  }], null, null);\n})();\nfunction calculateTextWidth(fontFamilyKey, text, defaultWidth = 8) {\n  return text.split('').reduce((acc, curr) => {\n    const width = fontFamilyKey[curr] || defaultWidth;\n    return acc + width;\n  }, 0);\n}\nconst VERDANA_FONT_WIDTHS_16_PX = {\n  '0': 10,\n  '1': 10,\n  '2': 10,\n  '3': 10,\n  '4': 10,\n  '5': 10,\n  '6': 10,\n  '7': 10,\n  '8': 10,\n  '9': 10,\n  A: 11,\n  B: 11,\n  C: 11,\n  D: 12,\n  E: 10,\n  F: 9,\n  G: 12,\n  H: 12,\n  I: 7,\n  J: 7,\n  K: 11,\n  L: 9,\n  M: 13,\n  N: 12,\n  O: 13,\n  P: 10,\n  Q: 13,\n  R: 11,\n  S: 11,\n  T: 10,\n  U: 12,\n  V: 11,\n  W: 16,\n  X: 11,\n  Y: 10,\n  Z: 11,\n  a: 10,\n  b: 10,\n  c: 8,\n  d: 10,\n  e: 10,\n  f: 6,\n  g: 10,\n  h: 10,\n  i: 4,\n  j: 6,\n  k: 9,\n  l: 4,\n  m: 16,\n  n: 10,\n  o: 10,\n  p: 10,\n  q: 10,\n  r: 7,\n  s: 8,\n  t: 6,\n  u: 10,\n  v: 9,\n  w: 13,\n  x: 9,\n  y: 9,\n  z: 8,\n  '!': 6,\n  '@': 16,\n  '#': 13,\n  $: 10,\n  '%': 17,\n  '^': 13,\n  '&': 12,\n  '*': 10,\n  '(': 7,\n  ')': 7,\n  _: 10,\n  '-': 7,\n  '+': 13,\n  '=': 13,\n  ',': 6,\n  '.': 6,\n  '/': 7,\n  \"'\": 4,\n  ':': 7,\n  '|': 7,\n  '?': 9,\n  ';': 7,\n  '<': 13,\n  '>': 13\n};\nclass CardComponent {\n  constructor(element, cd, zone, platformId) {\n    this.cd = cd;\n    this.zone = zone;\n    this.platformId = platformId;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.value = '';\n    this.textFontSize = 12;\n    this.textTransform = '';\n    this.initialized = false;\n    this.bandHeight = 10;\n    this.textPadding = [10, 20, 5, 20];\n    this.labelFontSize = 15;\n    this.element = element.nativeElement;\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.scaleTextSSR();\n    }\n  }\n  ngOnDestroy() {\n    if (isPlatformBrowser(this.platformId)) {\n      cancelAnimationFrame(this.animationReq);\n    }\n  }\n  update() {\n    this.zone.run(() => {\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n      this.transform = `translate(${this.x} , ${this.y})`;\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n      this.cardWidth = Math.max(0, this.width);\n      this.cardHeight = Math.max(0, this.height);\n      this.label = this.label ? this.label : this.data.name;\n      const cardData = {\n        label: this.label,\n        data: this.data,\n        value: this.data.value\n      };\n      this.formattedLabel = labelFormatting(cardData);\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n      const value = hasValue ? valueFormatting(cardData) : '';\n      this.value = this.paddedValue(value);\n      this.setPadding();\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n      setTimeout(() => {\n        if (isPlatformBrowser(this.platformId)) {\n          this.scaleText();\n        }\n        this.value = value;\n        if (hasValue && !this.initialized) {\n          setTimeout(() => this.startCount(), 20);\n        }\n      }, 8);\n    });\n  }\n  paddedValue(value) {\n    if (this.medianSize && this.medianSize > value.length) {\n      value += '\\u2007'.repeat(this.medianSize - value.length);\n    }\n    return value;\n  }\n  startCount() {\n    if (!this.initialized && this.animations) {\n      cancelAnimationFrame(this.animationReq);\n      const val = this.data.value;\n      const decs = decimalChecker(val);\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n      const callback = ({\n        value,\n        finished\n      }) => {\n        this.zone.run(() => {\n          value = finished ? val : value;\n          this.value = valueFormatting({\n            label: this.label,\n            data: this.data,\n            value\n          });\n          if (!finished) {\n            this.value = this.paddedValue(this.value);\n          }\n          this.cd.markForCheck();\n        });\n      };\n      this.animationReq = count(0, val, decs, 1, callback);\n      this.initialized = true;\n    }\n  }\n  scaleText() {\n    this.zone.run(() => {\n      const {\n        width,\n        height\n      } = this.textEl.nativeElement.getBoundingClientRect();\n      if (width === 0 || height === 0) {\n        return;\n      }\n      const textPadding = this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n      const availableWidth = this.cardWidth - 2 * textPadding;\n      const availableHeight = this.cardHeight / 3;\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n      this.labelFontSize = Math.min(this.textFontSize, 15);\n      this.setPadding();\n      this.cd.markForCheck();\n    });\n  }\n  scaleTextSSR() {\n    const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, this.value, 10);\n    const height = 18;\n    const textPadding = this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const availableWidth = this.cardWidth - 2 * textPadding;\n    const availableHeight = this.cardHeight / 3;\n    const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n    this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n    this.labelFontSize = Math.min(this.textFontSize, 15);\n    this.setPadding();\n  }\n  setPadding() {\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const padding = this.cardHeight / 2;\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n    this.textPadding[2] = padding - this.labelFontSize;\n  }\n  onClick() {\n    this.select.emit(this.data);\n  }\n}\nCardComponent.ɵfac = function CardComponent_Factory(t) {\n  return new (t || CardComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nCardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CardComponent,\n  selectors: [[\"g\", \"ngx-charts-card\", \"\"]],\n  viewQuery: function CardComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c45, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textEl = _t.first);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    bandColor: \"bandColor\",\n    textColor: \"textColor\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    label: \"label\",\n    data: \"data\",\n    medianSize: \"medianSize\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c46,\n  decls: 10,\n  vars: 25,\n  consts: [[1, \"cell\", 3, \"click\"], [\"rx\", \"3\", \"ry\", \"3\", 1, \"card\"], [\"class\", \"card-band\", \"stroke\", \"none\", 4, \"ngIf\"], [\"x\", \"5\", \"alignment-baseline\", \"hanging\", 1, \"trimmed-label\"], [3, \"innerHTML\"], [\"text-anchor\", \"start\", \"alignment-baseline\", \"hanging\", 1, \"value-text\"], [\"textEl\", \"\"], [\"stroke\", \"none\", 1, \"card-band\"]],\n  template: function CardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵlistener(\"click\", function CardComponent_Template__svg_g_click_0_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵelement(1, \"rect\", 1);\n      i0.ɵɵtemplate(2, CardComponent__svg_path_2_Template, 1, 3, \"path\", 2);\n      i0.ɵɵelementStart(3, \"title\");\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"foreignObject\", 3);\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelement(6, \"p\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(7, \"text\", 5, 6);\n      i0.ɵɵtext(9);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"fill\", ctx.color);\n      i0.ɵɵattribute(\"width\", ctx.cardWidth)(\"height\", ctx.cardHeight);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.bandColor && ctx.bandColor !== ctx.color);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"x\", ctx.textPadding[3])(\"y\", ctx.cardHeight - ctx.textPadding[2])(\"width\", ctx.textWidth)(\"height\", ctx.labelFontSize + ctx.textPadding[2]);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"color\", ctx.textColor)(\"font-size\", ctx.labelFontSize, \"px\")(\"line-height\", ctx.labelFontSize, \"px\");\n      i0.ɵɵproperty(\"innerHTML\", ctx.formattedLabel, i0.ɵɵsanitizeHtml);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"fill\", ctx.textColor)(\"font-size\", ctx.textFontSize, \"pt\");\n      i0.ɵɵattribute(\"x\", ctx.textPadding[3])(\"y\", ctx.textPadding[0]);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.value, \" \");\n    }\n  },\n  dependencies: [i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-card]',\n      template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    color: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    medianSize: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    textEl: [{\n      type: ViewChild,\n      args: ['textEl', {\n        static: false\n      }]\n    }]\n  });\n})();\n\n/**\n * Converts a hex to RGB\n *\n * @export\n */\nfunction hexToRgb(value) {\n  // deprecated, use d3.color()\n  return d3_color.rgb(value);\n}\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\nfunction invertColor(value) {\n  const color = d3_color.rgb(value);\n  const {\n    r,\n    g,\n    b,\n    opacity\n  } = color;\n  if (opacity === 0) {\n    return color.toString();\n  }\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  const depth = yiq >= 128 ? -0.8 : 0.8;\n  return shadeRGBColor(color, depth);\n}\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\nfunction shadeRGBColor({\n  r,\n  g,\n  b\n}, percent) {\n  const t = percent < 0 ? 0 : 255;\n  const p = percent < 0 ? percent * -1 : percent;\n  r = Math.round((t - r) * p) + r;\n  g = Math.round((t - g) * p) + g;\n  b = Math.round((t - b) * p) + b;\n  return `rgb(${r}, ${g}, ${b})`;\n}\nclass CardSeriesComponent {\n  constructor() {\n    this.innerPadding = 15;\n    this.emptyColor = 'rgba(0, 0, 0, 0)';\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    if (this.data.length > 2) {\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n      const sortedLengths = this.data.map(d => {\n        const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n        return hasValue ? valueFormatting({\n          data: d.data,\n          label: d ? d.data.name : '',\n          value: d && d.data ? d.data.value : ''\n        }).length : 0;\n      }).sort((a, b) => b - a);\n      const idx = Math.ceil(this.data.length / 2);\n      this.medianSize = sortedLengths[idx];\n    }\n    const cards = this.getCards();\n    this.cards = cards.filter(d => d.data.value !== null);\n    this.emptySlots = cards.filter(d => d.data.value === null);\n  }\n  getCards() {\n    const yPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n    const xPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n    return this.data.map((d, index) => {\n      let label = d.data.name;\n      if (label && label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label ? label.toLocaleString() : label;\n      }\n      const value = d.data.value;\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n      const color = this.cardColor || valueColor || '#000';\n      return {\n        x: d.x,\n        y: d.y,\n        width: d.width - xPadding,\n        height: d.height - yPadding,\n        color,\n        bandColor: this.bandColor || valueColor,\n        textColor: this.textColor || invertColor(color),\n        label,\n        data: d.data,\n        tooltipText: `${label}: ${value}`\n      };\n    });\n  }\n  trackBy(index, card) {\n    return card.label;\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n}\nCardSeriesComponent.ɵfac = function CardSeriesComponent_Factory(t) {\n  return new (t || CardSeriesComponent)();\n};\nCardSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CardSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-card-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    dims: \"dims\",\n    colors: \"colors\",\n    innerPadding: \"innerPadding\",\n    cardColor: \"cardColor\",\n    bandColor: \"bandColor\",\n    emptyColor: \"emptyColor\",\n    textColor: \"textColor\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c47,\n  decls: 2,\n  vars: 4,\n  consts: [[\"class\", \"card-empty\", \"rx\", \"3\", \"ry\", \"3\", 3, \"fill\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-card\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"color\", \"bandColor\", \"textColor\", \"data\", \"label\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"rx\", \"3\", \"ry\", \"3\", 1, \"card-empty\"], [\"ngx-charts-card\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"color\", \"bandColor\", \"textColor\", \"data\", \"label\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\"]],\n  template: function CardSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CardSeriesComponent__svg_rect_0_Template, 1, 6, \"rect\", 0);\n      i0.ɵɵtemplate(1, CardSeriesComponent__svg_g_1_Template, 1, 13, \"g\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.emptySlots)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.cards)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [CardComponent, i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CardSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-card-series]',\n      template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    cardColor: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    emptyColor: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\nclass NumberCardComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.emptyColor = 'rgba(0, 0, 0, 0)';\n    this.innerPadding = 15;\n    this.margin = [10, 10, 10, 10];\n  }\n  get clickable() {\n    return !!this.select.observers.length;\n  }\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.formatDates();\n    this.domain = this.getDomain();\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    const size = gridSize(this.dims, this.results.length, 150);\n    const N = size[0] * size[1];\n    const data = this.results.slice();\n    while (data.length < N) {\n      data.push({\n        value: null\n      });\n    }\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n  }\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n}\nNumberCardComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵNumberCardComponent_BaseFactory;\n  return function NumberCardComponent_Factory(t) {\n    return (ɵNumberCardComponent_BaseFactory || (ɵNumberCardComponent_BaseFactory = i0.ɵɵgetInheritedFactory(NumberCardComponent)))(t || NumberCardComponent);\n  };\n}();\nNumberCardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NumberCardComponent,\n  selectors: [[\"ngx-charts-number-card\"]],\n  inputs: {\n    cardColor: \"cardColor\",\n    bandColor: \"bandColor\",\n    emptyColor: \"emptyColor\",\n    innerPadding: \"innerPadding\",\n    textColor: \"textColor\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    designatedTotal: \"designatedTotal\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"number-card\", \"chart\"], [\"ngx-charts-card-series\", \"\", 3, \"colors\", \"cardColor\", \"bandColor\", \"textColor\", \"emptyColor\", \"data\", \"dims\", \"innerPadding\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\"]],\n  template: function NumberCardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1)(2, \"g\", 2);\n      i0.ɵɵlistener(\"select\", function NumberCardComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"clickable\", ctx.clickable);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"cardColor\", ctx.cardColor)(\"bandColor\", ctx.bandColor)(\"textColor\", ctx.textColor)(\"emptyColor\", ctx.emptyColor)(\"data\", ctx.data)(\"dims\", ctx.dims)(\"innerPadding\", ctx.innerPadding)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.labelFormatting)(\"animations\", ctx.animations);\n    }\n  },\n  dependencies: [ChartComponent, CardSeriesComponent],\n  styles: [_c25, \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NumberCardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-number-card',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"]\n    }]\n  }], null, {\n    cardColor: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    emptyColor: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    designatedTotal: [{\n      type: Input\n    }]\n  });\n})();\nclass NumberCardModule {}\nNumberCardModule.ɵfac = function NumberCardModule_Factory(t) {\n  return new (t || NumberCardModule)();\n};\nNumberCardModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NumberCardModule\n});\nNumberCardModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NumberCardModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n      exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n    }]\n  }], null, null);\n})();\nclass TreeMapCellComponent {\n  constructor(element) {\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.initialized = false;\n    this.orientation = BarOrientation;\n    this.element = element.nativeElement;\n  }\n  ngOnChanges() {\n    this.update();\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n    const cellData = {\n      data: this.data,\n      label: this.label,\n      value: this.value\n    };\n    this.formattedValue = this.valueFormatting(cellData.value);\n    this.formattedLabel = labelFormatting(cellData);\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n  }\n  update() {\n    if (this.initialized) {\n      this.animateToCurrentForm();\n    } else {\n      if (this.animations) {\n        this.loadAnimation();\n      }\n      this.initialized = true;\n    }\n  }\n  loadAnimation() {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n    this.animateToCurrentForm();\n  }\n  getTextColor() {\n    return invertColor(this.fill);\n  }\n  animateToCurrentForm() {\n    const node = select(this.element).select('.cell');\n    if (this.animations) {\n      node.transition().duration(750).attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n    } else {\n      node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n    }\n  }\n  onClick() {\n    this.select.emit(this.data);\n  }\n  getGradientStops() {\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: 0.3\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n}\nTreeMapCellComponent.ɵfac = function TreeMapCellComponent_Factory(t) {\n  return new (t || TreeMapCellComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nTreeMapCellComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeMapCellComponent,\n  selectors: [[\"g\", \"ngx-charts-tree-map-cell\", \"\"]],\n  inputs: {\n    data: \"data\",\n    fill: \"fill\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    label: \"label\",\n    value: \"value\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    gradient: \"gradient\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c48,\n  decls: 4,\n  vars: 7,\n  consts: [[4, \"ngIf\"], [1, \"cell\", 3, \"click\"], [\"class\", \"treemap-label\", 3, \"pointer-events\", 4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [1, \"treemap-label\"], [1, \"treemap-label\", 3, \"innerHTML\"], [\"class\", \"treemap-val\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"treemap-val\", 4, \"ngIf\"], [\"ngx-charts-count-up\", \"\", 1, \"treemap-val\", 3, \"countTo\", \"valueFormatting\"], [1, \"treemap-val\"]],\n  template: function TreeMapCellComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, TreeMapCellComponent__svg_defs_1_Template, 2, 3, \"defs\", 0);\n      i0.ɵɵelementStart(2, \"rect\", 1);\n      i0.ɵɵlistener(\"click\", function TreeMapCellComponent_Template__svg_rect_click_2_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, TreeMapCellComponent__svg_foreignObject_3_Template, 6, 15, \"foreignObject\", 2);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"fill\", ctx.gradient ? ctx.gradientUrl : ctx.fill)(\"width\", ctx.width)(\"height\", ctx.height)(\"x\", ctx.x)(\"y\", ctx.y);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.width >= 70 && ctx.height >= 35);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, CountUpDirective, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapCellComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tree-map-cell]',\n      template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\nclass TreeMapCellSeriesComponent {\n  constructor() {\n    this.gradient = false;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.styleTypes = StyleTypes;\n    this.placementTypes = PlacementTypes;\n  }\n  ngOnChanges(changes) {\n    this.cells = this.getCells();\n  }\n  getCells() {\n    return this.data.children.filter(d => {\n      return d.depth === 1;\n    }).map((d, index) => {\n      const label = d.id;\n      return {\n        data: d.data,\n        x: d.x0,\n        y: d.y0,\n        width: d.x1 - d.x0,\n        height: d.y1 - d.y0,\n        fill: this.colors.getColor(label),\n        label,\n        value: d.value\n      };\n    });\n  }\n  getTooltipText({\n    label,\n    value\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  trackBy(index, item) {\n    return item.label;\n  }\n}\nTreeMapCellSeriesComponent.ɵfac = function TreeMapCellSeriesComponent_Factory(t) {\n  return new (t || TreeMapCellSeriesComponent)();\n};\nTreeMapCellSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeMapCellSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-tree-map-cell-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    dims: \"dims\",\n    colors: \"colors\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    gradient: \"gradient\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c49,\n  decls: 1,\n  vars: 2,\n  consts: [[\"ngx-charts-tree-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"data\", \"x\", \"y\", \"width\", \"height\", \"fill\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-tree-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"data\", \"x\", \"y\", \"width\", \"height\", \"fill\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\"]],\n  template: function TreeMapCellSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TreeMapCellSeriesComponent__svg_g_0_Template, 1, 18, \"g\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.cells)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [TreeMapCellComponent, i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapCellSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tree-map-cell-series]',\n      template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\nclass TreeMapComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.tooltipDisabled = false;\n    this.gradient = false;\n    this.select = new EventEmitter();\n    this.margin = [10, 10, 10, 10];\n  }\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.domain = this.getDomain();\n    this.treemap = treemap().size([this.dims.width, this.dims.height]);\n    const rootNode = {\n      name: 'root',\n      value: 0,\n      isRoot: true\n    };\n    const root = stratify().id(d => {\n      let label = d.name;\n      if (label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label.toLocaleString();\n      }\n      return label;\n    }).parentId(d => d.isRoot ? null : 'root')([rootNode, ...this.results]).sum(d => d.value);\n    this.data = this.treemap(root);\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n  getDomain() {\n    return this.results.map(d => d.name);\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n}\nTreeMapComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵTreeMapComponent_BaseFactory;\n  return function TreeMapComponent_Factory(t) {\n    return (ɵTreeMapComponent_BaseFactory || (ɵTreeMapComponent_BaseFactory = i0.ɵɵgetInheritedFactory(TreeMapComponent)))(t || TreeMapComponent);\n  };\n}();\nTreeMapComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeMapComponent,\n  selectors: [[\"ngx-charts-tree-map\"]],\n  contentQueries: function TreeMapComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    results: \"results\",\n    tooltipDisabled: \"tooltipDisabled\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    gradient: \"gradient\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 16,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"tree-map\", \"chart\"], [\"ngx-charts-tree-map-cell-series\", \"\", 3, \"colors\", \"data\", \"dims\", \"tooltipDisabled\", \"tooltipTemplate\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"select\"]],\n  template: function TreeMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1)(2, \"g\", 2);\n      i0.ɵɵlistener(\"select\", function TreeMapComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(13, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"data\", ctx.data)(\"dims\", ctx.dims)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.labelFormatting)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations);\n    }\n  },\n  dependencies: [ChartComponent, TreeMapCellSeriesComponent],\n  styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-tree-map',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"]\n    }]\n  }], null, {\n    results: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\nclass TreeMapModule {}\nTreeMapModule.ɵfac = function TreeMapModule_Factory(t) {\n  return new (t || TreeMapModule)();\n};\nTreeMapModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TreeMapModule\n});\nTreeMapModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n      exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n    }]\n  }], null, null);\n})();\nvar ElementType;\n(function (ElementType) {\n  ElementType[\"Value\"] = \"value\";\n  ElementType[\"Units\"] = \"units\";\n})(ElementType || (ElementType = {}));\nclass LinearGaugeComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.min = 0;\n    this.max = 100;\n    this.value = 0;\n    this.margin = [10, 20, 10, 20];\n    this.valueResizeScale = 1;\n    this.unitsResizeScale = 1;\n    this.valueTextTransform = '';\n    this.valueTranslate = '';\n    this.unitsTextTransform = '';\n    this.unitsTranslate = '';\n    this.barOrientation = BarOrientation;\n  }\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    setTimeout(() => {\n      this.scaleText(ElementType.Value);\n      this.scaleText(ElementType.Units);\n    });\n  }\n  update() {\n    super.update();\n    this.hasPreviousValue = this.previousValue !== undefined;\n    this.max = Math.max(this.max, this.value);\n    this.min = Math.min(this.min, this.value);\n    if (this.hasPreviousValue) {\n      this.max = Math.max(this.max, this.previousValue);\n      this.min = Math.min(this.min, this.previousValue);\n    }\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n    this.setColors();\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n    this.valueTranslate = `translate(0, -15)`;\n    this.unitsTranslate = `translate(0, 15)`;\n    if (isPlatformServer(this.platformId)) {\n      this.scaleTextSSR('value');\n      this.scaleTextSSR('units');\n    } else {\n      setTimeout(() => this.scaleText(ElementType.Value), 50);\n      setTimeout(() => this.scaleText(ElementType.Units), 50);\n    }\n  }\n  getValueDomain() {\n    return [this.min, this.max];\n  }\n  getValueScale() {\n    return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n  }\n  getDisplayValue() {\n    if (this.valueFormatting) {\n      return this.valueFormatting(this.value);\n    }\n    return this.value.toLocaleString();\n  }\n  scaleText(element, repeat = true) {\n    let el;\n    let resizeScale;\n    if (element === ElementType.Value) {\n      el = this.valueTextEl;\n      resizeScale = this.valueResizeScale;\n    } else {\n      el = this.unitsTextEl;\n      resizeScale = this.unitsResizeScale;\n    }\n    const {\n      width,\n      height\n    } = el.nativeElement.getBoundingClientRect();\n    if (width === 0 || height === 0) return;\n    const oldScale = resizeScale;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor(availableWidth / (width / resizeScale) * 100) / 100;\n    const resizeScaleHeight = Math.floor(availableHeight / (height / resizeScale) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n    if (resizeScale !== oldScale) {\n      if (element === ElementType.Value) {\n        this.valueResizeScale = resizeScale;\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      } else {\n        this.unitsResizeScale = resizeScale;\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      }\n      this.cd.markForCheck();\n      if (repeat && isPlatformBrowser(this.platformId)) {\n        setTimeout(() => {\n          this.scaleText(element, false);\n        }, 50);\n      }\n    }\n  }\n  scaleTextSSR(element) {\n    let resizeScale = 1;\n    const value = element === 'value' ? this.displayValue : this.units;\n    const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, value, 10);\n    const height = 25;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor(availableWidth / (width / resizeScale) * 100) / 100;\n    const resizeScaleHeight = Math.floor(availableHeight / (height / resizeScale) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n    if (element === 'value') {\n      this.valueResizeScale = resizeScale;\n      this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n    } else {\n      this.unitsResizeScale = resizeScale;\n      this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n    }\n    this.cd.markForCheck();\n  }\n  onClick() {\n    this.select.emit({\n      name: 'Value',\n      value: this.value\n    });\n  }\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, [this.value], this.customColors);\n  }\n}\nLinearGaugeComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵLinearGaugeComponent_BaseFactory;\n  return function LinearGaugeComponent_Factory(t) {\n    return (ɵLinearGaugeComponent_BaseFactory || (ɵLinearGaugeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(LinearGaugeComponent)))(t || LinearGaugeComponent);\n  };\n}();\nLinearGaugeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LinearGaugeComponent,\n  selectors: [[\"ngx-charts-linear-gauge\"]],\n  viewQuery: function LinearGaugeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c50, 5);\n      i0.ɵɵviewQuery(_c51, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.valueTextEl = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.unitsTextEl = _t.first);\n    }\n  },\n  inputs: {\n    min: \"min\",\n    max: \"max\",\n    value: \"value\",\n    units: \"units\",\n    previousValue: \"previousValue\",\n    valueFormatting: \"valueFormatting\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 15,\n  vars: 38,\n  consts: [[3, \"view\", \"showLegend\", \"animations\", \"click\"], [1, \"linear-gauge\", \"chart\"], [\"ngx-charts-bar\", \"\", 1, \"background-bar\", 3, \"width\", \"height\", \"x\", \"y\", \"data\", \"orientation\", \"roundEdges\", \"animations\"], [\"ngx-charts-bar\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"data\", \"orientation\", \"roundEdges\", \"animations\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"0\", \"y2\", \"15\", 4, \"ngIf\"], [\"x1\", \"0\", \"y1\", \"-5\", \"x2\", \"0\", \"y2\", \"-15\", 4, \"ngIf\"], [\"alignment-baseline\", \"after-edge\", 1, \"value\"], [\"valueTextEl\", \"\"], [\"alignment-baseline\", \"before-edge\", 1, \"units\"], [\"unitsTextEl\", \"\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"0\", \"y2\", \"15\"], [\"x1\", \"0\", \"y1\", \"-5\", \"x2\", \"0\", \"y2\", \"-15\"]],\n  template: function LinearGaugeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"click\", function LinearGaugeComponent_Template_ngx_charts_chart_click_0_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelement(2, \"g\", 2)(3, \"g\", 3);\n      i0.ɵɵtemplate(4, LinearGaugeComponent__svg_line_4_Template, 1, 2, \"line\", 4);\n      i0.ɵɵtemplate(5, LinearGaugeComponent__svg_line_5_Template, 1, 2, \"line\", 5);\n      i0.ɵɵelementStart(6, \"g\")(7, \"g\")(8, \"text\", 6, 7);\n      i0.ɵɵtext(10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"g\")(12, \"text\", 8, 9);\n      i0.ɵɵtext(14);\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(33, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"width\", ctx.dims.width)(\"height\", 3)(\"x\", ctx.margin[3])(\"y\", ctx.dims.height / 2 + ctx.margin[0] - 2)(\"data\", i0.ɵɵpureFunction0(36, _c52))(\"orientation\", ctx.barOrientation.Horizontal)(\"roundEdges\", true)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"width\", ctx.valueScale(ctx.value))(\"height\", 3)(\"x\", ctx.margin[3])(\"y\", ctx.dims.height / 2 + ctx.margin[0] - 2)(\"fill\", ctx.colors.getColor(ctx.units))(\"data\", i0.ɵɵpureFunction0(37, _c52))(\"orientation\", ctx.barOrientation.Horizontal)(\"roundEdges\", true)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasPreviousValue);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasPreviousValue);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.valueTranslate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n      i0.ɵɵattribute(\"transform\", ctx.valueTextTransform);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayValue, \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.unitsTranslate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n      i0.ɵɵattribute(\"transform\", ctx.unitsTextTransform);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.units, \" \");\n    }\n  },\n  dependencies: [ChartComponent, BarComponent, i2.NgIf],\n  styles: [_c25, \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LinearGaugeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-linear-gauge',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"]\n    }]\n  }], null, {\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    units: [{\n      type: Input\n    }],\n    previousValue: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    valueTextEl: [{\n      type: ViewChild,\n      args: ['valueTextEl']\n    }],\n    unitsTextEl: [{\n      type: ViewChild,\n      args: ['unitsTextEl']\n    }]\n  });\n})();\nclass GaugeArcComponent {\n  constructor() {\n    this.isActive = false;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n  tooltipText(arc) {\n    const label = formatLabel(arc.data.name);\n    let val;\n    if (this.valueFormatting) {\n      val = this.valueFormatting(arc.data.value);\n    } else {\n      val = formatLabel(arc.data.value);\n    }\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n}\nGaugeArcComponent.ɵfac = function GaugeArcComponent_Factory(t) {\n  return new (t || GaugeArcComponent)();\n};\nGaugeArcComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GaugeArcComponent,\n  selectors: [[\"g\", \"ngx-charts-gauge-arc\", \"\"]],\n  inputs: {\n    backgroundArc: \"backgroundArc\",\n    valueArc: \"valueArc\",\n    cornerRadius: \"cornerRadius\",\n    colors: \"colors\",\n    isActive: \"isActive\",\n    tooltipDisabled: \"tooltipDisabled\",\n    valueFormatting: \"valueFormatting\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  attrs: _c53,\n  decls: 2,\n  vars: 23,\n  consts: [[\"ngx-charts-pie-arc\", \"\", 1, \"background-arc\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"data\", \"animate\", \"pointerEvents\"], [\"ngx-charts-pie-arc\", \"\", \"ngx-tooltip\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"fill\", \"data\", \"animate\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function GaugeArcComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"g\", 0);\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵlistener(\"select\", function GaugeArcComponent_Template__svg_g_select_1_listener($event) {\n        return ctx.select.emit($event);\n      })(\"activate\", function GaugeArcComponent_Template__svg_g_activate_1_listener($event) {\n        return ctx.activate.emit($event);\n      })(\"deactivate\", function GaugeArcComponent_Template__svg_g_deactivate_1_listener($event) {\n        return ctx.deactivate.emit($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"startAngle\", 0)(\"endAngle\", ctx.backgroundArc.endAngle)(\"innerRadius\", ctx.backgroundArc.innerRadius)(\"outerRadius\", ctx.backgroundArc.outerRadius)(\"cornerRadius\", ctx.cornerRadius)(\"data\", ctx.backgroundArc.data)(\"animate\", false)(\"pointerEvents\", false);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"startAngle\", 0)(\"endAngle\", ctx.valueArc.endAngle)(\"innerRadius\", ctx.valueArc.innerRadius)(\"outerRadius\", ctx.valueArc.outerRadius)(\"cornerRadius\", ctx.cornerRadius)(\"fill\", ctx.colors.getColor(ctx.valueArc.data.name))(\"data\", ctx.valueArc.data)(\"animate\", ctx.animations)(\"isActive\", ctx.isActive)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", ctx.placementTypes.Top)(\"tooltipType\", ctx.styleTypes.tooltip)(\"tooltipTitle\", ctx.tooltipTemplate ? undefined : ctx.tooltipText(ctx.valueArc))(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipContext\", ctx.valueArc.data);\n    }\n  },\n  dependencies: [PieArcComponent, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeArcComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-gauge-arc]',\n      template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    backgroundArc: [{\n      type: Input\n    }],\n    valueArc: [{\n      type: Input\n    }],\n    cornerRadius: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\nclass GaugeAxisComponent {\n  constructor() {\n    this.rotate = '';\n  }\n  ngOnChanges(changes) {\n    this.update();\n  }\n  update() {\n    this.rotationAngle = -90 + this.startAngle;\n    this.rotate = `rotate(${this.rotationAngle})`;\n    this.ticks = this.getTicks();\n  }\n  getTicks() {\n    const bigTickSegment = this.angleSpan / this.bigSegments;\n    const smallTickSegment = bigTickSegment / this.smallSegments;\n    const tickLength = 20;\n    const ticks = {\n      big: [],\n      small: []\n    };\n    const startDistance = this.radius + 10;\n    const textDist = startDistance + tickLength + 10;\n    for (let i = 0; i <= this.bigSegments; i++) {\n      const angleDeg = i * bigTickSegment;\n      const angle = angleDeg * Math.PI / 180;\n      const textAnchor = this.getTextAnchor(angleDeg);\n      let skip = false;\n      if (i === 0 && this.angleSpan === 360) {\n        skip = true;\n      }\n      if (!skip) {\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n        if (this.tickFormatting) {\n          text = this.tickFormatting(text);\n        }\n        ticks.big.push({\n          line: this.getTickPath(startDistance, tickLength, angle),\n          textAnchor,\n          text,\n          textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n        });\n      }\n      if (i === this.bigSegments) {\n        continue;\n      }\n      for (let j = 1; j <= this.smallSegments; j++) {\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\n        const smallAngle = smallAngleDeg * Math.PI / 180;\n        ticks.small.push({\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n        });\n      }\n    }\n    return ticks;\n  }\n  getTextAnchor(angle) {\n    // [0, 45] = 'middle';\n    // [46, 135] = 'start';\n    // [136, 225] = 'middle';\n    // [226, 315] = 'end';\n    angle = (this.startAngle + angle) % 360;\n    let textAnchor = TextAnchor.Middle;\n    if (angle > 45 && angle <= 135) {\n      textAnchor = TextAnchor.Start;\n    } else if (angle > 225 && angle <= 315) {\n      textAnchor = TextAnchor.End;\n    }\n    return textAnchor;\n  }\n  getTickPath(startDistance, tickLength, angle) {\n    const y1 = startDistance * Math.sin(angle);\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\n    const x1 = startDistance * Math.cos(angle);\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\n    const points = [{\n      x: x1,\n      y: y1\n    }, {\n      x: x2,\n      y: y2\n    }];\n    const lineGenerator = line().x(d => d.x).y(d => d.y);\n    return lineGenerator(points);\n  }\n}\nGaugeAxisComponent.ɵfac = function GaugeAxisComponent_Factory(t) {\n  return new (t || GaugeAxisComponent)();\n};\nGaugeAxisComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GaugeAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-gauge-axis\", \"\"]],\n  inputs: {\n    bigSegments: \"bigSegments\",\n    smallSegments: \"smallSegments\",\n    min: \"min\",\n    max: \"max\",\n    angleSpan: \"angleSpan\",\n    startAngle: \"startAngle\",\n    radius: \"radius\",\n    valueScale: \"valueScale\",\n    tickFormatting: \"tickFormatting\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c54,\n  decls: 4,\n  vars: 4,\n  consts: [[\"class\", \"gauge-tick gauge-tick-large\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"gauge-tick gauge-tick-small\", 4, \"ngFor\", \"ngForOf\"], [1, \"gauge-tick\", \"gauge-tick-large\"], [\"alignment-baseline\", \"central\"], [1, \"gauge-tick\", \"gauge-tick-small\"]],\n  template: function GaugeAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, GaugeAxisComponent__svg_g_1_Template, 2, 1, \"g\", 0);\n      i0.ɵɵtemplate(2, GaugeAxisComponent__svg_g_2_Template, 3, 4, \"g\", 0);\n      i0.ɵɵtemplate(3, GaugeAxisComponent__svg_g_3_Template, 2, 1, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.rotate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks.big);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks.big);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks.small);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-gauge-axis]',\n      template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    bigSegments: [{\n      type: Input\n    }],\n    smallSegments: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    angleSpan: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    valueScale: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }]\n  });\n})();\nclass GaugeComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.min = 0;\n    this.max = 100;\n    this.bigSegments = 10;\n    this.smallSegments = 5;\n    this.showAxis = true;\n    this.startAngle = -120;\n    this.angleSpan = 240;\n    this.activeEntries = [];\n    this.tooltipDisabled = false;\n    this.showText = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.resizeScale = 1;\n    this.rotation = '';\n    this.textTransform = 'scale(1, 1)';\n    this.cornerRadius = 10;\n  }\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    setTimeout(() => this.scaleText());\n  }\n  update() {\n    super.update();\n    if (!this.showAxis) {\n      if (!this.margin) {\n        this.margin = [10, 20, 10, 20];\n      }\n    } else {\n      if (!this.margin) {\n        this.margin = [60, 100, 60, 100];\n      }\n    }\n    // make the starting angle positive\n    if (this.startAngle < 0) {\n      this.startAngle = this.startAngle % 360 + 360;\n    }\n    this.angleSpan = Math.min(this.angleSpan, 360);\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n    this.domain = this.getDomain();\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n    this.arcs = this.getArcs();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.rotation = `rotate(${this.startAngle})`;\n    setTimeout(() => this.scaleText(), 50);\n  }\n  getArcs() {\n    const arcs = [];\n    const availableRadius = this.outerRadius * 0.7;\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n    const arcWidth = radiusPerArc * 0.7;\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n    this.cornerRadius = Math.floor(arcWidth / 2);\n    let i = 0;\n    for (const d of this.results) {\n      const outerRadius = this.outerRadius - i * radiusPerArc;\n      const innerRadius = outerRadius - arcWidth;\n      const backgroundArc = {\n        endAngle: this.angleSpan * Math.PI / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: this.max,\n          name: d.name\n        }\n      };\n      const valueArc = {\n        endAngle: Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: d.value,\n          name: d.name\n        }\n      };\n      const arc = {\n        backgroundArc,\n        valueArc\n      };\n      arcs.push(arc);\n      i++;\n    }\n    return arcs;\n  }\n  getDomain() {\n    return this.results.map(d => d.name);\n  }\n  getValueDomain() {\n    const values = this.results.map(d => d.value);\n    const dataMin = Math.min(...values);\n    const dataMax = Math.max(...values);\n    if (this.min !== undefined) {\n      this.min = Math.min(this.min, dataMin);\n    } else {\n      this.min = dataMin;\n    }\n    if (this.max !== undefined) {\n      this.max = Math.max(this.max, dataMax);\n    } else {\n      this.max = dataMax;\n    }\n    return [this.min, this.max];\n  }\n  getValueScale() {\n    return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n  }\n  getDisplayValue() {\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n    if (this.textValue && 0 !== this.textValue.length) {\n      return this.textValue.toLocaleString();\n    }\n    if (this.valueFormatting) {\n      return this.valueFormatting(value);\n    }\n    return value.toLocaleString();\n  }\n  scaleText(repeat = true) {\n    if (!this.showText) {\n      return;\n    }\n    const {\n      width\n    } = this.textEl.nativeElement.getBoundingClientRect();\n    const oldScale = this.resizeScale;\n    if (width === 0) {\n      this.resizeScale = 1;\n    } else {\n      const availableSpace = this.textRadius;\n      this.resizeScale = Math.floor(availableSpace / (width / this.resizeScale) * 100) / 100;\n    }\n    if (this.resizeScale !== oldScale) {\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n      this.cd.markForCheck();\n      if (repeat) {\n        setTimeout(() => this.scaleText(false), 50);\n      }\n    }\n  }\n  onClick(data) {\n    this.select.emit(data);\n  }\n  getLegendOptions() {\n    return {\n      scaleType: ScaleType.Ordinal,\n      colors: this.colors,\n      domain: this.domain,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n  trackBy(index, item) {\n    return item.valueArc.data.name;\n  }\n}\nGaugeComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵGaugeComponent_BaseFactory;\n  return function GaugeComponent_Factory(t) {\n    return (ɵGaugeComponent_BaseFactory || (ɵGaugeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(GaugeComponent)))(t || GaugeComponent);\n  };\n}();\nGaugeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GaugeComponent,\n  selectors: [[\"ngx-charts-gauge\"]],\n  contentQueries: function GaugeComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  viewQuery: function GaugeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c45, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textEl = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    min: \"min\",\n    max: \"max\",\n    textValue: \"textValue\",\n    units: \"units\",\n    bigSegments: \"bigSegments\",\n    smallSegments: \"smallSegments\",\n    results: \"results\",\n    showAxis: \"showAxis\",\n    startAngle: \"startAngle\",\n    angleSpan: \"angleSpan\",\n    activeEntries: \"activeEntries\",\n    axisTickFormatting: \"axisTickFormatting\",\n    tooltipDisabled: \"tooltipDisabled\",\n    valueFormatting: \"valueFormatting\",\n    showText: \"showText\",\n    margin: \"margin\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"gauge\", \"chart\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-gauge-axis\", \"\", 3, \"bigSegments\", \"smallSegments\", \"min\", \"max\", \"radius\", \"angleSpan\", \"valueScale\", \"startAngle\", \"tickFormatting\", 4, \"ngIf\"], [\"alignment-baseline\", \"central\", 3, \"textAnchor\", 4, \"ngIf\"], [\"ngx-charts-gauge-arc\", \"\", 3, \"backgroundArc\", \"valueArc\", \"cornerRadius\", \"colors\", \"isActive\", \"tooltipDisabled\", \"tooltipTemplate\", \"valueFormatting\", \"animations\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-gauge-axis\", \"\", 3, \"bigSegments\", \"smallSegments\", \"min\", \"max\", \"radius\", \"angleSpan\", \"valueScale\", \"startAngle\", \"tickFormatting\"], [\"alignment-baseline\", \"central\"], [\"textEl\", \"\"], [\"x\", \"0\", \"dy\", \"0\"], [\"x\", \"0\", \"dy\", \"1.2em\"]],\n  template: function GaugeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function GaugeComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function GaugeComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function GaugeComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, GaugeComponent__svg_g_2_Template, 2, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, GaugeComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, GaugeComponent__svg_text_4_Template, 6, 5, \"text\", 4);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.arcs)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showText);\n    }\n  },\n  dependencies: [ChartComponent, GaugeArcComponent, GaugeAxisComponent, i2.NgForOf, i2.NgIf],\n  styles: [_c25, \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-gauge',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    textValue: [{\n      type: Input\n    }],\n    units: [{\n      type: Input\n    }],\n    bigSegments: [{\n      type: Input\n    }],\n    smallSegments: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    showAxis: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    angleSpan: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    axisTickFormatting: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    showText: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    textEl: [{\n      type: ViewChild,\n      args: ['textEl']\n    }]\n  });\n})();\nclass GaugeModule {}\nGaugeModule.ɵfac = function GaugeModule_Factory(t) {\n  return new (t || GaugeModule)();\n};\nGaugeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GaugeModule\n});\nGaugeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule, PieChartModule, BarChartModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule, PieChartModule, BarChartModule],\n      declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n      exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n    }]\n  }], null, null);\n})();\n\n// The export is needed here to generate a valid polyfills.metadata.json file\nfunction ngxChartsPolyfills() {\n  // IE11 fix\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n  }\n}\nclass NgxChartsModule {\n  constructor() {\n    ngxChartsPolyfills();\n  }\n}\nNgxChartsModule.ɵfac = function NgxChartsModule_Factory(t) {\n  return new (t || NgxChartsModule)();\n};\nNgxChartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxChartsModule\n});\nNgxChartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [ChartCommonModule, AreaChartModule, BarChartModule, BoxChartModule, BubbleChartModule, HeatMapModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxChartsModule, [{\n    type: NgModule,\n    args: [{\n      exports: [ChartCommonModule, AreaChartModule, BarChartModule, BoxChartModule, BubbleChartModule, HeatMapModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nfunction tickFormat(fieldType, groupByType) {\n  return function (label) {\n    if (label === 'No Value' || label === 'Other') {\n      return label;\n    }\n    if (fieldType === 'date' && groupByType === 'groupBy') {\n      const formatter = timeFormat('MM/DD/YYYY');\n      return formatter(label);\n    }\n    return label.toString();\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/*\n * Public API Surface of ngx-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AdvancedLegendComponent, AdvancedPieChartComponent, AreaChartComponent, AreaChartModule, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaComponent, AreaSeriesComponent, AxesModule, AxisLabelComponent, BarChartModule, BarChartType, BarComponent, BarHorizontal2DComponent, BarHorizontalComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarLabelComponent, BarOrientation, BarVertical2DComponent, BarVerticalComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BaseChartComponent, BoxChartComponent, BoxChartModule, BoxComponent, BoxSeriesComponent, BubbleChartComponent, BubbleChartModule, BubbleSeriesComponent, CardComponent, CardSeriesComponent, ChartCommonModule, ChartComponent, CircleComponent, CircleSeriesComponent, ColorHelper, CountUpDirective, D0Types, GaugeArcComponent, GaugeAxisComponent, GaugeComponent, GaugeModule, GridPanelComponent, GridPanelSeriesComponent, HeatCellSeriesComponent, HeatMapCellComponent, HeatMapComponent, HeatMapModule, LegendComponent, LegendEntryComponent, LegendPosition, LegendType, LineChartComponent, LineChartModule, LineComponent, LineSeriesComponent, LinearGaugeComponent, NgxChartsModule, NumberCardComponent, NumberCardModule, Orientation, PieArcComponent, PieChartComponent, PieChartModule, PieGridComponent, PieGridSeriesComponent, PieLabelComponent, PieSeriesComponent, PlacementTypes, PolarChartComponent, PolarChartModule, PolarSeriesComponent, ScaleLegendComponent, ScaleType, SeriesHorizontal, SeriesType, SeriesVerticalComponent, ShowTypes, StyleTypes, SvgLinearGradientComponent, SvgRadialGradientComponent, TextAnchor, Timeline, TooltipArea, TooltipContentComponent, TooltipDirective, TooltipModule, TooltipService, TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent, TreeMapModule, VisibilityObserver, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent, calculateViewDimensions, colorSets, count, decimalChecker, escapeLabel, formatLabel, getDomain, getScale, getScaleType, getTickLines, getUniqueXDomainValues, getXDomainArray, gridLayout, gridSize, hexToRgb, id, invertColor, reduceTicks, shadeRGBColor, sortByDomain, sortByTime, sortLinear, throttle, throttleable, tickFormat, trimLabel };","map":{"version":3,"names":["i0","PLATFORM_ID","Component","ViewEncapsulation","Inject","Input","ViewChild","HostBinding","HostListener","Injectable","ChangeDetectionStrategy","EventEmitter","Output","Directive","NgModule","ContentChild","i2","isPlatformBrowser","isPlatformServer","CommonModule","__decorate","DomPortalOutlet","ComponentPortal","fromEvent","debounceTime","trigger","transition","style","animate","select","brushX","scaleTime","scaleLinear","scalePoint","scaleOrdinal","scaleQuantile","scaleBand","area","curveLinear","line","arc","lineRadial","curveCardinalClosed","pie","range","min","max","quantile","interpolate","easeSinInOut","rfdc","format","d3_color","treemap","stratify","timeFormat","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","apply","now","remaining","arguments","clearTimeout","trailing","setTimeout","throttleable","duration","innerDecorator","target","key","descriptor","configurable","enumerable","get","getter","Object","defineProperty","value","PlacementTypes","caretOffset","verticalPosition","elDimensions","popoverDimensions","alignment","Top","top","Bottom","height","Center","undefined","horizontalPosition","Left","left","Right","width","PositionHelper","calculateVerticalAlignment","window","innerHeight","calculateVerticalCaret","caretDimensions","popoverPosition","calculateHorizontalAlignment","innerWidth","calculateHorizontalCaret","shouldFlip","placement","spacing","flip","positionCaret","elmDim","hostDim","positionContent","determinePlacement","TooltipContentComponent","constructor","element","renderer","platformId","cssClasses","clz","type","cssClass","ngAfterViewInit","position","bind","nativeElm","nativeElement","host","getBoundingClientRect","checkFlip","showCaret","addClass","setStyle","caretElm","onWindowResize","ɵfac","ElementRef","Renderer2","ɵcmp","NgIf","NgTemplateOutlet","prototype","selector","template","encapsulation","None","styles","decorators","title","InjectionRegisteryService","injectionService","defaults","components","Map","getByType","create","bindings","createByType","assignDefaults","component","injectComponent","register","destroy","instance","compsByType","componentType","length","idx","indexOf","splice","destroyAll","destroyByType","comps","i","appendComponent","inputs","outputs","has","set","types","push","isViewContainerRef","x","InjectionService","applicationRef","componentFactoryResolver","injector","setGlobalRootViewContainer","container","globalRootViewContainer","getRootViewContainer","_container","Error","setRootViewContainer","getComponentRootNode","hostView","rootNodes","location","getRootViewContainerNode","projectComponentBindings","bindingKeys","getOwnPropertyNames","bindingName","eventKeys","eventName","componentClass","appendLocation","portalHost","portal","componentRef","attach","ApplicationRef","ComponentFactoryResolver","Injector","ɵprov","TooltipService","LegendPosition","LegendType","ScaleType","ScaleLegendComponent","horizontal","ngOnChanges","changes","gradientValues","gradientString","colors","domain","direction","gradient","splits","pairs","reverse","forEach","c","Math","round","join","changeDetection","OnPush","valueRange","formatLabel","label","toLocaleDateString","toLocaleString","escapeLabel","replace","match","LegendEntryComponent","isActive","activate","deactivate","toggle","trimmedLabel","formattedLabel","onMouseEnter","emit","name","onMouseLeave","color","LegendComponent","cd","labelClick","labelActivate","labelDeactivate","legendEntries","update","markForCheck","getLegendEntries","items","data","findIndex","getColor","entry","activeEntries","item","find","d","trackBy","index","ChangeDetectorRef","NgForOf","ChartComponent","showLegend","animations","legendLabelClick","legendLabelActivate","legendLabelDeactivate","legendColumns","legendType","getLegendType","legendOptions","ScaleLegend","chartColumns","chartWidth","floor","view","legendWidth","scaleType","Linear","Legend","providers","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","check","offsetHeight","offsetWidth","runOutsideAngular","NgZone","ɵdir","isDate","toString","call","isNumber","BaseChartComponent","chartElement","scheme","schemeType","Ordinal","ngOnInit","bindWindowResizeEvent","visibilityObserver","subscribe","ngOnDestroy","unbindEvents","unsubscribe","results","cloneData","dims","getContainerDims","hostElem","parentNode","formatDates","g","series","j","resizeSubscription","source","subscription","pipe","e","copy","seriesItem","seriesItemCopy","assign","JSON","parse","stringify","customColors","Orientation","AxisLabelComponent","textHeight","margin","strokeWidth","textAnchor","transform","orient","y","offset","trimLabel","s","trim","slice","reduceTicks","ticks","maxTicks","reduced","modulus","getTickLines","maxLength","maxLines","totalLines","split","reduce","lines","last","pop","TextAnchor","XAxisTicksComponent","tickArguments","tickStroke","trimTicks","maxTickLength","showGridLines","rotateTicks","wrapTicks","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","Middle","maxTicksLength","maxAllowedLength","approxHeight","maxPossibleLengthForTick","isWrapTicksSupported","scale","step","updateDims","parseInt","ticksElement","getTicks","tickFormatting","tickFormat","angle","getRotationAngle","adjustedScale","bandwidth","textTransform","End","longestTick","savedText","text","tickLines","tickChunks","getMaxPossibleLengthForTick","tick","tickLength","tickTrim","len","charWidth","wordWidth","baseWidth","maxBaseWidth","cos","PI","abs","sin","getMaxTicks","maxScaleTicks","tickValues","tickWidth","tickTransform","gridLineTransform","averageCharacterWidth","maxCharacters","truncatedText","maxAllowedLines","possibleStringLength","gridLineHeight","XAxisComponent","xOrient","xAxisOffset","xAxisClassName","labelOffset","fill","stroke","padding","orientation","xAxisTickCount","emitTicksHeight","newLabelOffset","xScale","showLabel","labelText","ticksComponent","roundedRect","w","h","r","tl","tr","bl","br","retval","YAxisTicksComponent","showRefLabels","showRefLines","referenceLineLength","getApproximateAxisWidth","sign","tickSpacing","positionMiddle","chunksLength","bandWidth","heightOfLines","availableFreeSpace","referenceLines","setReferencelines","y2","y1","dy","x2","x1","Start","refMin","map","refMax","referenceAreaPath","gridLineWidth","tickHeight","maxChars","t","preferredWidth","YAxisComponent","yOrient","yAxisOffset","yAxisClassName","yAxisTickCount","emitTicksWidth","yScale","AxesModule","ɵmod","ɵinj","imports","declarations","exports","StyleTypes","ShowTypes","TooltipDirective","tooltipService","viewContainerRef","tooltipCssClass","tooltipAppendToBody","tooltipSpacing","tooltipDisabled","tooltipShowCaret","tooltipPlacement","tooltipAlignment","tooltipType","popover","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","all","tooltipImmediateExit","show","hide","listensForFocus","focus","listensForHover","mouseover","hideTooltip","onFocus","showTooltip","onBlur","contentDom","contains","onMouseClick","immediate","time","navigator","userAgent","createBoundOptions","addHideListeners","tooltip","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","event","destroyFn","tooltipTitle","tooltipTemplate","tooltipContext","ViewContainerRef","TooltipModule","entryComponents","cache","id","newId","random","pow","BarOrientation","SvgLinearGradientComponent","Vertical","Horizontal","stops","CircleComponent","onClick","classNames","Array","isArray","cx","cy","circleOpacity","pointerEvents","SeriesType","CircleSeriesComponent","Standard","barVisible","barOrientation","placementTypes","styleTypes","isSSR","gradientId","gradientFill","circle","getActiveCircle","indexActiveDataPoint","visibleValue","mapDataPointToCircle","seriesName","tooltipLabel","Time","Number","d1","radius","opacity","gradientStops","getGradientStops","getTooltipText","getTooltipMinMaxText","activateCircle","deactivateCircle","GridPanelComponent","ClassEnum","GridPanelSeriesComponent","gridPanels","getGridPanels","className","Odd","positionIndex","Even","paddingInner","class","SvgRadialGradientComponent","endOpacity","stopsInput","stopsDefault","startOpacity","AreaComponent","animationsLoaded","hasGradient","loadAnimation","getGradient","updatePathEl","areaPath","startingPath","node","attr","path","easeOutExpo","b","count","countFrom","countTo","countDecimals","countDuration","callback","startVal","endVal","countDown","decimals","dec","startTime","runCount","timestamp","frameVal","progress","finished","requestAnimationFrame","val","decimalChecker","CountUpDirective","countPrefix","countSuffix","countChange","countFinish","_countDecimals","_countTo","_countFrom","parseFloat","start","cancelAnimationFrame","animationReq","valueFormatting","root","global","MouseEvent","createMouseEvent","bubbles","cancelable","document","createEvent","initEvent","TooltipArea","anchorOpacity","anchorPos","anchorValues","showPercentage","hover","getValues","xVal","group","groupName","d0","toFixed","v","mouseMove","xPos","pageX","closestIndex","findClosestPointIndex","closestPoint","xSet","lastAnchorPos","ev","tooltipAnchor","dispatchEvent","minIndex","maxIndex","minDiff","MAX_VALUE","currentIndex","currentElement","curDiff","getToolTipText","tooltipItem","static","Timeline","onDomainChange","initialized","addBrush","getDims","offsetY","xDomain","getXDomain","getXScale","brush","updateBrush","filterId","filter","values","includes","extent","on","selection","newSelection","newDomain","invert","legend","autoScale","AdvancedLegendComponent","legendItems","labelFormatting","percentageFormatting","percentage","defaultValueFormatting","getTotal","sum","total","roundedTotal","getLegendItems","_value","displayLabel","origialLabel","COMPONENTS","ChartCommonModule","calculateViewDimensions","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","showYLabel","legendPosition","columns","xOffset","chartHeight","colorSets","selectable","ColorHelper","cs","colorDomain","generateColorScheme","colorScale","Quantile","points","valueScale","formattedValue","found","mapping","toLowerCase","getLinearGradientStops","colorValueScale","endColor","startColor","currentVal","originalOffset","getUniqueXDomainValues","valueSet","Set","add","from","getScaleType","checkDateType","allDates","every","allNumbers","getXDomainArray","xScaleMin","xScaleMax","mappedValues","sort","a","aDate","getTime","bDate","sortLinear","property","sortByDomain","aVal","bVal","aIdx","bIdx","sortByTime","AreaSeriesComponent","baseValue","stacked","normalized","updateGradient","currentArea","startingArea","xProperty","y0","curve","d0values","d1values","isInactive","AreaChartComponent","legendTitle","xAxis","yAxis","timeline","trimXAxisTicks","trimYAxisTicks","rotateXAxisTicks","maxXAxisTickLength","maxYAxisTickLength","roundDomains","timelineHeight","timelinePadding","showXAxisLabel","showYAxisLabel","filteredDomain","yDomain","getYDomain","seriesDomain","getSeriesDomain","getYScale","updateTimeline","setColors","getLegendOptions","clipPathId","clipPath","timelineWidth","timelineXDomain","timelineXScale","timelineYScale","timelineTransform","yScaleMin","yScaleMax","nice","date","num","updateDomain","updateHoveredVertical","hoveredVertical","deactivateAll","hideCircles","opts","updateYAxisWidth","updateXAxisHeight","onActivate","entries","onDeactivate","xAxisLabel","yAxisLabel","xAxisTickFormatting","yAxisTickFormatting","xAxisTicks","yAxisTicks","seriesTooltipTemplate","AreaChartNormalizedComponent","seriesType","valueOf","AreaChartStackedComponent","AreaChartModule","BarComponent","roundEdges","noBarWhenZero","hideBar","checkToHideBar","getStartingPath","getPath","getStartOpacity","getRadius","edges","ariaLabel","BarChartType","D0Types","BarLabelComponent","horizontalPadding","verticalPadding","getSize","negative","formatedValue","barX","barWidth","barY","barHeight","SeriesHorizontal","showDataLabel","dataLabelWidthChanged","barsForDataLabels","updateTooltipSettings","positive","d0Type","Normalized","bars","getLabel","bar","Stacked","offset0","offset1","tooltipText","dataLabelFormatting","updateDataLabels","section","totalPositive","totalNegative","active","dataItem","trackDataLabelBy","barLabel","click","BarHorizontalComponent","barPadding","dataLabelMaxWidth","rangeRound","onDataLabelMaxWidthChanged","size","fromLegend","BarHorizontal2DComponent","groupPadding","groupDomain","getGroupDomain","innerDomain","getInnerDomain","valueDomain","getValueDomain","groupScale","getGroupScale","innerScale","getInnerScale","getValueScale","paddingOuter","groupTransform","groupIndex","flat","BarHorizontalNormalizedComponent","barChartType","BarHorizontalStackedComponent","smallest","biggest","smallestSum","biggestSum","SeriesVerticalComponent","dataLabelHeightChanged","BarVerticalComponent","dataLabelMaxHeight","some","isNaN","onDataLabelMaxHeightChanged","BarVertical2DComponent","BarVerticalNormalizedComponent","BarVerticalStackedComponent","BarChartModule","cloneDeep","BoxComponent","boxStrokeWidth","whiskerStrokeWidth","medianLineWidth","updateLineEl","maskLineId","maskLine","boxPath","oldPath","oldLineCoordinates","getStartingLineCoordinates","nodeBar","selectAll","ease","attrTween","pathTween","lineEl","lineCoordinates","_","v1","v2","lineTween","nodeLineEl","baseVal","precision","path0","path1","cloneNode","setAttribute","n0","getTotalLength","n1","distances","dt","p0","getPointAtLength","p1","p","strokeColor","BoxSeriesComponent","counts","mappedCounts","serie","whiskers","groupCounts","quartiles","getBoxQuantiles","getLinesCoordinates","box","formattedTooltipLabel","inputData","commonX","offsetX","whiskerLineWidth","whiskerZero","whiskerOne","median","topLine","medianLine","bottomLine","verticalLine","BoxChartComponent","setScales","getUniqueBoxChartXDomainValues","legendOpts","legendOptionsConfig","BoxChartModule","getDomain","minVal","maxVal","getScale","BubbleSeriesComponent","circles","getCircles","rScale","xScaleType","yScaleType","hasRadius","hasTooltipLabel","hasSeriesName","radiusValue","BubbleChartComponent","maxRadius","minRadius","bubblePadding","rDomain","getRDomain","getRScale","getBubblePadding","yMin","xMin","yMax","xMax","Infinity","BubbleChartModule","HeatMapCellComponent","gradientUrl","animateToCurrentForm","HeatCellSeriesComponent","cells","getCells","row","cell","HeatMapComponent","innerPadding","rects","getRects","getDimension","N","L","f","yVal","rx","HeatMapModule","LineComponent","initialPath","strokeDasharray","strokeDashoffset","LineSeriesComponent","updateGradients","sortData","lineGen","getLineGenerator","areaGen","getAreaGenerator","hasRange","getRangeGenerator","outerPath","areaGradientStops","rangeFillOpacity","LineChartComponent","LineChartModule","PieLabelComponent","labelTrim","labelTrimSize","setTransforms","styleTransform","textX","textY","attrTransform","textTransition","isIE","test","startRadius","explodeSlices","innerArc","innerRadius","outerRadius","innerPos","centroid","pos","outerPos","midAngle","startAngle","endAngle","PolarSeriesComponent","circleRadius","linearScaleType","seriesColor","getAngle","cData","inactive","defaultTooltipText","twoPI","PolarChartComponent","showSeriesOnHover","yAxisMinScale","setDims","setTicks","halfWidth","halfHeight","yOffset","yAxisDims","transformYAxis","transformPlot","xValues","getXValues","yAxisScale","thetaTicks","dd","startPos","minDistance","o","radiusTicks","getYValues","PieArcComponent","cornerRadius","dblclick","getPointerEvents","calc","calculateArc","radialGradientId","updateAnimation","_current","copyOfD","interpolater","_timeout","onDblClick","preventDefault","stopPropagation","nativeEvent","PieSeriesComponent","trimLabels","maxLabelLength","pieGenerator","arcData","calculateLabelPositions","outerArc","factor","pieData","labelPositions","labelVisible","myArc","showLabels","getTooltipTitle","AdvancedPieChartComponent","nameFormatting","PieChartComponent","labels","doughnut","arcWidth","hasNoOptionalMarginsSet","translation","gridSize","minWidth","rows","cols","ceil","gridLayout","designatedTotal","res","cardWidth","cardHeight","extra","percent","PieGridSeriesComponent","layout","arcs","getArcs","other","PieGridComponent","getSeries","baselineLabelHeight","yPos","PieChartModule","PolarChartModule","calculateTextWidth","fontFamilyKey","defaultWidth","acc","curr","VERDANA_FONT_WIDTHS_16_PX","A","B","C","D","E","F","G","H","I","J","K","M","O","P","Q","R","S","T","U","V","W","X","Y","Z","k","l","m","n","q","u","z","$","CardComponent","textFontSize","bandHeight","textPadding","labelFontSize","scaleTextSSR","hasValue","card","textWidth","cardData","transformBand","paddedValue","setPadding","bandPath","scaleText","startCount","medianSize","repeat","decs","textEl","availableWidth","availableHeight","resizeScale","bandColor","textColor","hexToRgb","rgb","invertColor","yiq","depth","shadeRGBColor","CardSeriesComponent","emptyColor","sortedLengths","cards","getCards","emptySlots","yPadding","xPadding","valueColor","cardColor","NumberCardComponent","clickable","observers","NumberCardModule","TreeMapCellComponent","cellData","getTextColor","TreeMapCellSeriesComponent","children","x0","TreeMapComponent","rootNode","isRoot","parentId","TreeMapModule","ElementType","LinearGaugeComponent","valueResizeScale","unitsResizeScale","valueTextTransform","valueTranslate","unitsTextTransform","unitsTranslate","Value","Units","hasPreviousValue","previousValue","displayValue","getDisplayValue","transformLine","el","valueTextEl","unitsTextEl","oldScale","resizeScaleWidth","resizeScaleHeight","units","GaugeArcComponent","backgroundArc","valueArc","GaugeAxisComponent","rotate","rotationAngle","bigTickSegment","angleSpan","bigSegments","smallTickSegment","smallSegments","big","small","startDistance","textDist","angleDeg","getTextAnchor","skip","getTickPath","smallAngleDeg","smallAngle","lineGenerator","GaugeComponent","showAxis","showText","rotation","availableRadius","radiusPerArc","textRadius","dataMin","dataMax","textValue","availableSpace","axisTickFormatting","GaugeModule","ngxChartsPolyfills","SVGElement","HTMLDivElement","NgxChartsModule","fieldType","groupByType","formatter"],"sources":["C:/Program Files (x86)/Kodlar/Furkan_ChProject/ChProject_Client/ChProject-Angular-RectangleDrawer/node_modules/@swimlane/ngx-charts/fesm2020/swimlane-ngx-charts.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, ViewEncapsulation, Inject, Input, ViewChild, HostBinding, HostListener, Injectable, ChangeDetectionStrategy, EventEmitter, Output, Directive, NgModule, ContentChild } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { select } from 'd3-selection';\nimport { brushX } from 'd3-brush';\nimport { scaleTime, scaleLinear, scalePoint, scaleOrdinal, scaleQuantile, scaleBand } from 'd3-scale';\nimport { area, curveLinear, line, arc, lineRadial, curveCardinalClosed, pie } from 'd3-shape';\nimport { range, min, max, quantile } from 'd3-array';\nimport { interpolate } from 'd3-interpolate';\nimport { easeSinInOut } from 'd3-ease';\nimport rfdc from 'rfdc';\nimport { format } from 'd3-format';\nimport * as d3_color from 'd3-color';\nimport { treemap, stratify } from 'd3-hierarchy';\nimport { timeFormat } from 'd3-time-format';\n\n/**\n * Throttle a function\n *\n */\nfunction throttle(func, wait, options) {\n    options = options || {};\n    let context;\n    let args;\n    let result;\n    let timeout = null;\n    let previous = 0;\n    function later() {\n        previous = options.leading === false ? 0 : +new Date();\n        timeout = null;\n        result = func.apply(context, args);\n    }\n    return function () {\n        const now = +new Date();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        const remaining = wait - (now - previous);\n        context = this;\n        // eslint-disable-next-line prefer-rest-params\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nfunction throttleable(duration, options) {\n    return function innerDecorator(target, key, descriptor) {\n        return {\n            configurable: true,\n            enumerable: descriptor.enumerable,\n            get: function getter() {\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: descriptor.enumerable,\n                    value: throttle(descriptor.value, duration, options)\n                });\n                return this[key];\n            }\n        };\n    };\n}\n\nvar PlacementTypes;\n(function (PlacementTypes) {\n    PlacementTypes[\"Top\"] = \"top\";\n    PlacementTypes[\"Bottom\"] = \"bottom\";\n    PlacementTypes[\"Left\"] = \"left\";\n    PlacementTypes[\"Right\"] = \"right\";\n    PlacementTypes[\"Center\"] = \"center\";\n})(PlacementTypes || (PlacementTypes = {}));\n\nconst caretOffset = 7;\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n    if (alignment === PlacementTypes.Top) {\n        return elDimensions.top - caretOffset;\n    }\n    if (alignment === PlacementTypes.Bottom) {\n        return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n    }\n    if (alignment === PlacementTypes.Center) {\n        return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n    }\n    return undefined;\n}\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n    if (alignment === PlacementTypes.Left) {\n        return elDimensions.left - caretOffset;\n    }\n    if (alignment === PlacementTypes.Right) {\n        return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n    }\n    if (alignment === PlacementTypes.Center) {\n        return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n    }\n    return undefined;\n}\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\nclass PositionHelper {\n    /**\n     * Calculate vertical alignment position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment) {\n        let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n        if (result + popoverDimensions.height > window.innerHeight) {\n            result = window.innerHeight - popoverDimensions.height;\n        }\n        return result;\n    }\n    /**\n     * Calculate vertical caret position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n        let result;\n        if (alignment === PlacementTypes.Top) {\n            result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n        }\n        if (alignment === PlacementTypes.Bottom) {\n            result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n        }\n        if (alignment === PlacementTypes.Center) {\n            result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n        }\n        const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n        if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n            result += popoverPosition + popoverDimensions.height - window.innerHeight;\n        }\n        return result;\n    }\n    /**\n     * Calculate horz alignment position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment) {\n        let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n        if (result + popoverDimensions.width > window.innerWidth) {\n            result = window.innerWidth - popoverDimensions.width;\n        }\n        return result;\n    }\n    /**\n     * Calculate horz caret position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n        let result;\n        if (alignment === PlacementTypes.Left) {\n            result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n        }\n        if (alignment === PlacementTypes.Right) {\n            result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n        }\n        if (alignment === PlacementTypes.Center) {\n            result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n        }\n        const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n        if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n            result += popoverPosition + popoverDimensions.width - window.innerWidth;\n        }\n        return result;\n    }\n    /**\n     * Checks if the element's position should be flipped\n     *\n     * @memberOf PositionHelper\n     */\n    static shouldFlip(elDimensions, popoverDimensions, placement, spacing) {\n        let flip = false;\n        if (placement === PlacementTypes.Right) {\n            if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Left) {\n            if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Top) {\n            if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Bottom) {\n            if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n                flip = true;\n            }\n        }\n        return flip;\n    }\n    /**\n     * Position caret\n     *\n     * @memberOf PositionHelper\n     */\n    static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment) {\n        let top = 0;\n        let left = 0;\n        if (placement === PlacementTypes.Right) {\n            left = -7;\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Left) {\n            left = elmDim.width;\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Top) {\n            top = elmDim.height;\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Bottom) {\n            top = -7;\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        return { top, left };\n    }\n    /**\n     * Position content\n     *\n     * @memberOf PositionHelper\n     */\n    static positionContent(placement, elmDim, hostDim, spacing, alignment) {\n        let top = 0;\n        let left = 0;\n        if (placement === PlacementTypes.Right) {\n            left = hostDim.left + hostDim.width + spacing;\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Left) {\n            left = hostDim.left - elmDim.width - spacing;\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Top) {\n            top = hostDim.top - elmDim.height - spacing;\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Bottom) {\n            top = hostDim.top + hostDim.height + spacing;\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n        }\n        return { top, left };\n    }\n    /**\n     * Determine placement based on flip\n     *\n     * @memberOf PositionHelper\n     */\n    static determinePlacement(placement, elmDim, hostDim, spacing) {\n        const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n        if (shouldFlip) {\n            if (placement === PlacementTypes.Right) {\n                return PlacementTypes.Left;\n            }\n            else if (placement === PlacementTypes.Left) {\n                return PlacementTypes.Right;\n            }\n            else if (placement === PlacementTypes.Top) {\n                return PlacementTypes.Bottom;\n            }\n            else if (placement === PlacementTypes.Bottom) {\n                return PlacementTypes.Top;\n            }\n        }\n        return placement;\n    }\n}\n\nclass TooltipContentComponent {\n    constructor(element, renderer, platformId) {\n        this.element = element;\n        this.renderer = renderer;\n        this.platformId = platformId;\n    }\n    get cssClasses() {\n        let clz = 'ngx-charts-tooltip-content';\n        clz += ` position-${this.placement}`;\n        clz += ` type-${this.type}`;\n        clz += ` ${this.cssClass}`;\n        return clz;\n    }\n    ngAfterViewInit() {\n        setTimeout(this.position.bind(this));\n    }\n    position() {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const nativeElm = this.element.nativeElement;\n        const hostDim = this.host.nativeElement.getBoundingClientRect();\n        // if no dims were found, never show\n        if (!hostDim.height && !hostDim.width)\n            return;\n        const elmDim = nativeElm.getBoundingClientRect();\n        this.checkFlip(hostDim, elmDim);\n        this.positionContent(nativeElm, hostDim, elmDim);\n        if (this.showCaret) {\n            this.positionCaret(hostDim, elmDim);\n        }\n        // animate its entry\n        setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n    }\n    positionContent(nativeElm, hostDim, elmDim) {\n        const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n        this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n        this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n    }\n    positionCaret(hostDim, elmDim) {\n        const caretElm = this.caretElm.nativeElement;\n        const caretDimensions = caretElm.getBoundingClientRect();\n        const { top, left } = PositionHelper.positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment);\n        this.renderer.setStyle(caretElm, 'top', `${top}px`);\n        this.renderer.setStyle(caretElm, 'left', `${left}px`);\n    }\n    checkFlip(hostDim, elmDim) {\n        this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n    }\n    onWindowResize() {\n        this.position();\n    }\n}\nTooltipContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipContentComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nTooltipContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipContentComponent, selector: \"ngx-tooltip-content\", inputs: { host: \"host\", showCaret: \"showCaret\", type: \"type\", placement: \"placement\", alignment: \"alignment\", spacing: \"spacing\", cssClass: \"cssClass\", title: \"title\", template: \"template\", context: \"context\" }, host: { listeners: { \"window:resize\": \"onWindowResize()\" }, properties: { \"class\": \"this.cssClasses\" } }, viewQueries: [{ propertyName: \"caretElm\", first: true, predicate: [\"caretElm\"], descendants: true }], ngImport: i0, template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], encapsulation: i0.ViewEncapsulation.None });\n__decorate([\n    throttleable(100)\n], TooltipContentComponent.prototype, \"onWindowResize\", null);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipContentComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-tooltip-content', template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { host: [{\n                type: Input\n            }], showCaret: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], placement: [{\n                type: Input\n            }], alignment: [{\n                type: Input\n            }], spacing: [{\n                type: Input\n            }], cssClass: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], template: [{\n                type: Input\n            }], context: [{\n                type: Input\n            }], caretElm: [{\n                type: ViewChild,\n                args: ['caretElm']\n            }], cssClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], onWindowResize: [{\n                type: HostListener,\n                args: ['window:resize']\n            }] } });\n\nclass InjectionRegisteryService {\n    constructor(injectionService) {\n        this.injectionService = injectionService;\n        this.defaults = {};\n        this.components = new Map();\n    }\n    getByType(type = this.type) {\n        return this.components.get(type);\n    }\n    create(bindings) {\n        return this.createByType(this.type, bindings);\n    }\n    createByType(type, bindings) {\n        bindings = this.assignDefaults(bindings);\n        const component = this.injectComponent(type, bindings);\n        this.register(type, component);\n        return component;\n    }\n    destroy(instance) {\n        const compsByType = this.components.get(instance.componentType);\n        if (compsByType && compsByType.length) {\n            const idx = compsByType.indexOf(instance);\n            if (idx > -1) {\n                const component = compsByType[idx];\n                component.destroy();\n                compsByType.splice(idx, 1);\n            }\n        }\n    }\n    destroyAll() {\n        this.destroyByType(this.type);\n    }\n    destroyByType(type) {\n        const comps = this.components.get(type);\n        if (comps && comps.length) {\n            let i = comps.length - 1;\n            while (i >= 0) {\n                this.destroy(comps[i--]);\n            }\n        }\n    }\n    injectComponent(type, bindings) {\n        return this.injectionService.appendComponent(type, bindings);\n    }\n    assignDefaults(bindings) {\n        const inputs = { ...this.defaults.inputs };\n        const outputs = { ...this.defaults.outputs };\n        if (!bindings.inputs && !bindings.outputs) {\n            bindings = { inputs: bindings };\n        }\n        if (inputs) {\n            bindings.inputs = { ...inputs, ...bindings.inputs };\n        }\n        if (outputs) {\n            bindings.outputs = { ...outputs, ...bindings.outputs };\n        }\n        return bindings;\n    }\n    register(type, component) {\n        if (!this.components.has(type)) {\n            this.components.set(type, []);\n        }\n        const types = this.components.get(type);\n        types.push(component);\n    }\n}\n\nfunction isViewContainerRef(x) {\n    return x.element;\n}\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\nclass InjectionService {\n    constructor(applicationRef, componentFactoryResolver, injector) {\n        this.applicationRef = applicationRef;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.injector = injector;\n    }\n    /**\n     * Sets a default global root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     */\n    static setGlobalRootViewContainer(container) {\n        InjectionService.globalRootViewContainer = container;\n    }\n    /**\n     * Gets the root view container to inject the component to.\n     *\n     * @memberOf InjectionService\n     */\n    getRootViewContainer() {\n        if (this._container)\n            return this._container;\n        if (InjectionService.globalRootViewContainer)\n            return InjectionService.globalRootViewContainer;\n        if (this.applicationRef.components.length)\n            return this.applicationRef.components[0];\n        throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.');\n    }\n    /**\n     * Overrides the default root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     *\n     * @memberOf InjectionService\n     */\n    setRootViewContainer(container) {\n        this._container = container;\n    }\n    /**\n     * Gets the html element for a component ref.\n     *\n     * @param componentRef\n     *\n     * @memberOf InjectionService\n     */\n    getComponentRootNode(component) {\n        if (isViewContainerRef(component)) {\n            return component.element.nativeElement;\n        }\n        if (component.hostView && component.hostView.rootNodes.length > 0) {\n            return component.hostView.rootNodes[0];\n        }\n        // the top most component root node has no `hostView`\n        return component.location.nativeElement;\n    }\n    /**\n     * Gets the root component container html element.\n     *\n     * @memberOf InjectionService\n     */\n    getRootViewContainerNode(component) {\n        return this.getComponentRootNode(component);\n    }\n    /**\n     * Projects the bindings onto the component\n     *\n     * @param component\n     * @param options\n     *\n     * @memberOf InjectionService\n     */\n    projectComponentBindings(component, bindings) {\n        if (bindings) {\n            if (bindings.inputs !== undefined) {\n                const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n                for (const bindingName of bindingKeys) {\n                    component.instance[bindingName] = bindings.inputs[bindingName];\n                }\n            }\n            if (bindings.outputs !== undefined) {\n                const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n                for (const eventName of eventKeys) {\n                    component.instance[eventName] = bindings.outputs[eventName];\n                }\n            }\n        }\n        return component;\n    }\n    /**\n     * Appends a component to a adjacent location\n     *\n     * @param componentClass\n     * @param [options={}]\n     * @param [location]\n     *\n     * @memberOf InjectionService\n     */\n    appendComponent(componentClass, bindings = {}, location) {\n        if (!location)\n            location = this.getRootViewContainer();\n        const appendLocation = this.getComponentRootNode(location);\n        const portalHost = new DomPortalOutlet(appendLocation, this.componentFactoryResolver, this.applicationRef, this.injector);\n        const portal = new ComponentPortal(componentClass);\n        const componentRef = portalHost.attach(portal);\n        this.projectComponentBindings(componentRef, bindings);\n        return componentRef;\n    }\n}\nInjectionService.globalRootViewContainer = null;\nInjectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService, deps: [{ token: i0.ApplicationRef }, { token: i0.ComponentFactoryResolver }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nInjectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.ApplicationRef }, { type: i0.ComponentFactoryResolver }, { type: i0.Injector }]; } });\n\nclass TooltipService extends InjectionRegisteryService {\n    constructor(injectionService) {\n        super(injectionService);\n        this.type = TooltipContentComponent;\n    }\n}\nTooltipService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService, deps: [{ token: InjectionService }], target: i0.ɵɵFactoryTarget.Injectable });\nTooltipService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: InjectionService }]; } });\n\nvar LegendPosition;\n(function (LegendPosition) {\n    LegendPosition[\"Right\"] = \"right\";\n    LegendPosition[\"Below\"] = \"below\";\n})(LegendPosition || (LegendPosition = {}));\nvar LegendType;\n(function (LegendType) {\n    LegendType[\"ScaleLegend\"] = \"scaleLegend\";\n    LegendType[\"Legend\"] = \"legend\";\n})(LegendType || (LegendType = {}));\n\nvar ScaleType;\n(function (ScaleType) {\n    ScaleType[\"Time\"] = \"time\";\n    ScaleType[\"Linear\"] = \"linear\";\n    ScaleType[\"Ordinal\"] = \"ordinal\";\n    ScaleType[\"Quantile\"] = \"quantile\";\n})(ScaleType || (ScaleType = {}));\n\nclass ScaleLegendComponent {\n    constructor() {\n        this.horizontal = false;\n    }\n    ngOnChanges(changes) {\n        const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n        const direction = this.horizontal ? 'right' : 'bottom';\n        this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;\n    }\n    /**\n     * Generates the string used in the gradient stylesheet properties\n     * @param colors array of colors\n     * @param splits array of splits on a scale of (0, 1)\n     */\n    gradientString(colors, splits) {\n        // add the 100%\n        splits.push(1);\n        const pairs = [];\n        colors.reverse().forEach((c, i) => {\n            pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n        });\n        return pairs.join(', ');\n    }\n}\nScaleLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScaleLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nScaleLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: ScaleLegendComponent, selector: \"ngx-charts-scale-legend\", inputs: { valueRange: \"valueRange\", colors: \"colors\", height: \"height\", width: \"width\", horizontal: \"horizontal\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScaleLegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-scale-legend', template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"] }]\n        }], propDecorators: { valueRange: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }] } });\n\n/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\nfunction formatLabel(label) {\n    if (label instanceof Date) {\n        label = label.toLocaleDateString();\n    }\n    else {\n        label = label.toLocaleString();\n    }\n    return label;\n}\n/**\n * Escapes a label.\n *\n * @export\n */\nfunction escapeLabel(label) {\n    return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n        return {\n            '&': '&amp;',\n            // tslint:disable-next-line: quotemark\n            \"'\": '&#x27;',\n            '`': '&#x60;',\n            '\"': '&quot;',\n            '<': '&lt;',\n            '>': '&gt;'\n        }[match];\n    });\n}\n\nclass LegendEntryComponent {\n    constructor() {\n        this.isActive = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.toggle = new EventEmitter();\n    }\n    get trimmedLabel() {\n        return this.formattedLabel || '(empty)';\n    }\n    onMouseEnter() {\n        this.activate.emit({ name: this.label });\n    }\n    onMouseLeave() {\n        this.deactivate.emit({ name: this.label });\n    }\n}\nLegendEntryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendEntryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nLegendEntryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LegendEntryComponent, selector: \"ngx-charts-legend-entry\", inputs: { color: \"color\", label: \"label\", formattedLabel: \"formattedLabel\", isActive: \"isActive\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", toggle: \"toggle\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, ngImport: i0, template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendEntryComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ngx-charts-legend-entry',\n                    template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { color: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], formattedLabel: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], toggle: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass LegendComponent {\n    constructor(cd) {\n        this.cd = cd;\n        this.horizontal = false;\n        this.labelClick = new EventEmitter();\n        this.labelActivate = new EventEmitter();\n        this.labelDeactivate = new EventEmitter();\n        this.legendEntries = [];\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.cd.markForCheck();\n        this.legendEntries = this.getLegendEntries();\n    }\n    getLegendEntries() {\n        const items = [];\n        for (const label of this.data) {\n            const formattedLabel = formatLabel(label);\n            const idx = items.findIndex(i => {\n                return i.label === formattedLabel;\n            });\n            if (idx === -1) {\n                items.push({\n                    label,\n                    formattedLabel,\n                    color: this.colors.getColor(label)\n                });\n            }\n        }\n        return items;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.label === d.name;\n        });\n        return item !== undefined;\n    }\n    activate(item) {\n        this.labelActivate.emit(item);\n    }\n    deactivate(item) {\n        this.labelDeactivate.emit(item);\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LegendComponent, selector: \"ngx-charts-legend\", inputs: { data: \"data\", title: \"title\", colors: \"colors\", height: \"height\", width: \"width\", activeEntries: \"activeEntries\", horizontal: \"horizontal\" }, outputs: { labelClick: \"labelClick\", labelActivate: \"labelActivate\", labelDeactivate: \"labelDeactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"], components: [{ type: LegendEntryComponent, selector: \"ngx-charts-legend-entry\", inputs: [\"color\", \"label\", \"formattedLabel\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"toggle\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-legend', template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }], labelClick: [{\n                type: Output\n            }], labelActivate: [{\n                type: Output\n            }], labelDeactivate: [{\n                type: Output\n            }] } });\n\nclass ChartComponent {\n    constructor() {\n        this.showLegend = false;\n        this.animations = true;\n        this.legendLabelClick = new EventEmitter();\n        this.legendLabelActivate = new EventEmitter();\n        this.legendLabelDeactivate = new EventEmitter();\n        this.LegendPosition = LegendPosition;\n        this.LegendType = LegendType;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        let legendColumns = 0;\n        if (this.showLegend) {\n            this.legendType = this.getLegendType();\n            if (!this.legendOptions || this.legendOptions.position === LegendPosition.Right) {\n                if (this.legendType === LegendType.ScaleLegend) {\n                    legendColumns = 1;\n                }\n                else {\n                    legendColumns = 2;\n                }\n            }\n        }\n        const chartColumns = 12 - legendColumns;\n        this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\n        this.legendWidth =\n            !this.legendOptions || this.legendOptions.position === LegendPosition.Right\n                ? Math.floor((this.view[0] * legendColumns) / 12.0)\n                : this.chartWidth;\n    }\n    getLegendType() {\n        return this.legendOptions.scaleType === ScaleType.Linear ? LegendType.ScaleLegend : LegendType.Legend;\n    }\n}\nChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: ChartComponent, selector: \"ngx-charts-chart\", inputs: { view: \"view\", showLegend: \"showLegend\", legendOptions: \"legendOptions\", legendType: \"legendType\", activeEntries: \"activeEntries\", animations: \"animations\" }, outputs: { legendLabelClick: \"legendLabelClick\", legendLabelActivate: \"legendLabelActivate\", legendLabelDeactivate: \"legendLabelDeactivate\" }, providers: [TooltipService], usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [style.height.px]=\"view[1]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `, isInline: true, components: [{ type: ScaleLegendComponent, selector: \"ngx-charts-scale-legend\", inputs: [\"valueRange\", \"colors\", \"height\", \"width\", \"horizontal\"] }, { type: LegendComponent, selector: \"ngx-charts-legend\", inputs: [\"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"horizontal\"], outputs: [\"labelClick\", \"labelActivate\", \"labelDeactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    providers: [TooltipService],\n                    selector: 'ngx-charts-chart',\n                    template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [style.height.px]=\"view[1]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { view: [{\n                type: Input\n            }], showLegend: [{\n                type: Input\n            }], legendOptions: [{\n                type: Input\n            }], legendType: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], legendLabelClick: [{\n                type: Output\n            }], legendLabelActivate: [{\n                type: Output\n            }], legendLabelDeactivate: [{\n                type: Output\n            }] } });\n\n/**\n * Visibility Observer\n */\nclass VisibilityObserver {\n    constructor(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.visible = new EventEmitter();\n        this.isVisible = false;\n        this.runCheck();\n    }\n    destroy() {\n        clearTimeout(this.timeout);\n    }\n    onVisibilityChange() {\n        // trigger zone recalc for columns\n        this.zone.run(() => {\n            this.isVisible = true;\n            this.visible.emit(true);\n        });\n    }\n    runCheck() {\n        const check = () => {\n            if (!this.element) {\n                return;\n            }\n            // https://davidwalsh.name/offsetheight-visibility\n            const { offsetHeight, offsetWidth } = this.element.nativeElement;\n            if (offsetHeight && offsetWidth) {\n                clearTimeout(this.timeout);\n                this.onVisibilityChange();\n            }\n            else {\n                clearTimeout(this.timeout);\n                this.zone.runOutsideAngular(() => {\n                    this.timeout = setTimeout(() => check(), 100);\n                });\n            }\n        };\n        this.zone.runOutsideAngular(() => {\n            this.timeout = setTimeout(() => check());\n        });\n    }\n}\nVisibilityObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: VisibilityObserver, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nVisibilityObserver.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: VisibilityObserver, selector: \"visibility-observer\", outputs: { visible: \"visible\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: VisibilityObserver, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'visibility-observer'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { visible: [{\n                type: Output\n            }] } });\n\nfunction isDate(value) {\n    return toString.call(value) === '[object Date]';\n}\nfunction isNumber(value) {\n    return typeof value === 'number';\n}\n\nclass BaseChartComponent {\n    constructor(chartElement, zone, cd, platformId) {\n        this.chartElement = chartElement;\n        this.zone = zone;\n        this.cd = cd;\n        this.platformId = platformId;\n        this.scheme = 'cool';\n        this.schemeType = ScaleType.Ordinal;\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.animations = false;\n        }\n    }\n    ngAfterViewInit() {\n        this.bindWindowResizeEvent();\n        // listen for visibility of the element for hidden by default scenario\n        this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n        this.visibilityObserver.visible.subscribe(this.update.bind(this));\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n        if (this.visibilityObserver) {\n            this.visibilityObserver.visible.unsubscribe();\n            this.visibilityObserver.destroy();\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        if (this.results) {\n            this.results = this.cloneData(this.results);\n        }\n        else {\n            this.results = [];\n        }\n        if (this.view) {\n            this.width = this.view[0];\n            this.height = this.view[1];\n        }\n        else {\n            const dims = this.getContainerDims();\n            if (dims) {\n                this.width = dims.width;\n                this.height = dims.height;\n            }\n        }\n        // default values if width or height are 0 or undefined\n        if (!this.width) {\n            this.width = 600;\n        }\n        if (!this.height) {\n            this.height = 400;\n        }\n        this.width = Math.floor(this.width);\n        this.height = Math.floor(this.height);\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    }\n    getContainerDims() {\n        let width;\n        let height;\n        const hostElem = this.chartElement.nativeElement;\n        if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {\n            // Get the container dimensions\n            const dims = hostElem.parentNode.getBoundingClientRect();\n            width = dims.width;\n            height = dims.height;\n        }\n        if (width && height) {\n            return { width, height };\n        }\n        return null;\n    }\n    /**\n     * Converts all date objects that appear as name\n     * into formatted date strings\n     */\n    formatDates() {\n        for (let i = 0; i < this.results.length; i++) {\n            const g = this.results[i];\n            g.label = g.name;\n            if (isDate(g.label)) {\n                g.label = g.label.toLocaleDateString();\n            }\n            if (g.series) {\n                for (let j = 0; j < g.series.length; j++) {\n                    const d = g.series[j];\n                    d.label = d.name;\n                    if (isDate(d.label)) {\n                        d.label = d.label.toLocaleDateString();\n                    }\n                }\n            }\n        }\n    }\n    unbindEvents() {\n        if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n        }\n    }\n    bindWindowResizeEvent() {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const source = fromEvent(window, 'resize');\n        const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n            this.update();\n            if (this.cd) {\n                this.cd.markForCheck();\n            }\n        });\n        this.resizeSubscription = subscription;\n    }\n    /**\n     * Clones the data into a new object\n     *\n     * @memberOf BaseChart\n     */\n    cloneData(data) {\n        const results = [];\n        for (const item of data) {\n            const copy = {\n                name: item['name']\n            };\n            if (item['value'] !== undefined) {\n                copy['value'] = item['value'];\n            }\n            if (item['series'] !== undefined) {\n                copy['series'] = [];\n                for (const seriesItem of item['series']) {\n                    const seriesItemCopy = Object.assign({}, seriesItem);\n                    copy['series'].push(seriesItemCopy);\n                }\n            }\n            if (item['extra'] !== undefined) {\n                copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n            }\n            results.push(copy);\n        }\n        return results;\n    }\n}\nBaseChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseChartComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nBaseChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BaseChartComponent, selector: \"base-chart\", inputs: { results: \"results\", view: \"view\", scheme: \"scheme\", schemeType: \"schemeType\", customColors: \"customColors\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: ` <div></div> `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'base-chart',\n                    template: ` <div></div> `\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { results: [{\n                type: Input\n            }], view: [{\n                type: Input\n            }], scheme: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], customColors: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nvar Orientation;\n(function (Orientation) {\n    Orientation[\"Top\"] = \"top\";\n    Orientation[\"Bottom\"] = \"bottom\";\n    Orientation[\"Left\"] = \"left\";\n    Orientation[\"Right\"] = \"right\";\n})(Orientation || (Orientation = {}));\n\nclass AxisLabelComponent {\n    constructor(element) {\n        this.textHeight = 25;\n        this.margin = 5;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.strokeWidth = '0.01';\n        this.textAnchor = 'middle';\n        this.transform = '';\n        switch (this.orient) {\n            case Orientation.Top:\n                this.y = this.offset;\n                this.x = this.width / 2;\n                break;\n            case Orientation.Bottom:\n                this.y = this.offset;\n                this.x = this.width / 2;\n                break;\n            case Orientation.Left:\n                this.y = -(this.offset + this.textHeight + this.margin);\n                this.x = -this.height / 2;\n                this.transform = 'rotate(270)';\n                break;\n            case Orientation.Right:\n                this.y = this.offset + this.margin;\n                this.x = -this.height / 2;\n                this.transform = 'rotate(270)';\n                break;\n            default:\n        }\n    }\n}\nAxisLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxisLabelComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nAxisLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: { orient: \"orient\", label: \"label\", offset: \"offset\", width: \"width\", height: \"height\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxisLabelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-axis-label]',\n                    template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { orient: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }] } });\n\nfunction trimLabel(s, max = 16) {\n    if (typeof s !== 'string') {\n        if (typeof s === 'number') {\n            return s + '';\n        }\n        else {\n            return '';\n        }\n    }\n    s = s.trim();\n    if (s.length <= max) {\n        return s;\n    }\n    else {\n        return `${s.slice(0, max)}...`;\n    }\n}\n\nfunction reduceTicks(ticks, maxTicks) {\n    if (ticks.length > maxTicks) {\n        const reduced = [];\n        const modulus = Math.floor(ticks.length / maxTicks);\n        for (let i = 0; i < ticks.length; i++) {\n            if (i % modulus === 0) {\n                reduced.push(ticks[i]);\n            }\n        }\n        ticks = reduced;\n    }\n    return ticks;\n}\nfunction getTickLines(label, maxLength, maxLines) {\n    let totalLines = (label || '')\n        .toString()\n        .split(/\\s+/)\n        .reduce((lines, line) => {\n        const last = (lines.pop() || '') + ' ';\n        return last.length + line.length > maxLength ? [...lines, last.trim(), line.trim()] : [...lines, last + line];\n    }, []);\n    if (totalLines.length > maxLines) {\n        totalLines = totalLines.splice(0, maxLines);\n        totalLines[totalLines.length - 1] += '...';\n    }\n    return totalLines;\n}\n\nvar TextAnchor;\n(function (TextAnchor) {\n    TextAnchor[\"Start\"] = \"start\";\n    TextAnchor[\"Middle\"] = \"middle\";\n    TextAnchor[\"End\"] = \"end\";\n})(TextAnchor || (TextAnchor = {}));\n\nclass XAxisTicksComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.trimTicks = true;\n        this.maxTickLength = 16;\n        this.showGridLines = false;\n        this.rotateTicks = true;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.verticalSpacing = 20;\n        this.rotateLabels = false;\n        this.innerTickSize = 6;\n        this.outerTickSize = 6;\n        this.tickPadding = 3;\n        this.textAnchor = TextAnchor.Middle;\n        this.maxTicksLength = 0;\n        this.maxAllowedLength = 16;\n        this.height = 0;\n        this.approxHeight = 10;\n        this.maxPossibleLengthForTick = 16;\n    }\n    get isWrapTicksSupported() {\n        return this.wrapTicks && this.scale.step;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngAfterViewInit() {\n        setTimeout(() => this.updateDims());\n    }\n    updateDims() {\n        if (!isPlatformBrowser(this.platformId)) {\n            // for SSR, use approximate value instead of measured\n            this.dimensionsChanged.emit({ height: this.approxHeight });\n            return;\n        }\n        const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n        if (height !== this.height) {\n            this.height = height;\n            this.dimensionsChanged.emit({ height: this.height });\n            setTimeout(() => this.updateDims());\n        }\n    }\n    update() {\n        const scale = this.scale;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            // eslint-disable-next-line prefer-spread\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n        this.adjustedScale = this.scale.bandwidth\n            ? function (d) {\n                return this.scale(d) + this.scale.bandwidth() * 0.5;\n            }\n            : this.scale;\n        this.textTransform = '';\n        if (angle && angle !== 0) {\n            this.textTransform = `rotate(${angle})`;\n            this.textAnchor = TextAnchor.End;\n            this.verticalSpacing = 10;\n        }\n        else {\n            this.textAnchor = TextAnchor.Middle;\n        }\n        if (this.isWrapTicksSupported) {\n            // for SSR, if there is no angle, calculate height based on number of tick lines\n            if (!isPlatformBrowser(this.platformId) && (angle === 0 || angle === null)) {\n                const longestTick = this.ticks.reduce((savedText, text) => (text.length > savedText.length ? text : savedText), '');\n                const tickLines = this.tickChunks(longestTick);\n                this.approxHeight = 10 * (tickLines.length || 1);\n            }\n            this.maxPossibleLengthForTick = this.getMaxPossibleLengthForTick(this.ticks);\n        }\n        setTimeout(() => this.updateDims());\n    }\n    getRotationAngle(ticks) {\n        let angle = 0;\n        this.maxTicksLength = 0;\n        for (let i = 0; i < ticks.length; i++) {\n            const tick = this.tickFormat(ticks[i]).toString();\n            let tickLength = tick.length;\n            if (this.trimTicks) {\n                tickLength = this.tickTrim(tick).length;\n            }\n            if (tickLength > this.maxTicksLength) {\n                this.maxTicksLength = tickLength;\n            }\n        }\n        const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n        const charWidth = 7; // need to measure this\n        const wordWidth = len * charWidth;\n        let baseWidth = wordWidth;\n        const maxBaseWidth = Math.floor(this.width / ticks.length);\n        // calculate optimal angle\n        while (baseWidth > maxBaseWidth && angle > -90) {\n            angle -= 30;\n            baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n        }\n        this.approxHeight = Math.max(Math.abs(Math.sin(angle * (Math.PI / 180)) * wordWidth), 10);\n        return angle;\n    }\n    getTicks() {\n        let ticks;\n        const maxTicks = this.getMaxTicks(20);\n        const maxScaleTicks = this.getMaxTicks(100);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    }\n    getMaxTicks(tickWidth) {\n        return Math.floor(this.width / tickWidth);\n    }\n    tickTransform(tick) {\n        return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n    }\n    gridLineTransform() {\n        return `translate(0,${-this.verticalSpacing - 5})`;\n    }\n    tickTrim(label) {\n        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n    getMaxPossibleLengthForTick(ticks) {\n        if (this.scale.bandwidth) {\n            const averageCharacterWidth = 7; // approximate char width\n            const maxCharacters = Math.floor(this.scale.bandwidth() / averageCharacterWidth);\n            const label = ticks.reduce((savedText, text) => (text.length > savedText.length ? text : savedText), '');\n            const truncatedText = label.slice(0, maxCharacters);\n            return Math.max(truncatedText.length, this.maxTickLength);\n        }\n        return this.maxTickLength;\n    }\n    tickChunks(label) {\n        if (label.toString().length > this.maxTickLength && this.scale.bandwidth) {\n            const maxAllowedLines = 5;\n            let maxLines = this.rotateTicks ? Math.floor(this.scale.step() / 14) : maxAllowedLines;\n            if (maxLines <= 1) {\n                return [this.tickTrim(label)];\n            }\n            const possibleStringLength = Math.max(this.maxPossibleLengthForTick, this.maxTickLength);\n            maxLines = Math.min(maxLines, maxAllowedLines);\n            const lines = getTickLines(label, possibleStringLength, maxLines < 1 ? 1 : maxLines);\n            return lines;\n        }\n        return [this.tickTrim(label)];\n    }\n}\nXAxisTicksComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisTicksComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nXAxisTicksComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: XAxisTicksComponent, selector: \"g[ngx-charts-x-axis-ticks]\", inputs: { scale: \"scale\", orient: \"orient\", tickArguments: \"tickArguments\", tickValues: \"tickValues\", tickStroke: \"tickStroke\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", gridLineHeight: \"gridLineHeight\", width: \"width\", rotateTicks: \"rotateTicks\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksElement\", first: true, predicate: [\"ticksel\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            font-size=\"12px\"\n            [attr.text-anchor]=\"textAnchor\"\n            [attr.transform]=\"textTransform\"\n          >\n            <ng-container *ngIf=\"isWrapTicksSupported; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * 12\">\n                {{ tickLine }}\n              </svg:tspan>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisTicksComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-x-axis-ticks]',\n                    template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            font-size=\"12px\"\n            [attr.text-anchor]=\"textAnchor\"\n            [attr.transform]=\"textTransform\"\n          >\n            <ng-container *ngIf=\"isWrapTicksSupported; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * 12\">\n                {{ tickLine }}\n              </svg:tspan>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { scale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }], tickArguments: [{\n                type: Input\n            }], tickValues: [{\n                type: Input\n            }], tickStroke: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], gridLineHeight: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], rotateTicks: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksElement: [{\n                type: ViewChild,\n                args: ['ticksel']\n            }] } });\n\nclass XAxisComponent {\n    constructor() {\n        this.rotateTicks = true;\n        this.showGridLines = false;\n        this.xOrient = Orientation.Bottom;\n        this.xAxisOffset = 0;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.xAxisClassName = 'x axis';\n        this.labelOffset = 0;\n        this.fill = 'none';\n        this.stroke = 'stroke';\n        this.tickStroke = '#ccc';\n        this.strokeWidth = 'none';\n        this.padding = 5;\n        this.orientation = Orientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n        if (typeof this.xAxisTickCount !== 'undefined') {\n            this.tickArguments = [this.xAxisTickCount];\n        }\n    }\n    emitTicksHeight({ height }) {\n        const newLabelOffset = height + 25 + 5;\n        if (newLabelOffset !== this.labelOffset) {\n            this.labelOffset = newLabelOffset;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ height });\n            }, 0);\n        }\n    }\n}\nXAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nXAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: { xScale: \"xScale\", dims: \"dims\", trimTicks: \"trimTicks\", rotateTicks: \"rotateTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", showLabel: \"showLabel\", labelText: \"labelText\", ticks: \"ticks\", xAxisTickCount: \"xAxisTickCount\", xOrient: \"xOrient\", xAxisOffset: \"xAxisOffset\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksComponent\", first: true, predicate: XAxisTicksComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: XAxisTicksComponent, selector: \"g[ngx-charts-x-axis-ticks]\", inputs: [\"scale\", \"orient\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"gridLineHeight\", \"width\", \"rotateTicks\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-x-axis]',\n                    template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { xScale: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], rotateTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], showLabel: [{\n                type: Input\n            }], labelText: [{\n                type: Input\n            }], ticks: [{\n                type: Input\n            }], xAxisTickCount: [{\n                type: Input\n            }], xOrient: [{\n                type: Input\n            }], xAxisOffset: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksComponent: [{\n                type: ViewChild,\n                args: [XAxisTicksComponent]\n            }] } });\n\n/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\nfunction roundedRect(x, y, w, h, r, [tl, tr, bl, br]) {\n    let retval = '';\n    w = Math.floor(w);\n    h = Math.floor(h);\n    w = w === 0 ? 1 : w;\n    h = h === 0 ? 1 : h;\n    retval = `M${[x + r, y]}`;\n    retval += `h${w - 2 * r}`;\n    if (tr) {\n        retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n    }\n    else {\n        retval += `h${r}v${r}`;\n    }\n    retval += `v${h - 2 * r}`;\n    if (br) {\n        retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n    }\n    else {\n        retval += `v${r}h${-r}`;\n    }\n    retval += `h${2 * r - w}`;\n    if (bl) {\n        retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n    }\n    else {\n        retval += `h${-r}v${-r}`;\n    }\n    retval += `v${2 * r - h}`;\n    if (tl) {\n        retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n    }\n    else {\n        retval += `v${-r}h${r}`;\n    }\n    retval += `z`;\n    return retval;\n}\n\nclass YAxisTicksComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.trimTicks = true;\n        this.maxTickLength = 16;\n        this.showGridLines = false;\n        this.showRefLabels = false;\n        this.showRefLines = false;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.innerTickSize = 6;\n        this.tickPadding = 3;\n        this.verticalSpacing = 20;\n        this.textAnchor = TextAnchor.Middle;\n        this.width = 0;\n        this.outerTickSize = 6;\n        this.rotateLabels = false;\n        this.referenceLineLength = 0;\n        this.Orientation = Orientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngAfterViewInit() {\n        setTimeout(() => this.updateDims());\n    }\n    updateDims() {\n        if (!isPlatformBrowser(this.platformId)) {\n            // for SSR, use approximate value instead of measured\n            this.width = this.getApproximateAxisWidth();\n            this.dimensionsChanged.emit({ width: this.width });\n            return;\n        }\n        const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n        if (width !== this.width) {\n            this.width = width;\n            this.dimensionsChanged.emit({ width });\n            setTimeout(() => this.updateDims());\n        }\n    }\n    update() {\n        const scale = this.scale;\n        const sign = this.orient === Orientation.Top || this.orient === Orientation.Right ? -1 : 1;\n        this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            // eslint-disable-next-line prefer-spread\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        this.adjustedScale = scale.bandwidth\n            ? d => {\n                // position the tick to middle considering number of lines of the tick\n                const positionMiddle = scale(d) + scale.bandwidth() * 0.5;\n                if (this.wrapTicks && d.toString().length > this.maxTickLength) {\n                    const chunksLength = this.tickChunks(d).length;\n                    if (chunksLength === 1) {\n                        return positionMiddle;\n                    }\n                    const bandWidth = scale.bandwidth();\n                    const heightOfLines = chunksLength * 8;\n                    const availableFreeSpace = bandWidth * 0.5 - heightOfLines * 0.5;\n                    return scale(d) + availableFreeSpace;\n                }\n                return positionMiddle;\n            }\n            : scale;\n        if (this.showRefLines && this.referenceLines) {\n            this.setReferencelines();\n        }\n        switch (this.orient) {\n            case Orientation.Top:\n                this.transform = function (tick) {\n                    return 'translate(' + this.adjustedScale(tick) + ',0)';\n                };\n                this.textAnchor = TextAnchor.Middle;\n                this.y2 = this.innerTickSize * sign;\n                this.y1 = this.tickSpacing * sign;\n                this.dy = sign < 0 ? '0em' : '.71em';\n                break;\n            case Orientation.Bottom:\n                this.transform = function (tick) {\n                    return 'translate(' + this.adjustedScale(tick) + ',0)';\n                };\n                this.textAnchor = TextAnchor.Middle;\n                this.y2 = this.innerTickSize * sign;\n                this.y1 = this.tickSpacing * sign;\n                this.dy = sign < 0 ? '0em' : '.71em';\n                break;\n            case Orientation.Left:\n                this.transform = function (tick) {\n                    return 'translate(0,' + this.adjustedScale(tick) + ')';\n                };\n                this.textAnchor = TextAnchor.End;\n                this.x2 = this.innerTickSize * -sign;\n                this.x1 = this.tickSpacing * -sign;\n                this.dy = '.32em';\n                break;\n            case Orientation.Right:\n                this.transform = function (tick) {\n                    return 'translate(0,' + this.adjustedScale(tick) + ')';\n                };\n                this.textAnchor = TextAnchor.Start;\n                this.x2 = this.innerTickSize * -sign;\n                this.x1 = this.tickSpacing * -sign;\n                this.dy = '.32em';\n                break;\n            default:\n        }\n        setTimeout(() => this.updateDims());\n    }\n    setReferencelines() {\n        this.refMin = this.adjustedScale(Math.min.apply(null, this.referenceLines.map(item => item.value)));\n        this.refMax = this.adjustedScale(Math.max.apply(null, this.referenceLines.map(item => item.value)));\n        this.referenceLineLength = this.referenceLines.length;\n        this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\n            false,\n            false,\n            false,\n            false\n        ]);\n    }\n    getTicks() {\n        let ticks;\n        const maxTicks = this.getMaxTicks(20);\n        const maxScaleTicks = this.getMaxTicks(50);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    }\n    getMaxTicks(tickHeight) {\n        return Math.floor(this.height / tickHeight);\n    }\n    tickTransform(tick) {\n        return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n    }\n    gridLineTransform() {\n        return `translate(5,0)`;\n    }\n    tickTrim(label) {\n        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n    getApproximateAxisWidth() {\n        const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));\n        const charWidth = 7;\n        return maxChars * charWidth;\n    }\n    tickChunks(label) {\n        if (label.toString().length > this.maxTickLength && this.scale.bandwidth) {\n            // for y-axis the width of the tick is fixed\n            const preferredWidth = this.maxTickLength;\n            const maxLines = Math.floor(this.scale.bandwidth() / 15);\n            if (maxLines <= 1) {\n                return [this.tickTrim(label)];\n            }\n            return getTickLines(label, preferredWidth, Math.min(maxLines, 5));\n        }\n        return [this.tickFormat(label)];\n    }\n}\nYAxisTicksComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisTicksComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nYAxisTicksComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: YAxisTicksComponent, selector: \"g[ngx-charts-y-axis-ticks]\", inputs: { scale: \"scale\", orient: \"orient\", tickArguments: \"tickArguments\", tickValues: \"tickValues\", tickStroke: \"tickStroke\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", gridLineWidth: \"gridLineWidth\", height: \"height\", referenceLines: \"referenceLines\", showRefLabels: \"showRefLabels\", showRefLines: \"showRefLines\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksElement\", first: true, predicate: [\"ticksel\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            [attr.dy]=\"dy\"\n            [attr.x]=\"x1\"\n            [attr.y]=\"y1\"\n            [attr.text-anchor]=\"textAnchor\"\n            [style.font-size]=\"'12px'\"\n          >\n            <ng-container *ngIf=\"wrapTicks; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <ng-container *ngIf=\"tickLines.length > 1; else tmplSinglelineTick\">\n                <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * (8 + tickSpacing)\">\n                  {{ tickLine }}\n                </svg:tspan>\n              </ng-container>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisTicksComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-y-axis-ticks]',\n                    template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            [attr.dy]=\"dy\"\n            [attr.x]=\"x1\"\n            [attr.y]=\"y1\"\n            [attr.text-anchor]=\"textAnchor\"\n            [style.font-size]=\"'12px'\"\n          >\n            <ng-container *ngIf=\"wrapTicks; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <ng-container *ngIf=\"tickLines.length > 1; else tmplSinglelineTick\">\n                <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * (8 + tickSpacing)\">\n                  {{ tickLine }}\n                </svg:tspan>\n              </ng-container>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { scale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }], tickArguments: [{\n                type: Input\n            }], tickValues: [{\n                type: Input\n            }], tickStroke: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], gridLineWidth: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksElement: [{\n                type: ViewChild,\n                args: ['ticksel']\n            }] } });\n\nclass YAxisComponent {\n    constructor() {\n        this.showGridLines = false;\n        this.yOrient = Orientation.Left;\n        this.yAxisOffset = 0;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.yAxisClassName = 'y axis';\n        this.labelOffset = 15;\n        this.fill = 'none';\n        this.stroke = '#CCC';\n        this.tickStroke = '#CCC';\n        this.strokeWidth = 1;\n        this.padding = 5;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.offset = -(this.yAxisOffset + this.padding);\n        if (this.yOrient === Orientation.Right) {\n            this.labelOffset = 65;\n            this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n        }\n        else {\n            this.transform = `translate(${this.offset} , 0)`;\n        }\n        if (this.yAxisTickCount !== undefined) {\n            this.tickArguments = [this.yAxisTickCount];\n        }\n    }\n    emitTicksWidth({ width }) {\n        if (width !== this.labelOffset && this.yOrient === Orientation.Right) {\n            this.labelOffset = width + this.labelOffset;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ width });\n            }, 0);\n        }\n        else if (width !== this.labelOffset) {\n            this.labelOffset = width;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ width });\n            }, 0);\n        }\n    }\n}\nYAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nYAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: { yScale: \"yScale\", dims: \"dims\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", ticks: \"ticks\", showGridLines: \"showGridLines\", showLabel: \"showLabel\", labelText: \"labelText\", yAxisTickCount: \"yAxisTickCount\", yOrient: \"yOrient\", referenceLines: \"referenceLines\", showRefLines: \"showRefLines\", showRefLabels: \"showRefLabels\", yAxisOffset: \"yAxisOffset\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksComponent\", first: true, predicate: YAxisTicksComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: YAxisTicksComponent, selector: \"g[ngx-charts-y-axis-ticks]\", inputs: [\"scale\", \"orient\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"gridLineWidth\", \"height\", \"referenceLines\", \"showRefLabels\", \"showRefLines\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-y-axis]',\n                    template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { yScale: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], ticks: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], showLabel: [{\n                type: Input\n            }], labelText: [{\n                type: Input\n            }], yAxisTickCount: [{\n                type: Input\n            }], yOrient: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], yAxisOffset: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksComponent: [{\n                type: ViewChild,\n                args: [YAxisTicksComponent]\n            }] } });\n\nclass AxesModule {\n}\nAxesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAxesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent], imports: [CommonModule], exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent] });\nAxesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n                    exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n                }]\n        }] });\n\nvar StyleTypes;\n(function (StyleTypes) {\n    StyleTypes[\"popover\"] = \"popover\";\n    StyleTypes[\"tooltip\"] = \"tooltip\";\n})(StyleTypes || (StyleTypes = {}));\n\nvar ShowTypes;\n(function (ShowTypes) {\n    ShowTypes[ShowTypes[\"all\"] = 'all'] = \"all\";\n    ShowTypes[ShowTypes[\"focus\"] = 'focus'] = \"focus\";\n    ShowTypes[ShowTypes[\"mouseover\"] = 'mouseover'] = \"mouseover\";\n})(ShowTypes || (ShowTypes = {}));\n\nclass TooltipDirective {\n    constructor(tooltipService, viewContainerRef, renderer) {\n        this.tooltipService = tooltipService;\n        this.viewContainerRef = viewContainerRef;\n        this.renderer = renderer;\n        this.tooltipCssClass = '';\n        this.tooltipAppendToBody = true;\n        this.tooltipSpacing = 10;\n        this.tooltipDisabled = false;\n        this.tooltipShowCaret = true;\n        this.tooltipPlacement = PlacementTypes.Top;\n        this.tooltipAlignment = PlacementTypes.Center;\n        this.tooltipType = StyleTypes.popover;\n        this.tooltipCloseOnClickOutside = true;\n        this.tooltipCloseOnMouseLeave = true;\n        this.tooltipHideTimeout = 300;\n        this.tooltipShowTimeout = 100;\n        this.tooltipShowEvent = ShowTypes.all;\n        this.tooltipImmediateExit = false;\n        this.show = new EventEmitter();\n        this.hide = new EventEmitter();\n    }\n    get listensForFocus() {\n        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n    }\n    get listensForHover() {\n        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n    }\n    ngOnDestroy() {\n        this.hideTooltip(true);\n    }\n    onFocus() {\n        if (this.listensForFocus) {\n            this.showTooltip();\n        }\n    }\n    onBlur() {\n        if (this.listensForFocus) {\n            this.hideTooltip(true);\n        }\n    }\n    onMouseEnter() {\n        if (this.listensForHover) {\n            this.showTooltip();\n        }\n    }\n    onMouseLeave(target) {\n        if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n            clearTimeout(this.timeout);\n            if (this.component) {\n                const contentDom = this.component.instance.element.nativeElement;\n                const contains = contentDom.contains(target);\n                if (contains)\n                    return;\n            }\n            this.hideTooltip(this.tooltipImmediateExit);\n        }\n    }\n    onMouseClick() {\n        if (this.listensForHover) {\n            this.hideTooltip(true);\n        }\n    }\n    showTooltip(immediate) {\n        if (this.component || this.tooltipDisabled)\n            return;\n        const time = immediate\n            ? 0\n            : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 400 : 0);\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n            this.tooltipService.destroyAll();\n            const options = this.createBoundOptions();\n            this.component = this.tooltipService.create(options);\n            // add a tiny timeout to avoid event re-triggers\n            setTimeout(() => {\n                if (this.component) {\n                    this.addHideListeners(this.component.instance.element.nativeElement);\n                }\n            }, 10);\n            this.show.emit(true);\n        }, time);\n    }\n    addHideListeners(tooltip) {\n        // on mouse enter, cancel the hide triggered by the leave\n        this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n            clearTimeout(this.timeout);\n        });\n        // content mouse leave listener\n        if (this.tooltipCloseOnMouseLeave) {\n            this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n                this.hideTooltip(this.tooltipImmediateExit);\n            });\n        }\n        // content close on click outside\n        if (this.tooltipCloseOnClickOutside) {\n            this.documentClickEvent = this.renderer.listen('window', 'click', event => {\n                const contains = tooltip.contains(event.target);\n                if (!contains)\n                    this.hideTooltip();\n            });\n        }\n    }\n    hideTooltip(immediate = false) {\n        if (!this.component)\n            return;\n        const destroyFn = () => {\n            // remove events\n            if (this.mouseLeaveContentEvent)\n                this.mouseLeaveContentEvent();\n            if (this.mouseEnterContentEvent)\n                this.mouseEnterContentEvent();\n            if (this.documentClickEvent)\n                this.documentClickEvent();\n            // emit events\n            this.hide.emit(true);\n            // destroy component\n            this.tooltipService.destroy(this.component);\n            this.component = undefined;\n        };\n        clearTimeout(this.timeout);\n        if (!immediate) {\n            this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n        }\n        else {\n            destroyFn();\n        }\n    }\n    createBoundOptions() {\n        return {\n            title: this.tooltipTitle,\n            template: this.tooltipTemplate,\n            host: this.viewContainerRef.element,\n            placement: this.tooltipPlacement,\n            alignment: this.tooltipAlignment,\n            type: this.tooltipType,\n            showCaret: this.tooltipShowCaret,\n            cssClass: this.tooltipCssClass,\n            spacing: this.tooltipSpacing,\n            context: this.tooltipContext\n        };\n    }\n}\nTooltipDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipDirective, deps: [{ token: TooltipService }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });\nTooltipDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: { tooltipCssClass: \"tooltipCssClass\", tooltipTitle: \"tooltipTitle\", tooltipAppendToBody: \"tooltipAppendToBody\", tooltipSpacing: \"tooltipSpacing\", tooltipDisabled: \"tooltipDisabled\", tooltipShowCaret: \"tooltipShowCaret\", tooltipPlacement: \"tooltipPlacement\", tooltipAlignment: \"tooltipAlignment\", tooltipType: \"tooltipType\", tooltipCloseOnClickOutside: \"tooltipCloseOnClickOutside\", tooltipCloseOnMouseLeave: \"tooltipCloseOnMouseLeave\", tooltipHideTimeout: \"tooltipHideTimeout\", tooltipShowTimeout: \"tooltipShowTimeout\", tooltipTemplate: \"tooltipTemplate\", tooltipShowEvent: \"tooltipShowEvent\", tooltipContext: \"tooltipContext\", tooltipImmediateExit: \"tooltipImmediateExit\" }, outputs: { show: \"show\", hide: \"hide\" }, host: { listeners: { \"focusin\": \"onFocus()\", \"blur\": \"onBlur()\", \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave($event.target)\", \"click\": \"onMouseClick()\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngx-tooltip]' }]\n        }], ctorParameters: function () { return [{ type: TooltipService }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }]; }, propDecorators: { tooltipCssClass: [{\n                type: Input\n            }], tooltipTitle: [{\n                type: Input\n            }], tooltipAppendToBody: [{\n                type: Input\n            }], tooltipSpacing: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipShowCaret: [{\n                type: Input\n            }], tooltipPlacement: [{\n                type: Input\n            }], tooltipAlignment: [{\n                type: Input\n            }], tooltipType: [{\n                type: Input\n            }], tooltipCloseOnClickOutside: [{\n                type: Input\n            }], tooltipCloseOnMouseLeave: [{\n                type: Input\n            }], tooltipHideTimeout: [{\n                type: Input\n            }], tooltipShowTimeout: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], tooltipShowEvent: [{\n                type: Input\n            }], tooltipContext: [{\n                type: Input\n            }], tooltipImmediateExit: [{\n                type: Input\n            }], show: [{\n                type: Output\n            }], hide: [{\n                type: Output\n            }], onFocus: [{\n                type: HostListener,\n                args: ['focusin']\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave', ['$event.target']]\n            }], onMouseClick: [{\n                type: HostListener,\n                args: ['click']\n            }] } });\n\nclass TooltipModule {\n}\nTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, declarations: [TooltipContentComponent, TooltipDirective], imports: [CommonModule], exports: [TooltipContentComponent, TooltipDirective] });\nTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, providers: [InjectionService, TooltipService], imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TooltipContentComponent, TooltipDirective],\n                    providers: [InjectionService, TooltipService],\n                    exports: [TooltipContentComponent, TooltipDirective],\n                    imports: [CommonModule],\n                    entryComponents: [TooltipContentComponent]\n                }]\n        }] });\n\nconst cache = {};\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nfunction id() {\n    let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n    // append a 'a' because neo gets mad\n    newId = `a${newId}`;\n    // ensure not already used\n    if (!cache[newId]) {\n        cache[newId] = true;\n        return newId;\n    }\n    return id();\n}\n\nvar BarOrientation;\n(function (BarOrientation) {\n    BarOrientation[\"Vertical\"] = \"vertical\";\n    BarOrientation[\"Horizontal\"] = \"horizontal\";\n})(BarOrientation || (BarOrientation = {}));\n\nclass SvgLinearGradientComponent {\n    constructor() {\n        this.orientation = BarOrientation.Vertical;\n    }\n    ngOnChanges(changes) {\n        this.x1 = '0%';\n        this.x2 = '0%';\n        this.y1 = '0%';\n        this.y2 = '0%';\n        if (this.orientation === BarOrientation.Horizontal) {\n            this.x2 = '100%';\n        }\n        else if (this.orientation === BarOrientation.Vertical) {\n            this.y1 = '100%';\n        }\n    }\n}\nSvgLinearGradientComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgLinearGradientComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSvgLinearGradientComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: { orientation: \"orientation\", name: \"name\", stops: \"stops\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgLinearGradientComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-svg-linear-gradient]',\n                    template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { orientation: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }] } });\n\nclass CircleComponent {\n    constructor() {\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    ngOnChanges(changes) {\n        this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n        this.classNames += 'circle';\n    }\n}\nCircleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCircleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: { cx: \"cx\", cy: \"cy\", r: \"r\", fill: \"fill\", stroke: \"stroke\", data: \"data\", classNames: \"classNames\", circleOpacity: \"circleOpacity\", pointerEvents: \"pointerEvents\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"click\": \"onClick()\", \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-circle]',\n                    template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { cx: [{\n                type: Input\n            }], cy: [{\n                type: Input\n            }], r: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], stroke: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], classNames: [{\n                type: Input\n            }], circleOpacity: [{\n                type: Input\n            }], pointerEvents: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onClick: [{\n                type: HostListener,\n                args: ['click']\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nvar SeriesType;\n(function (SeriesType) {\n    SeriesType[\"Standard\"] = \"standard\";\n    SeriesType[\"Stacked\"] = \"stacked\";\n})(SeriesType || (SeriesType = {}));\nclass CircleSeriesComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.type = SeriesType.Standard;\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.barVisible = false;\n        this.barOrientation = BarOrientation;\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges() {\n        this.update();\n    }\n    update() {\n        this.circle = this.getActiveCircle();\n    }\n    getActiveCircle() {\n        const indexActiveDataPoint = this.data.series.findIndex(d => {\n            const label = d.name;\n            return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n        });\n        if (indexActiveDataPoint === -1) {\n            // No valid point is 'active/hovered over' at this moment.\n            return undefined;\n        }\n        return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n    }\n    mapDataPointToCircle(d, i) {\n        const seriesName = this.data.name;\n        const value = d.value;\n        const label = d.name;\n        const tooltipLabel = formatLabel(label);\n        let cx;\n        if (this.scaleType === ScaleType.Time) {\n            cx = this.xScale(label);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            cx = this.xScale(Number(label));\n        }\n        else {\n            cx = this.xScale(label);\n        }\n        const cy = this.yScale(this.type === SeriesType.Standard ? value : d.d1);\n        const radius = 5;\n        const height = this.yScale.range()[0] - cy;\n        const opacity = 1;\n        let color;\n        if (this.colors.scaleType === ScaleType.Linear) {\n            if (this.type === SeriesType.Standard) {\n                color = this.colors.getColor(value);\n            }\n            else {\n                color = this.colors.getColor(d.d1);\n            }\n        }\n        else {\n            color = this.colors.getColor(seriesName);\n        }\n        const data = Object.assign({}, d, {\n            series: seriesName,\n            value,\n            name: label\n        });\n        return {\n            classNames: [`circle-data-${i}`],\n            value,\n            label,\n            data,\n            cx,\n            cy,\n            radius,\n            height,\n            tooltipLabel,\n            color,\n            opacity,\n            seriesName,\n            gradientStops: this.getGradientStops(color),\n            min: d.min,\n            max: d.max\n        };\n    }\n    getTooltipText({ tooltipLabel, value, seriesName, min, max }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n    }\n    getTooltipMinMaxText(min, max) {\n        if (min !== undefined || max !== undefined) {\n            let result = ' (';\n            if (min !== undefined) {\n                if (max === undefined) {\n                    result += '≥';\n                }\n                result += min.toLocaleString();\n                if (max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (max !== undefined) {\n                result += '≤';\n            }\n            if (max !== undefined) {\n                result += max.toLocaleString();\n            }\n            result += ')';\n            return result;\n        }\n        else {\n            return '';\n        }\n    }\n    getGradientStops(color) {\n        return [\n            {\n                offset: 0,\n                color,\n                opacity: 0.2\n            },\n            {\n                offset: 100,\n                color,\n                opacity: 1\n            }\n        ];\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    activateCircle() {\n        this.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    }\n    deactivateCircle() {\n        this.barVisible = false;\n        this.circle.opacity = 0;\n        this.deactivate.emit({ name: this.data.name });\n    }\n}\nCircleSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleSeriesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nCircleSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: { data: \"data\", type: \"type\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", visibleValue: \"visibleValue\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"!isSSR && barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:rect\n        *ngIf=\"isSSR && barVisible && type === 'standard'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    opacity: 0\n                }),\n                animate(250, style({ opacity: 1 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-circle-series]',\n                    template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"!isSSR && barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:rect\n        *ngIf=\"isSSR && barVisible && type === 'standard'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    opacity: 0\n                                }),\n                                animate(250, style({ opacity: 1 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { data: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], visibleValue: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass GridPanelComponent {\n}\nGridPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGridPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GridPanelComponent, selector: \"g[ngx-charts-grid-panel]\", inputs: { width: \"width\", height: \"height\", x: \"x\", y: \"y\" }, ngImport: i0, template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-grid-panel]',\n                    template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }] } });\n\nvar ClassEnum;\n(function (ClassEnum) {\n    ClassEnum[\"Odd\"] = \"odd\";\n    ClassEnum[\"Even\"] = \"even\";\n})(ClassEnum || (ClassEnum = {}));\nclass GridPanelSeriesComponent {\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.gridPanels = this.getGridPanels();\n    }\n    getGridPanels() {\n        return this.data.map(d => {\n            let offset;\n            let width;\n            let height;\n            let x;\n            let y;\n            let className = ClassEnum.Odd;\n            if (this.orient === BarOrientation.Vertical) {\n                const position = this.xScale(d.name);\n                const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n                if (positionIndex % 2 === 1) {\n                    className = ClassEnum.Even;\n                }\n                offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n                width = this.xScale.bandwidth() + offset;\n                height = this.dims.height;\n                x = this.xScale(d.name) - offset / 2;\n                y = 0;\n            }\n            else if (this.orient === BarOrientation.Horizontal) {\n                const position = this.yScale(d.name);\n                const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n                if (positionIndex % 2 === 1) {\n                    className = ClassEnum.Even;\n                }\n                offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n                width = this.dims.width;\n                height = this.yScale.bandwidth() + offset;\n                x = 0;\n                y = this.yScale(d.name) - offset / 2;\n            }\n            return {\n                name: d.name,\n                class: className,\n                height,\n                width,\n                x,\n                y\n            };\n        });\n    }\n}\nGridPanelSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGridPanelSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: { data: \"data\", dims: \"dims\", xScale: \"xScale\", yScale: \"yScale\", orient: \"orient\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: GridPanelComponent, selector: \"g[ngx-charts-grid-panel]\", inputs: [\"width\", \"height\", \"x\", \"y\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-grid-panel-series]',\n                    template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }] } });\n\nclass SvgRadialGradientComponent {\n    constructor() {\n        this.endOpacity = 1;\n        this.cx = 0;\n        this.cy = 0;\n    }\n    get stops() {\n        return this.stopsInput || this.stopsDefault;\n    }\n    set stops(value) {\n        this.stopsInput = value;\n    }\n    ngOnChanges(changes) {\n        this.r = '30%';\n        if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n            this.stopsDefault = [\n                {\n                    offset: 0,\n                    color: this.color,\n                    opacity: this.startOpacity\n                },\n                {\n                    offset: 100,\n                    color: this.color,\n                    opacity: this.endOpacity\n                }\n            ];\n        }\n    }\n}\nSvgRadialGradientComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgRadialGradientComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSvgRadialGradientComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: { color: \"color\", name: \"name\", startOpacity: \"startOpacity\", endOpacity: \"endOpacity\", cx: \"cx\", cy: \"cy\", stops: \"stops\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgRadialGradientComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-svg-radial-gradient]',\n                    template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { color: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], startOpacity: [{\n                type: Input\n            }], endOpacity: [{\n                type: Input\n            }], cx: [{\n                type: Input\n            }], cy: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }] } });\n\nclass AreaComponent {\n    constructor(element) {\n        this.opacity = 1;\n        this.startOpacity = 0.5;\n        this.endOpacity = 1;\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.animationsLoaded = false;\n        this.hasGradient = false;\n        this.barOrientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges() {\n        this.update();\n        if (!this.animationsLoaded) {\n            this.loadAnimation();\n            this.animationsLoaded = true;\n        }\n    }\n    update() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient || this.stops) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updatePathEl();\n    }\n    loadAnimation() {\n        this.areaPath = this.startingPath;\n        setTimeout(this.updatePathEl.bind(this), 100);\n    }\n    updatePathEl() {\n        const node = select(this.element).select('.area');\n        if (this.animations) {\n            node.transition().duration(750).attr('d', this.path);\n        }\n        else {\n            node.attr('d', this.path);\n        }\n    }\n    getGradient() {\n        if (this.stops) {\n            return this.stops;\n        }\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.startOpacity\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: this.endOpacity\n            }\n        ];\n    }\n}\nAreaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nAreaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: { data: \"data\", path: \"path\", startingPath: \"startingPath\", fill: \"fill\", opacity: \"opacity\", startOpacity: \"startOpacity\", endOpacity: \"endOpacity\", gradient: \"gradient\", stops: \"stops\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-area]',\n                    template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], path: [{\n                type: Input\n            }], startingPath: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], opacity: [{\n                type: Input\n            }], startOpacity: [{\n                type: Input\n            }], endOpacity: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\n// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d) {\n    return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\n}\n/**\n * Counts from a number to the end incrementally.\n */\nfunction count(countFrom, countTo, countDecimals, countDuration, callback) {\n    const startVal = Number(countFrom);\n    const endVal = Number(countTo);\n    const countDown = startVal > endVal;\n    const decimals = Math.max(0, countDecimals);\n    const dec = Math.pow(10, decimals);\n    const duration = Number(countDuration) * 1000;\n    let startTime;\n    function runCount(timestamp) {\n        let frameVal;\n        const progress = timestamp - startTime;\n        if (countDown) {\n            frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n        }\n        else {\n            frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n        }\n        if (countDown) {\n            frameVal = frameVal < endVal ? endVal : frameVal;\n        }\n        else {\n            frameVal = frameVal > endVal ? endVal : frameVal;\n        }\n        frameVal = Math.round(frameVal * dec) / dec;\n        const tick = progress < duration;\n        callback({\n            value: frameVal,\n            progress,\n            timestamp,\n            finished: !tick\n        });\n        if (tick) {\n            return requestAnimationFrame(val => runCount(val));\n        }\n    }\n    return requestAnimationFrame(timestamp => {\n        startTime = timestamp;\n        return runCount(timestamp);\n    });\n}\n/**\n * Determine decimals places\n *\n * @export\n */\nfunction decimalChecker(countTo) {\n    const endVal = Number(countTo);\n    if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n        return 2;\n    }\n    return 0;\n}\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\nclass CountUpDirective {\n    constructor(cd, element) {\n        this.cd = cd;\n        this.countDuration = 1;\n        this.countPrefix = '';\n        this.countSuffix = '';\n        this.countChange = new EventEmitter();\n        this.countFinish = new EventEmitter();\n        this.value = '';\n        this._countDecimals = 0;\n        this._countTo = 0;\n        this._countFrom = 0;\n        this.nativeElement = element.nativeElement;\n    }\n    set countDecimals(val) {\n        this._countDecimals = val;\n    }\n    get countDecimals() {\n        if (this._countDecimals)\n            return this._countDecimals;\n        return decimalChecker(this.countTo);\n    }\n    set countTo(val) {\n        this._countTo = parseFloat(val);\n        this.start();\n    }\n    get countTo() {\n        return this._countTo;\n    }\n    set countFrom(val) {\n        this._countFrom = parseFloat(val);\n        this.start();\n    }\n    get countFrom() {\n        return this._countFrom;\n    }\n    ngOnDestroy() {\n        cancelAnimationFrame(this.animationReq);\n    }\n    start() {\n        cancelAnimationFrame(this.animationReq);\n        const valueFormatting = this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n        const callback = ({ value, progress, finished }) => {\n            this.value = valueFormatting(value);\n            this.cd.markForCheck();\n            if (!finished)\n                this.countChange.emit({ value: this.value, progress });\n            if (finished)\n                this.countFinish.emit({ value: this.value, progress });\n        };\n        this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n    }\n}\nCountUpDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CountUpDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nCountUpDirective.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: { countDuration: \"countDuration\", countPrefix: \"countPrefix\", countSuffix: \"countSuffix\", valueFormatting: \"valueFormatting\", countDecimals: \"countDecimals\", countTo: \"countTo\", countFrom: \"countFrom\" }, outputs: { countChange: \"countChange\", countFinish: \"countFinish\" }, ngImport: i0, template: ` {{ value }} `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CountUpDirective, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ngx-charts-count-up]',\n                    template: ` {{ value }} `\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { countDuration: [{\n                type: Input\n            }], countPrefix: [{\n                type: Input\n            }], countSuffix: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], countDecimals: [{\n                type: Input\n            }], countTo: [{\n                type: Input\n            }], countFrom: [{\n                type: Input\n            }], countChange: [{\n                type: Output\n            }], countFinish: [{\n                type: Output\n            }] } });\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nlet root;\nif (typeof window !== 'undefined') {\n    root = window;\n}\nelse if (typeof global !== 'undefined') {\n    root = global;\n}\n// tslint:disable-next-line:variable-name\nconst MouseEvent = root.MouseEvent;\nfunction createMouseEvent(name, bubbles = false, cancelable = true) {\n    // Calling new of an event does not work correctly on IE. The following is a tested workaround\n    // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n    if (typeof MouseEvent === 'function') {\n        // Sane browsers\n        return new MouseEvent(name, { bubbles, cancelable });\n    }\n    else {\n        // IE\n        const event = document.createEvent('MouseEvent');\n        event.initEvent(name, bubbles, cancelable);\n        return event;\n    }\n}\n\nclass TooltipArea {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.anchorOpacity = 0;\n        this.anchorPos = -1;\n        this.anchorValues = [];\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.showPercentage = false;\n        this.tooltipDisabled = false;\n        this.hover = new EventEmitter();\n    }\n    getValues(xVal) {\n        const results = [];\n        for (const group of this.results) {\n            const item = group.series.find(d => d.name.toString() === xVal.toString());\n            let groupName = group.name;\n            if (groupName instanceof Date) {\n                groupName = groupName.toLocaleDateString();\n            }\n            if (item) {\n                const label = item.name;\n                let val = item.value;\n                if (this.showPercentage) {\n                    val = (item.d1 - item.d0).toFixed(2) + '%';\n                }\n                let color;\n                if (this.colors.scaleType === ScaleType.Linear) {\n                    let v = val;\n                    if (item.d1) {\n                        v = item.d1;\n                    }\n                    color = this.colors.getColor(v);\n                }\n                else {\n                    color = this.colors.getColor(group.name);\n                }\n                const data = Object.assign({}, item, {\n                    value: val,\n                    name: label,\n                    series: groupName,\n                    min: item.min,\n                    max: item.max,\n                    color\n                });\n                results.push(data);\n            }\n        }\n        return results;\n    }\n    mouseMove(event) {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const xPos = event.pageX - event.target.getBoundingClientRect().left;\n        const closestIndex = this.findClosestPointIndex(xPos);\n        const closestPoint = this.xSet[closestIndex];\n        this.anchorPos = this.xScale(closestPoint);\n        this.anchorPos = Math.max(0, this.anchorPos);\n        this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n        this.anchorValues = this.getValues(closestPoint);\n        if (this.anchorPos !== this.lastAnchorPos) {\n            const ev = createMouseEvent('mouseleave');\n            this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n            this.anchorOpacity = 0.7;\n            this.hover.emit({\n                value: closestPoint\n            });\n            this.showTooltip();\n            this.lastAnchorPos = this.anchorPos;\n        }\n    }\n    findClosestPointIndex(xPos) {\n        let minIndex = 0;\n        let maxIndex = this.xSet.length - 1;\n        let minDiff = Number.MAX_VALUE;\n        let closestIndex = 0;\n        while (minIndex <= maxIndex) {\n            const currentIndex = ((minIndex + maxIndex) / 2) | 0;\n            const currentElement = this.xScale(this.xSet[currentIndex]);\n            const curDiff = Math.abs(currentElement - xPos);\n            if (curDiff < minDiff) {\n                minDiff = curDiff;\n                closestIndex = currentIndex;\n            }\n            if (currentElement < xPos) {\n                minIndex = currentIndex + 1;\n            }\n            else if (currentElement > xPos) {\n                maxIndex = currentIndex - 1;\n            }\n            else {\n                minDiff = 0;\n                closestIndex = currentIndex;\n                break;\n            }\n        }\n        return closestIndex;\n    }\n    showTooltip() {\n        const event = createMouseEvent('mouseenter');\n        this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    }\n    hideTooltip() {\n        const event = createMouseEvent('mouseleave');\n        this.tooltipAnchor.nativeElement.dispatchEvent(event);\n        this.anchorOpacity = 0;\n        this.lastAnchorPos = -1;\n    }\n    getToolTipText(tooltipItem) {\n        let result = '';\n        if (tooltipItem.series !== undefined) {\n            result += tooltipItem.series;\n        }\n        else {\n            result += '???';\n        }\n        result += ': ';\n        if (tooltipItem.value !== undefined) {\n            result += tooltipItem.value.toLocaleString();\n        }\n        if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n            result += ' (';\n            if (tooltipItem.min !== undefined) {\n                if (tooltipItem.max === undefined) {\n                    result += '≥';\n                }\n                result += tooltipItem.min.toLocaleString();\n                if (tooltipItem.max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (tooltipItem.max !== undefined) {\n                result += '≤';\n            }\n            if (tooltipItem.max !== undefined) {\n                result += tooltipItem.max.toLocaleString();\n            }\n            result += ')';\n        }\n        return result;\n    }\n}\nTooltipArea.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipArea, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nTooltipArea.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: { dims: \"dims\", xSet: \"xSet\", xScale: \"xScale\", yScale: \"yScale\", results: \"results\", colors: \"colors\", showPercentage: \"showPercentage\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { hover: \"hover\" }, viewQueries: [{ propertyName: \"tooltipAnchor\", first: true, predicate: [\"tooltipAnchor\"], descendants: true }], ngImport: i0, template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition('inactive => active', [\n                style({\n                    opacity: 0\n                }),\n                animate(250, style({ opacity: 0.7 }))\n            ]),\n            transition('active => inactive', [\n                style({\n                    opacity: 0.7\n                }),\n                animate(250, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipArea, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tooltip-area]',\n                    template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition('inactive => active', [\n                                style({\n                                    opacity: 0\n                                }),\n                                animate(250, style({ opacity: 0.7 }))\n                            ]),\n                            transition('active => inactive', [\n                                style({\n                                    opacity: 0.7\n                                }),\n                                animate(250, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { dims: [{\n                type: Input\n            }], xSet: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], showPercentage: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], hover: [{\n                type: Output\n            }], tooltipAnchor: [{\n                type: ViewChild,\n                args: ['tooltipAnchor', { static: false }]\n            }] } });\n\nclass Timeline {\n    constructor(element, cd) {\n        this.cd = cd;\n        this.height = 50;\n        this.select = new EventEmitter();\n        this.onDomainChange = new EventEmitter();\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n        if (!this.initialized) {\n            this.addBrush();\n            this.initialized = true;\n        }\n    }\n    update() {\n        this.dims = this.getDims();\n        this.height = this.dims.height;\n        const offsetY = this.view[1] - this.height;\n        this.xDomain = this.getXDomain();\n        this.xScale = this.getXScale();\n        if (this.brush) {\n            this.updateBrush();\n        }\n        this.transform = `translate(0 , ${offsetY})`;\n        this.filterId = 'filter' + id().toString();\n        this.filter = `url(#${this.filterId})`;\n        this.cd.markForCheck();\n    }\n    getXDomain() {\n        let values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.name)) {\n                    values.push(d.name);\n                }\n            }\n        }\n        let domain = [];\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n        }\n        else {\n            domain = values;\n        }\n        return domain;\n    }\n    getXScale() {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n        }\n        return scale;\n    }\n    addBrush() {\n        if (this.brush)\n            return;\n        const height = this.height;\n        const width = this.view[0];\n        this.brush = brushX()\n            .extent([\n            [0, 0],\n            [width, height]\n        ])\n            .on('brush end', ({ selection }) => {\n            const newSelection = selection || this.xScale.range();\n            const newDomain = newSelection.map(this.xScale.invert);\n            this.onDomainChange.emit(newDomain);\n            this.cd.markForCheck();\n        });\n        select(this.element).select('.brush').call(this.brush);\n    }\n    updateBrush() {\n        if (!this.brush)\n            return;\n        const height = this.height;\n        const width = this.view[0];\n        this.brush.extent([\n            [0, 0],\n            [width, height]\n        ]);\n        select(this.element).select('.brush').call(this.brush);\n        // clear hardcoded properties so they can be defined by CSS\n        select(this.element)\n            .select('.selection')\n            .attr('fill', undefined)\n            .attr('stroke', undefined)\n            .attr('fill-opacity', undefined);\n        this.cd.markForCheck();\n    }\n    getDims() {\n        const width = this.view[0];\n        const dims = {\n            width,\n            height: this.height\n        };\n        return dims;\n    }\n}\nTimeline.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Timeline, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTimeline.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: { view: \"view\", results: \"results\", scheme: \"scheme\", customColors: \"customColors\", legend: \"legend\", autoScale: \"autoScale\", scaleType: \"scaleType\", height: \"height\" }, outputs: { select: \"select\", onDomainChange: \"onDomainChange\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `, isInline: true, styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Timeline, decorators: [{\n            type: Component,\n            args: [{ selector: 'g[ngx-charts-timeline]', template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { view: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], scheme: [{\n                type: Input\n            }], customColors: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], onDomainChange: [{\n                type: Output\n            }] } });\n\nclass AdvancedLegendComponent {\n    constructor() {\n        this.label = 'Total';\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.legendItems = [];\n        this.labelFormatting = label => label;\n        this.percentageFormatting = percentage => percentage;\n        this.defaultValueFormatting = value => value.toLocaleString();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getTotal() {\n        return this.data.map(d => Number(d.value)).reduce((sum, d) => sum + d, 0);\n    }\n    update() {\n        this.total = this.getTotal();\n        this.roundedTotal = this.total;\n        this.legendItems = this.getLegendItems();\n    }\n    getLegendItems() {\n        return this.data.map(d => {\n            const label = formatLabel(d.name);\n            const value = d.value;\n            const color = this.colors.getColor(label);\n            const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\n            const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n            return {\n                _value: value,\n                data: d,\n                value,\n                color,\n                label: formattedLabel,\n                displayLabel: trimLabel(formattedLabel, 20),\n                origialLabel: d.name,\n                percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n            };\n        });\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nAdvancedLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nAdvancedLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AdvancedLegendComponent, selector: \"ngx-charts-advanced-legend\", inputs: { width: \"width\", data: \"data\", colors: \"colors\", label: \"label\", animations: \"animations\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", percentageFormatting: \"percentageFormatting\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"], components: [{ type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedLegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-advanced-legend', template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"] }]\n        }], propDecorators: { width: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], percentageFormatting: [{\n                type: Input\n            }] } });\n\nconst COMPONENTS = [\n    AreaComponent,\n    BaseChartComponent,\n    CountUpDirective,\n    TooltipArea,\n    ChartComponent,\n    LegendComponent,\n    LegendEntryComponent,\n    ScaleLegendComponent,\n    CircleComponent,\n    CircleSeriesComponent,\n    GridPanelComponent,\n    GridPanelSeriesComponent,\n    SvgLinearGradientComponent,\n    SvgRadialGradientComponent,\n    Timeline,\n    AdvancedLegendComponent\n];\nclass ChartCommonModule {\n}\nChartCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nChartCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, declarations: [AreaComponent,\n        BaseChartComponent,\n        CountUpDirective,\n        TooltipArea,\n        ChartComponent,\n        LegendComponent,\n        LegendEntryComponent,\n        ScaleLegendComponent,\n        CircleComponent,\n        CircleSeriesComponent,\n        GridPanelComponent,\n        GridPanelSeriesComponent,\n        SvgLinearGradientComponent,\n        SvgRadialGradientComponent,\n        Timeline,\n        AdvancedLegendComponent, VisibilityObserver], imports: [CommonModule, AxesModule, TooltipModule], exports: [CommonModule, AxesModule, TooltipModule, AreaComponent,\n        BaseChartComponent,\n        CountUpDirective,\n        TooltipArea,\n        ChartComponent,\n        LegendComponent,\n        LegendEntryComponent,\n        ScaleLegendComponent,\n        CircleComponent,\n        CircleSeriesComponent,\n        GridPanelComponent,\n        GridPanelSeriesComponent,\n        SvgLinearGradientComponent,\n        SvgRadialGradientComponent,\n        Timeline,\n        AdvancedLegendComponent, VisibilityObserver] });\nChartCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, imports: [[CommonModule, AxesModule, TooltipModule], CommonModule, AxesModule, TooltipModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, AxesModule, TooltipModule],\n                    declarations: [...COMPONENTS, VisibilityObserver],\n                    exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n                }]\n        }] });\n\nfunction calculateViewDimensions({ width, height, margins, showXAxis = false, showYAxis = false, xAxisHeight = 0, yAxisWidth = 0, showXLabel = false, showYLabel = false, showLegend = false, legendType = ScaleType.Ordinal, legendPosition = LegendPosition.Right, columns = 12 }) {\n    let xOffset = margins[3];\n    let chartWidth = width;\n    let chartHeight = height - margins[0] - margins[2];\n    if (showLegend && legendPosition === LegendPosition.Right) {\n        if (legendType === ScaleType.Ordinal) {\n            columns -= 2;\n        }\n        else {\n            columns -= 1;\n        }\n    }\n    chartWidth = (chartWidth * columns) / 12;\n    chartWidth = chartWidth - margins[1] - margins[3];\n    if (showXAxis) {\n        chartHeight -= 5;\n        chartHeight -= xAxisHeight;\n        if (showXLabel) {\n            // text height + spacing between axis label and tick labels\n            const offset = 25 + 5;\n            chartHeight -= offset;\n        }\n    }\n    if (showYAxis) {\n        chartWidth -= 5;\n        chartWidth -= yAxisWidth;\n        xOffset += yAxisWidth;\n        xOffset += 10;\n        if (showYLabel) {\n            // text height + spacing between axis label and tick labels\n            const offset = 25 + 5;\n            chartWidth -= offset;\n            xOffset += offset;\n        }\n    }\n    chartWidth = Math.max(0, chartWidth);\n    chartHeight = Math.max(0, chartHeight);\n    return {\n        width: Math.floor(chartWidth),\n        height: Math.floor(chartHeight),\n        xOffset: Math.floor(xOffset)\n    };\n}\n\nconst colorSets = [\n    {\n        name: 'vivid',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#647c8a',\n            '#3f51b5',\n            '#2196f3',\n            '#00b862',\n            '#afdf0a',\n            '#a7b61a',\n            '#f3e562',\n            '#ff9800',\n            '#ff5722',\n            '#ff4514'\n        ]\n    },\n    {\n        name: 'natural',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#bf9d76',\n            '#e99450',\n            '#d89f59',\n            '#f2dfa7',\n            '#a5d7c6',\n            '#7794b1',\n            '#afafaf',\n            '#707160',\n            '#ba9383',\n            '#d9d5c3'\n        ]\n    },\n    {\n        name: 'cool',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#a8385d',\n            '#7aa3e5',\n            '#a27ea8',\n            '#aae3f5',\n            '#adcded',\n            '#a95963',\n            '#8796c0',\n            '#7ed3ed',\n            '#50abcc',\n            '#ad6886'\n        ]\n    },\n    {\n        name: 'fire',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n    },\n    {\n        name: 'solar',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#fff8e1',\n            '#ffecb3',\n            '#ffe082',\n            '#ffd54f',\n            '#ffca28',\n            '#ffc107',\n            '#ffb300',\n            '#ffa000',\n            '#ff8f00',\n            '#ff6f00'\n        ]\n    },\n    {\n        name: 'air',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#e1f5fe',\n            '#b3e5fc',\n            '#81d4fa',\n            '#4fc3f7',\n            '#29b6f6',\n            '#03a9f4',\n            '#039be5',\n            '#0288d1',\n            '#0277bd',\n            '#01579b'\n        ]\n    },\n    {\n        name: 'aqua',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#e0f7fa',\n            '#b2ebf2',\n            '#80deea',\n            '#4dd0e1',\n            '#26c6da',\n            '#00bcd4',\n            '#00acc1',\n            '#0097a7',\n            '#00838f',\n            '#006064'\n        ]\n    },\n    {\n        name: 'flame',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#A10A28',\n            '#D3342D',\n            '#EF6D49',\n            '#FAAD67',\n            '#FDDE90',\n            '#DBED91',\n            '#A9D770',\n            '#6CBA67',\n            '#2C9653',\n            '#146738'\n        ]\n    },\n    {\n        name: 'ocean',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#1D68FB',\n            '#33C0FC',\n            '#4AFFFE',\n            '#AFFFFF',\n            '#FFFC63',\n            '#FDBD2D',\n            '#FC8A25',\n            '#FA4F1E',\n            '#FA141B',\n            '#BA38D1'\n        ]\n    },\n    {\n        name: 'forest',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#55C22D',\n            '#C1F33D',\n            '#3CC099',\n            '#AFFFFF',\n            '#8CFC9D',\n            '#76CFFA',\n            '#BA60FB',\n            '#EE6490',\n            '#C42A1C',\n            '#FC9F32'\n        ]\n    },\n    {\n        name: 'horizon',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#2597FB',\n            '#65EBFD',\n            '#99FDD0',\n            '#FCEE4B',\n            '#FEFCFA',\n            '#FDD6E3',\n            '#FCB1A8',\n            '#EF6F7B',\n            '#CB96E8',\n            '#EFDEE0'\n        ]\n    },\n    {\n        name: 'neons',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#FF3333',\n            '#FF33FF',\n            '#CC33FF',\n            '#0000FF',\n            '#33CCFF',\n            '#33FFFF',\n            '#33FF66',\n            '#CCFF33',\n            '#FFCC00',\n            '#FF6600'\n        ]\n    },\n    {\n        name: 'picnic',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#FAC51D',\n            '#66BD6D',\n            '#FAA026',\n            '#29BB9C',\n            '#E96B56',\n            '#55ACD2',\n            '#B7332F',\n            '#2C83C9',\n            '#9166B8',\n            '#92E7E8'\n        ]\n    },\n    {\n        name: 'night',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#2B1B5A',\n            '#501356',\n            '#183356',\n            '#28203F',\n            '#391B3C',\n            '#1E2B3C',\n            '#120634',\n            '#2D0432',\n            '#051932',\n            '#453080',\n            '#75267D',\n            '#2C507D',\n            '#4B3880',\n            '#752F7D',\n            '#35547D'\n        ]\n    },\n    {\n        name: 'nightLights',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#4e31a5',\n            '#9c25a7',\n            '#3065ab',\n            '#57468b',\n            '#904497',\n            '#46648b',\n            '#32118d',\n            '#a00fb3',\n            '#1052a2',\n            '#6e51bd',\n            '#b63cc3',\n            '#6c97cb',\n            '#8671c1',\n            '#b455be',\n            '#7496c3'\n        ]\n    }\n];\n\nclass ColorHelper {\n    constructor(scheme, type, domain, customColors) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(cs => {\n                return cs.name === scheme;\n            });\n        }\n        this.colorDomain = scheme.domain;\n        this.scaleType = type;\n        this.domain = domain;\n        this.customColors = customColors;\n        this.scale = this.generateColorScheme(scheme, type, this.domain);\n    }\n    generateColorScheme(scheme, type, domain) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(cs => {\n                return cs.name === scheme;\n            });\n        }\n        let colorScale;\n        switch (type) {\n            case ScaleType.Quantile:\n                colorScale = scaleQuantile()\n                    .range(scheme.domain)\n                    .domain(domain);\n                break;\n            case ScaleType.Ordinal:\n                colorScale = scaleOrdinal()\n                    .range(scheme.domain)\n                    .domain(domain);\n                break;\n            case ScaleType.Linear:\n                {\n                    const colorDomain = [...scheme.domain];\n                    if (colorDomain.length === 1) {\n                        colorDomain.push(colorDomain[0]);\n                        this.colorDomain = colorDomain;\n                    }\n                    const points = range(0, 1, 1.0 / colorDomain.length);\n                    colorScale = scaleLinear()\n                        .range(colorDomain)\n                        .domain(points);\n                }\n                break;\n            default:\n                break;\n        }\n        return colorScale;\n    }\n    getColor(value) {\n        if (value === undefined || value === null) {\n            throw new Error('Value can not be null');\n        }\n        if (this.scaleType === ScaleType.Linear) {\n            const valueScale = scaleLinear()\n                .domain(this.domain)\n                .range([0, 1]);\n            return this.scale(valueScale(value));\n        }\n        else {\n            if (typeof this.customColors === 'function') {\n                return this.customColors(value);\n            }\n            const formattedValue = value.toString();\n            let found; // todo type customColors\n            if (this.customColors && this.customColors.length > 0) {\n                found = this.customColors.find(mapping => {\n                    return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n                });\n            }\n            if (found) {\n                return found.value;\n            }\n            else {\n                return this.scale(value);\n            }\n        }\n    }\n    getLinearGradientStops(value, start) {\n        if (start === undefined) {\n            start = this.domain[0];\n        }\n        const valueScale = scaleLinear()\n            .domain(this.domain)\n            .range([0, 1]);\n        const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n        const endColor = this.getColor(value);\n        // generate the stops\n        const startVal = valueScale(start);\n        const startColor = this.getColor(start);\n        const endVal = valueScale(value);\n        let i = 1;\n        let currentVal = startVal;\n        const stops = [];\n        stops.push({\n            color: startColor,\n            offset: startVal,\n            originalOffset: startVal,\n            opacity: 1\n        });\n        while (currentVal < endVal && i < this.colorDomain.length) {\n            const color = this.colorDomain[i];\n            const offset = colorValueScale(color);\n            if (offset <= startVal) {\n                i++;\n                continue;\n            }\n            if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n                break;\n            }\n            stops.push({\n                color,\n                offset,\n                opacity: 1\n            });\n            currentVal = offset;\n            i++;\n        }\n        if (stops[stops.length - 1].offset < 100) {\n            stops.push({\n                color: endColor,\n                offset: endVal,\n                opacity: 1\n            });\n        }\n        if (endVal === startVal) {\n            stops[0].offset = 0;\n            stops[1].offset = 100;\n        }\n        else {\n            // normalize the offsets into percentages\n            if (stops[stops.length - 1].offset !== 100) {\n                for (const s of stops) {\n                    s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\n                }\n            }\n        }\n        return stops;\n    }\n}\n\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\nfunction getUniqueXDomainValues(results) {\n    const valueSet = new Set();\n    for (const result of results) {\n        for (const d of result.series) {\n            valueSet.add(d.name);\n        }\n    }\n    return Array.from(valueSet);\n}\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\nfunction getScaleType(values, checkDateType = true) {\n    if (checkDateType) {\n        const allDates = values.every(value => value instanceof Date);\n        if (allDates) {\n            return ScaleType.Time;\n        }\n    }\n    const allNumbers = values.every(value => typeof value === 'number');\n    if (allNumbers) {\n        return ScaleType.Linear;\n    }\n    return ScaleType.Ordinal;\n}\nfunction getXDomainArray(values, xScaleMin, xScaleMax) {\n    const scaleType = getScaleType(values);\n    let xSet = [];\n    let domain = [];\n    if (scaleType === ScaleType.Linear) {\n        values = values.map(v => Number(v));\n    }\n    let min;\n    let max;\n    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n        const mappedValues = values.map(v => Number(v));\n        min = xScaleMin ? xScaleMin : Math.min(...mappedValues);\n        max = xScaleMax ? xScaleMax : Math.max(...mappedValues);\n    }\n    if (scaleType === ScaleType.Time) {\n        domain = [new Date(min), new Date(max)];\n        xSet = [...values].sort((a, b) => {\n            const aDate = a.getTime();\n            const bDate = b.getTime();\n            if (aDate > bDate)\n                return 1;\n            if (bDate > aDate)\n                return -1;\n            return 0;\n        });\n    }\n    else if (scaleType === ScaleType.Linear) {\n        domain = [min, max];\n        // Use compare function to sort numbers numerically\n        xSet = [...values].sort((a, b) => a - b);\n    }\n    else {\n        domain = values;\n        xSet = values;\n    }\n    return { domain, xSet, scaleType };\n}\n\nfunction sortLinear(data, property, direction = 'asc') {\n    return data.sort((a, b) => {\n        if (direction === 'asc') {\n            return a[property] - b[property];\n        }\n        else {\n            return b[property] - a[property];\n        }\n    });\n}\nfunction sortByDomain(data, property, direction = 'asc', domain) {\n    return data.sort((a, b) => {\n        const aVal = a[property];\n        const bVal = b[property];\n        const aIdx = domain.indexOf(aVal);\n        const bIdx = domain.indexOf(bVal);\n        if (direction === 'asc') {\n            return aIdx - bIdx;\n        }\n        else {\n            return bIdx - aIdx;\n        }\n    });\n}\nfunction sortByTime(data, property, direction = 'asc') {\n    return data.sort((a, b) => {\n        const aDate = a[property].getTime();\n        const bDate = b[property].getTime();\n        if (direction === 'asc') {\n            if (aDate > bDate)\n                return 1;\n            if (bDate > aDate)\n                return -1;\n            return 0;\n        }\n        else {\n            if (aDate > bDate)\n                return -1;\n            if (bDate > aDate)\n                return 1;\n            return 0;\n        }\n    });\n}\n\nclass AreaSeriesComponent {\n    constructor() {\n        this.baseValue = 'auto';\n        this.stacked = false;\n        this.normalized = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradient();\n        let currentArea;\n        let startingArea;\n        const xProperty = d => {\n            const label = d.name;\n            return this.xScale(label);\n        };\n        if (this.stacked || this.normalized) {\n            currentArea = area()\n                .x(xProperty)\n                .y0((d, i) => this.yScale(d.d0))\n                .y1((d, i) => this.yScale(d.d1));\n            startingArea = area()\n                .x(xProperty)\n                .y0(d => this.yScale.range()[0])\n                .y1(d => this.yScale.range()[0]);\n        }\n        else {\n            currentArea = area()\n                .x(xProperty)\n                .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n                .y1(d => this.yScale(d.value));\n            startingArea = area()\n                .x(xProperty)\n                .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n                .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\n        }\n        currentArea.curve(this.curve);\n        startingArea.curve(this.curve);\n        this.opacity = 0.8;\n        let data = this.data.series;\n        if (this.scaleType === ScaleType.Linear) {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        this.path = currentArea(data);\n        this.startingPath = startingArea(data);\n    }\n    updateGradient() {\n        if (this.colors.scaleType === ScaleType.Linear) {\n            this.hasGradient = true;\n            if (this.stacked || this.normalized) {\n                const d0values = this.data.series.map(d => d.d0);\n                const d1values = this.data.series.map(d => d.d1);\n                const max = Math.max(...d1values);\n                const min = Math.min(...d0values);\n                this.gradientStops = this.colors.getLinearGradientStops(max, min);\n            }\n            else {\n                const values = this.data.series.map(d => d.value);\n                const max = Math.max(...values);\n                this.gradientStops = this.colors.getLinearGradientStops(max);\n            }\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n        }\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n}\nAreaSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nAreaSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", baseValue: \"baseValue\", colors: \"colors\", scaleType: \"scaleType\", stacked: \"stacked\", normalized: \"normalized\", gradient: \"gradient\", curve: \"curve\", activeEntries: \"activeEntries\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `, isInline: true, components: [{ type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: [\"data\", \"path\", \"startingPath\", \"fill\", \"opacity\", \"startOpacity\", \"endOpacity\", \"gradient\", \"stops\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-area-series]',\n                    template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], baseValue: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], stacked: [{\n                type: Input\n            }], normalized: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass AreaChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = false;\n        this.yAxis = false;\n        this.baseValue = 'auto';\n        this.autoScale = false;\n        this.timeline = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const values = [...domain];\n        if (!this.autoScale) {\n            values.push(0);\n        }\n        if (this.baseValue !== 'auto') {\n            values.push(this.baseValue);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getScaleType(values) {\n        let date = true;\n        let num = true;\n        for (const value of values) {\n            if (isDate(value)) {\n                date = false;\n            }\n            if (isNumber(value)) {\n                num = false;\n            }\n        }\n        if (date) {\n            return ScaleType.Time;\n        }\n        if (num) {\n            return ScaleType.Linear;\n        }\n        return ScaleType.Ordinal;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartComponent, selector: \"ngx-charts-area-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", baseValue: \"baseValue\", autoScale: \"autoScale\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], baseValue: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showXAxisLabel = false;\n        this.showYAxisLabel = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.yDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.seriesType = SeriesType;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let d0 = 0;\n            let total = 0;\n            for (const group of this.results) {\n                const d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    total += d.value;\n                }\n            }\n            for (const group of this.results) {\n                let d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    d.d0 = d0;\n                    d.d1 = d0 + d.value;\n                    d0 += d.value;\n                }\n                else {\n                    d = {\n                        name: val,\n                        value: 0,\n                        d0,\n                        d1: d0\n                    };\n                    group.series.push(d);\n                }\n                if (total > 0) {\n                    d.d0 = (d.d0 * 100) / total;\n                    d.d1 = (d.d1 * 100) / total;\n                }\n                else {\n                    d.d0 = 0;\n                    d.d1 = 0;\n                }\n            }\n        }\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartNormalizedComponent, selector: \"ngx-charts-area-chart-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = false;\n        this.yAxis = false;\n        this.timeline = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.seriesType = SeriesType;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let d0 = 0;\n            for (const group of this.results) {\n                let d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    d.d0 = d0;\n                    d.d1 = d0 + d.value;\n                    d0 += d.value;\n                }\n                else {\n                    d = {\n                        name: val,\n                        value: 0,\n                        d0,\n                        d1: d0\n                    };\n                    group.series.push(d);\n                }\n            }\n        }\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let sum = 0;\n            for (const group of this.results) {\n                const d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    sum += d.value;\n                }\n            }\n            domain.push(sum);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartStackedComponent, selector: \"ngx-charts-area-chart-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartModule {\n}\nAreaChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAreaChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent], imports: [ChartCommonModule], exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent] });\nAreaChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n                    exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n                }]\n        }] });\n\nclass BarComponent {\n    constructor(element) {\n        this.roundEdges = true;\n        this.gradient = false;\n        this.offset = 0;\n        this.isActive = false;\n        this.animations = true;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.hasGradient = false;\n        this.hideBar = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (changes.roundEdges) {\n            this.loadAnimation();\n        }\n        this.update();\n    }\n    update() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient || this.stops) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updatePathEl();\n        this.checkToHideBar();\n    }\n    loadAnimation() {\n        this.path = this.getStartingPath();\n        setTimeout(this.update.bind(this), 100);\n    }\n    updatePathEl() {\n        const node = select(this.element).select('.bar');\n        const path = this.getPath();\n        if (this.animations) {\n            node.transition().duration(500).attr('d', path);\n        }\n        else {\n            node.attr('d', path);\n        }\n    }\n    getGradient() {\n        if (this.stops) {\n            return this.stops;\n        }\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.getStartOpacity()\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    getStartingPath() {\n        if (!this.animations) {\n            return this.getPath();\n        }\n        let radius = this.getRadius();\n        let path;\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                radius = Math.min(this.height, radius);\n                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                radius = Math.min(this.width, radius);\n                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n            }\n        }\n        else {\n            if (this.orientation === BarOrientation.Vertical) {\n                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n            }\n        }\n        return path;\n    }\n    getPath() {\n        let radius = this.getRadius();\n        let path;\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                radius = Math.min(this.height, radius);\n                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                radius = Math.min(this.width, radius);\n                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n            }\n        }\n        else {\n            path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n        }\n        return path;\n    }\n    getRadius() {\n        let radius = 0;\n        if (this.roundEdges && this.height > 5 && this.width > 5) {\n            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n        }\n        return radius;\n    }\n    getStartOpacity() {\n        if (this.roundEdges) {\n            return 0.2;\n        }\n        else {\n            return 0.5;\n        }\n    }\n    get edges() {\n        let edges = [false, false, false, false];\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                if (this.data.value > 0) {\n                    edges = [true, true, false, false];\n                }\n                else {\n                    edges = [false, false, true, true];\n                }\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                if (this.data.value > 0) {\n                    edges = [false, true, false, true];\n                }\n                else {\n                    edges = [true, false, true, false];\n                }\n            }\n        }\n        return edges;\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    checkToHideBar() {\n        this.hideBar =\n            this.noBarWhenZero &&\n                ((this.orientation === BarOrientation.Vertical && this.height === 0) ||\n                    (this.orientation === BarOrientation.Horizontal && this.width === 0));\n    }\n}\nBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: { fill: \"fill\", data: \"data\", width: \"width\", height: \"height\", x: \"x\", y: \"y\", orientation: \"orientation\", roundEdges: \"roundEdges\", gradient: \"gradient\", offset: \"offset\", isActive: \"isActive\", stops: \"stops\", animations: \"animations\", ariaLabel: \"ariaLabel\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-bar]',\n                    template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nvar BarChartType;\n(function (BarChartType) {\n    BarChartType[\"Standard\"] = \"standard\";\n    BarChartType[\"Normalized\"] = \"normalized\";\n    BarChartType[\"Stacked\"] = \"stacked\";\n})(BarChartType || (BarChartType = {}));\n\nvar D0Types;\n(function (D0Types) {\n    D0Types[\"positive\"] = \"positive\";\n    D0Types[\"negative\"] = \"negative\";\n})(D0Types || (D0Types = {}));\n\nclass BarLabelComponent {\n    constructor(element) {\n        this.dimensionsChanged = new EventEmitter();\n        this.horizontalPadding = 2;\n        this.verticalPadding = 5;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getSize() {\n        const h = this.element.getBoundingClientRect().height;\n        const w = this.element.getBoundingClientRect().width;\n        return { height: h, width: w, negative: this.value < 0 };\n    }\n    ngAfterViewInit() {\n        this.dimensionsChanged.emit(this.getSize());\n    }\n    update() {\n        if (this.valueFormatting) {\n            this.formatedValue = this.valueFormatting(this.value);\n        }\n        else {\n            this.formatedValue = formatLabel(this.value);\n        }\n        if (this.orientation === 'horizontal') {\n            this.x = this.barX + this.barWidth;\n            // if the value is negative then it's on the left of the x0.\n            // we need to put the data label in front of the bar\n            if (this.value < 0) {\n                this.x = this.x - this.horizontalPadding;\n                this.textAnchor = 'end';\n            }\n            else {\n                this.x = this.x + this.horizontalPadding;\n                this.textAnchor = 'start';\n            }\n            this.y = this.barY + this.barHeight / 2;\n        }\n        else {\n            // orientation must be \"vertical\"\n            this.x = this.barX + this.barWidth / 2;\n            this.y = this.barY + this.barHeight;\n            if (this.value < 0) {\n                this.y = this.y + this.verticalPadding;\n                this.textAnchor = 'end';\n            }\n            else {\n                this.y = this.y - this.verticalPadding;\n                this.textAnchor = 'start';\n            }\n            this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n        }\n    }\n}\nBarLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarLabelComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nBarLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: { value: \"value\", valueFormatting: \"valueFormatting\", barX: \"barX\", barY: \"barY\", barWidth: \"barWidth\", barHeight: \"barHeight\", orientation: \"orientation\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `, isInline: true, styles: [\".textDataLabel{font-size:11px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarLabelComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'g[ngx-charts-bar-label]', template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".textDataLabel{font-size:11px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { value: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], barX: [{\n                type: Input\n            }], barY: [{\n                type: Input\n            }], barWidth: [{\n                type: Input\n            }], barHeight: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }] } });\n\nclass SeriesHorizontal {\n    constructor() {\n        this.type = BarChartType.Standard;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dataLabelWidthChanged = new EventEmitter();\n        this.barsForDataLabels = [];\n        this.barOrientation = BarOrientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateTooltipSettings();\n        const d0 = {\n            [D0Types.positive]: 0,\n            [D0Types.negative]: 0\n        };\n        let d0Type;\n        d0Type = D0Types.positive;\n        let total;\n        if (this.type === BarChartType.Normalized) {\n            total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n        }\n        const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n        this.bars = this.series.map(d => {\n            let value = d.value;\n            const label = this.getLabel(d);\n            const formattedLabel = formatLabel(label);\n            const roundEdges = this.roundEdges;\n            d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n            const bar = {\n                value,\n                label,\n                roundEdges,\n                data: d,\n                formattedLabel\n            };\n            bar.height = this.yScale.bandwidth();\n            if (this.type === BarChartType.Standard) {\n                bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n                if (value < 0) {\n                    bar.x = this.xScale(value);\n                }\n                else {\n                    bar.x = this.xScale(xScaleMin);\n                }\n                bar.y = this.yScale(label);\n            }\n            else if (this.type === BarChartType.Stacked) {\n                const offset0 = d0[d0Type];\n                const offset1 = offset0 + value;\n                d0[d0Type] += value;\n                bar.width = this.xScale(offset1) - this.xScale(offset0);\n                bar.x = this.xScale(offset0);\n                bar.y = 0;\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (this.type === BarChartType.Normalized) {\n                let offset0 = d0[d0Type];\n                let offset1 = offset0 + value;\n                d0[d0Type] += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.width = this.xScale(offset1) - this.xScale(offset0);\n                bar.x = this.xScale(offset0);\n                bar.y = 0;\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (this.colors.scaleType === ScaleType.Ordinal) {\n                bar.color = this.colors.getColor(label);\n            }\n            else {\n                if (this.type === BarChartType.Standard) {\n                    bar.color = this.colors.getColor(value);\n                    bar.gradientStops = this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = this.colors.getColor(bar.offset1);\n                    bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            let tooltipLabel = formattedLabel;\n            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n            if (this.seriesName !== null && this.seriesName !== undefined) {\n                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n                bar.data.series = this.seriesName;\n                bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n            }\n            bar.tooltipText = this.tooltipDisabled\n                ? undefined\n                : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n            return bar;\n        });\n        this.updateDataLabels();\n    }\n    updateDataLabels() {\n        if (this.type === BarChartType.Stacked) {\n            this.barsForDataLabels = [];\n            const section = {};\n            section.series = this.seriesName;\n            const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n            const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n            section.total = totalPositive + totalNegative;\n            section.x = 0;\n            section.y = 0;\n            // if total is positive then we show it on the right, otherwise on the left\n            if (section.total > 0) {\n                section.width = this.xScale(totalPositive);\n            }\n            else {\n                section.width = this.xScale(totalNegative);\n            }\n            section.height = this.yScale.bandwidth();\n            this.barsForDataLabels.push(section);\n        }\n        else {\n            this.barsForDataLabels = this.series.map(d => {\n                const section = {};\n                section.series = this.seriesName ?? d.label;\n                section.total = d.value;\n                section.x = this.xScale(0);\n                section.y = this.yScale(d.label);\n                section.width = this.xScale(section.total) - this.xScale(0);\n                section.height = this.yScale.bandwidth();\n                return section;\n            });\n        }\n    }\n    updateTooltipSettings() {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(active => {\n            return entry.name === active.name && entry.value === active.value;\n        });\n        return item !== undefined;\n    }\n    getLabel(dataItem) {\n        if (dataItem.label) {\n            return dataItem.label;\n        }\n        return dataItem.name;\n    }\n    trackBy(index, bar) {\n        return bar.label;\n    }\n    trackDataLabelBy(index, barLabel) {\n        return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n    click(data) {\n        this.select.emit(data);\n    }\n}\nSeriesHorizontal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesHorizontal, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSeriesHorizontal.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: { dims: \"dims\", type: \"type\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", activeEntries: \"activeEntries\", seriesName: \"seriesName\", tooltipTemplate: \"tooltipTemplate\", roundEdges: \"roundEdges\", animations: \"animations\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dataLabelWidthChanged: \"dataLabelWidthChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: [\"value\", \"valueFormatting\", \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"orientation\"], outputs: [\"dimensionsChanged\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesHorizontal, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-series-horizontal]',\n                    template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { dims: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], seriesName: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dataLabelWidthChanged: [{\n                type: Output\n            }] } });\n\nclass BarHorizontalComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getXScale() {\n        this.xDomain = this.getXDomain();\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale() {\n        this.yDomain = this.getYDomain();\n        const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n    }\n    getXDomain() {\n        const values = this.results.map(d => d.value);\n        const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n        return [min, max];\n    }\n    getYDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.yDomain;\n        }\n        else {\n            domain = this.xDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.xDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (event.index === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalComponent, selector: \"ngx-charts-bar-horizontal\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", xScaleMax: \"xScaleMax\", xScaleMin: \"xScaleMin\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontal2DComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.groupPadding = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barOrientation = BarOrientation;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.groupScale = this.getGroupScale();\n        this.innerScale = this.getInnerScale();\n        this.valueScale = this.getValueScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.height])\n            .paddingInner(spacing)\n            .paddingOuter(spacing / 2)\n            .domain(this.groupDomain);\n    }\n    getInnerScale() {\n        const height = this.groupScale.bandwidth();\n        const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n    }\n    getValueScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const min = Math.min(0, ...domain);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n        return [min, max];\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.groupScale(group.label)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontal2DComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontal2DComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontal2DComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontal2DComponent, selector: \"ngx-charts-bar-horizontal-2d\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", groupPadding: \"groupPadding\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", xScaleMax: \"xScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: [\"data\", \"dims\", \"xScale\", \"yScale\", \"orient\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontal2DComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-2d', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], groupPadding: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontalNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.valueDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.barChartType = BarChartType;\n        this.isSSR = false;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getYScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getXScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.yScale(group.name)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalNormalizedComponent, selector: \"ngx-charts-bar-horizontal-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontalStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        this.barChartType = BarChartType;\n        this.isSSR = false;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        let smallest = 0;\n        let biggest = 0;\n        for (const group of this.results) {\n            let smallestSum = 0;\n            let biggestSum = 0;\n            for (const d of group.series) {\n                if (d.value < 0) {\n                    smallestSum += d.value;\n                }\n                else {\n                    biggestSum += d.value;\n                }\n                smallest = d.value < smallest ? d.value : smallest;\n                biggest = d.value > biggest ? d.value : biggest;\n            }\n            domain.push(smallestSum);\n            domain.push(biggestSum);\n        }\n        domain.push(smallest);\n        domain.push(biggest);\n        const min = Math.min(0, ...domain);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n        return [min, max];\n    }\n    getYScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getXScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.yScale(group.name)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalStackedComponent, selector: \"ngx-charts-bar-horizontal-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", xScaleMax: \"xScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass SeriesVerticalComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.type = BarChartType.Standard;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dataLabelHeightChanged = new EventEmitter();\n        this.barsForDataLabels = [];\n        this.barOrientation = BarOrientation;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateTooltipSettings();\n        let width;\n        if (this.series.length) {\n            width = this.xScale.bandwidth();\n        }\n        width = Math.round(width);\n        const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n        const d0 = {\n            [D0Types.positive]: 0,\n            [D0Types.negative]: 0\n        };\n        let d0Type = D0Types.positive;\n        let total;\n        if (this.type === BarChartType.Normalized) {\n            total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n        }\n        this.bars = this.series.map((d, index) => {\n            let value = d.value;\n            const label = this.getLabel(d);\n            const formattedLabel = formatLabel(label);\n            const roundEdges = this.roundEdges;\n            d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n            const bar = {\n                value,\n                label,\n                roundEdges,\n                data: d,\n                width,\n                formattedLabel,\n                height: 0,\n                x: 0,\n                y: 0\n            };\n            if (this.type === BarChartType.Standard) {\n                bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n                bar.x = this.xScale(label);\n                if (value < 0) {\n                    bar.y = this.yScale(0);\n                }\n                else {\n                    bar.y = this.yScale(value);\n                }\n            }\n            else if (this.type === BarChartType.Stacked) {\n                const offset0 = d0[d0Type];\n                const offset1 = offset0 + value;\n                d0[d0Type] += value;\n                bar.height = this.yScale(offset0) - this.yScale(offset1);\n                bar.x = 0;\n                bar.y = this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (this.type === BarChartType.Normalized) {\n                let offset0 = d0[d0Type];\n                let offset1 = offset0 + value;\n                d0[d0Type] += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.height = this.yScale(offset0) - this.yScale(offset1);\n                bar.x = 0;\n                bar.y = this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (this.colors.scaleType === ScaleType.Ordinal) {\n                bar.color = this.colors.getColor(label);\n            }\n            else {\n                if (this.type === BarChartType.Standard) {\n                    bar.color = this.colors.getColor(value);\n                    bar.gradientStops = this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = this.colors.getColor(bar.offset1);\n                    bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            let tooltipLabel = formattedLabel;\n            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n            if (this.seriesName !== null && this.seriesName !== undefined) {\n                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n                bar.data.series = this.seriesName;\n                bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n            }\n            bar.tooltipText = this.tooltipDisabled\n                ? undefined\n                : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n            return bar;\n        });\n        this.updateDataLabels();\n    }\n    updateDataLabels() {\n        if (this.type === BarChartType.Stacked) {\n            this.barsForDataLabels = [];\n            const section = {};\n            section.series = this.seriesName;\n            const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n            const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n            section.total = totalPositive + totalNegative;\n            section.x = 0;\n            section.y = 0;\n            if (section.total > 0) {\n                section.height = this.yScale(totalPositive);\n            }\n            else {\n                section.height = this.yScale(totalNegative);\n            }\n            section.width = this.xScale.bandwidth();\n            this.barsForDataLabels.push(section);\n        }\n        else {\n            this.barsForDataLabels = this.series.map(d => {\n                const section = {};\n                section.series = this.seriesName ?? d.label;\n                section.total = d.value;\n                section.x = this.xScale(d.label);\n                section.y = this.yScale(0);\n                section.height = this.yScale(section.total) - this.yScale(0);\n                section.width = this.xScale.bandwidth();\n                return section;\n            });\n        }\n    }\n    updateTooltipSettings() {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(active => {\n            return entry.name === active.name && entry.value === active.value;\n        });\n        return item !== undefined;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    getLabel(dataItem) {\n        if (dataItem.label) {\n            return dataItem.label;\n        }\n        return dataItem.name;\n    }\n    trackBy(index, bar) {\n        return bar.label;\n    }\n    trackDataLabelBy(index, barLabel) {\n        return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n}\nSeriesVerticalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesVerticalComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nSeriesVerticalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: { dims: \"dims\", type: \"type\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", gradient: \"gradient\", activeEntries: \"activeEntries\", seriesName: \"seriesName\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", roundEdges: \"roundEdges\", animations: \"animations\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dataLabelHeightChanged: \"dataLabelHeightChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [@animationState]=\"'active'\"\n        [@.disabled]=\"!animations\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: [\"value\", \"valueFormatting\", \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"orientation\"], outputs: [\"dimensionsChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesVerticalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-series-vertical]',\n                    template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [@animationState]=\"'active'\"\n        [@.disabled]=\"!animations\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { dims: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], seriesName: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dataLabelHeightChanged: [{\n                type: Output\n            }] } });\n\nclass BarVerticalComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    getXScale() {\n        this.xDomain = this.getXDomain();\n        const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n    }\n    getYScale() {\n        this.yDomain = this.getYDomain();\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getXDomain() {\n        return this.results.map(d => d.label);\n    }\n    getYDomain() {\n        const values = this.results.map(d => d.value);\n        let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n            min = Math.min(min, ...this.yAxisTicks);\n        }\n        let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n            max = Math.max(max, ...this.yAxisTicks);\n        }\n        return [min, max];\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.xDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.xDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxHeightChanged(event) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (event.index === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalComponent, selector: \"ngx-charts-bar-vertical\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", yScaleMax: \"yScaleMax\", yScaleMin: \"yScaleMin\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVertical2DComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.scaleType = ScaleType.Ordinal;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.groupPadding = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barOrientation = BarOrientation;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.groupScale = this.getGroupScale();\n        this.innerScale = this.getInnerScale();\n        this.valueScale = this.getValueScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    onDataLabelMaxHeightChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    getGroupScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.width])\n            .paddingInner(spacing)\n            .paddingOuter(spacing / 2)\n            .domain(this.groupDomain);\n    }\n    getInnerScale() {\n        const width = this.groupScale.bandwidth();\n        const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n    }\n    getValueScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const min = Math.min(0, ...domain);\n        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n        return [min, max];\n    }\n    groupTransform(group) {\n        return `translate(${this.groupScale(group.label)}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVertical2DComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVertical2DComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVertical2DComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVertical2DComponent, selector: \"ngx-charts-bar-vertical-2d\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", scaleType: \"scaleType\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", groupPadding: \"groupPadding\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", yScaleMax: \"yScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            ngx-charts-series-vertical\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n            [activeEntries]=\"activeEntries\"\n            [xScale]=\"innerScale\"\n            [yScale]=\"valueScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: [\"data\", \"dims\", \"xScale\", \"yScale\", \"orient\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVertical2DComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-2d', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            ngx-charts-series-vertical\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n            [activeEntries]=\"activeEntries\"\n            [xScale]=\"innerScale\"\n            [yScale]=\"valueScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], groupPadding: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVerticalNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.valueDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.isSSR = false;\n        this.barChartType = BarChartType;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getXScale() {\n        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getYScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(${this.xScale(group.name)}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalNormalizedComponent, selector: \"ngx-charts-bar-vertical-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVerticalStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barChartType = BarChartType;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        let smallest = 0;\n        let biggest = 0;\n        for (const group of this.results) {\n            let smallestSum = 0;\n            let biggestSum = 0;\n            for (const d of group.series) {\n                if (d.value < 0) {\n                    smallestSum += d.value;\n                }\n                else {\n                    biggestSum += d.value;\n                }\n                smallest = d.value < smallest ? d.value : smallest;\n                biggest = d.value > biggest ? d.value : biggest;\n            }\n            domain.push(smallestSum);\n            domain.push(biggestSum);\n        }\n        domain.push(smallest);\n        domain.push(biggest);\n        const min = Math.min(0, ...domain);\n        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n        return [min, max];\n    }\n    getXScale() {\n        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getYScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    onDataLabelMaxHeightChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    groupTransform(group) {\n        return `translate(${this.xScale(group.name) || 0}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalStackedComponent, selector: \"ngx-charts-bar-vertical-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", yScaleMax: \"yScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarChartModule {\n}\nBarChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBarChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, declarations: [BarComponent,\n        BarHorizontalComponent,\n        BarHorizontal2DComponent,\n        BarHorizontalNormalizedComponent,\n        BarHorizontalStackedComponent,\n        BarVerticalComponent,\n        BarVertical2DComponent,\n        BarVerticalNormalizedComponent,\n        BarVerticalStackedComponent,\n        BarLabelComponent,\n        SeriesHorizontal,\n        SeriesVerticalComponent], imports: [ChartCommonModule], exports: [BarComponent,\n        BarHorizontalComponent,\n        BarHorizontal2DComponent,\n        BarHorizontalNormalizedComponent,\n        BarHorizontalStackedComponent,\n        BarVerticalComponent,\n        BarVertical2DComponent,\n        BarVerticalNormalizedComponent,\n        BarVerticalStackedComponent,\n        BarLabelComponent,\n        SeriesHorizontal,\n        SeriesVerticalComponent] });\nBarChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [\n                        BarComponent,\n                        BarHorizontalComponent,\n                        BarHorizontal2DComponent,\n                        BarHorizontalNormalizedComponent,\n                        BarHorizontalStackedComponent,\n                        BarVerticalComponent,\n                        BarVertical2DComponent,\n                        BarVerticalNormalizedComponent,\n                        BarVerticalStackedComponent,\n                        BarLabelComponent,\n                        SeriesHorizontal,\n                        SeriesVerticalComponent\n                    ],\n                    exports: [\n                        BarComponent,\n                        BarHorizontalComponent,\n                        BarHorizontal2DComponent,\n                        BarHorizontalNormalizedComponent,\n                        BarHorizontalStackedComponent,\n                        BarVerticalComponent,\n                        BarVertical2DComponent,\n                        BarVerticalNormalizedComponent,\n                        BarVerticalStackedComponent,\n                        BarLabelComponent,\n                        SeriesHorizontal,\n                        SeriesVerticalComponent\n                    ]\n                }]\n        }] });\n\nconst cloneDeep = rfdc();\nclass BoxComponent {\n    constructor(element, cd) {\n        this.cd = cd;\n        this.roundEdges = true;\n        this.gradient = false;\n        this.offset = 0;\n        this.isActive = false;\n        this.animations = true;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.BarOrientation = BarOrientation;\n        this.initialized = false;\n        this.hasGradient = false;\n        this.hideBar = false;\n        this.nativeElm = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            this.loadAnimation();\n            this.initialized = true;\n        }\n        else {\n            this.update();\n        }\n    }\n    update() {\n        this.boxStrokeWidth = Math.max(this.strokeWidth, 1);\n        this.whiskerStrokeWidth = Math.max(this.strokeWidth / 2, 1);\n        this.medianLineWidth = 1.5 * this.strokeWidth;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updateLineEl();\n        this.updatePathEl();\n        this.checkToHideBar();\n        this.maskLineId = 'mask' + id().toString();\n        this.maskLine = `url(#${this.maskLineId})`;\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    }\n    loadAnimation() {\n        this.boxPath = this.oldPath = this.getStartingPath();\n        this.oldLineCoordinates = this.getStartingLineCoordinates();\n        setTimeout(this.update.bind(this), 100);\n    }\n    updatePathEl() {\n        const nodeBar = select(this.nativeElm).selectAll('.bar');\n        const path = this.getPath();\n        if (this.animations) {\n            nodeBar\n                .attr('d', this.oldPath)\n                .transition()\n                .ease(easeSinInOut)\n                .duration(500)\n                .attrTween('d', this.pathTween(path, 4));\n        }\n        else {\n            nodeBar.attr('d', path);\n        }\n        this.oldPath = path;\n    }\n    updateLineEl() {\n        const lineEl = select(this.nativeElm).selectAll('.bar-line');\n        const lineCoordinates = this.lineCoordinates;\n        const oldLineCoordinates = this.oldLineCoordinates;\n        if (this.animations) {\n            lineEl\n                .attr('x1', (_, index) => oldLineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => oldLineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => oldLineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => oldLineCoordinates[index].v2.y)\n                .transition()\n                .ease(easeSinInOut)\n                .duration(500)\n                .attr('x1', (_, index) => lineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => lineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => lineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => lineCoordinates[index].v2.y);\n        }\n        else {\n            lineEl\n                .attr('x1', (_, index) => lineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => lineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => lineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => lineCoordinates[index].v2.y);\n        }\n        this.oldLineCoordinates = [...lineCoordinates];\n    }\n    /**\n     * See [D3 Selections](https://www.d3indepth.com/selections/)\n     * @param d The joined data.\n     * @param index The index of the element within the selection\n     * @param node The node element (Line).\n     */\n    lineTween(attr, d, index, node) {\n        const nodeLineEl = node[index];\n        return nodeLineEl[attr].baseVal.value;\n    }\n    // TODO: Refactor into another .ts file if https://github.com/swimlane/ngx-charts/pull/1179 gets merged.\n    pathTween(d1, precision) {\n        return function () {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const path0 = this;\n            const path1 = this.cloneNode();\n            path1.setAttribute('d', d1);\n            const n0 = path0?.getTotalLength();\n            const n1 = path1?.getTotalLength();\n            // Uniform sampling of distance based on specified precision.\n            const distances = [0];\n            let i = 0;\n            const dt = precision / Math.max(n0, n1);\n            while (i < 1) {\n                distances.push(i);\n                i += dt;\n            }\n            distances.push(1);\n            // Compute point-interpolators at each distance.\n            const points = distances.map((t) => {\n                const p0 = path0.getPointAtLength(t * n0);\n                const p1 = path1.getPointAtLength(t * n1);\n                return interpolate([p0.x, p0.y], [p1.x, p1.y]);\n            });\n            // 't': T is the fraction of time (between 0 and 1) since the transition began.\n            return (t) => {\n                return t < 1 ? 'M' + points.map((p) => p(t)).join('L') : d1;\n            };\n        };\n    }\n    getStartingPath() {\n        if (!this.animations) {\n            return this.getPath();\n        }\n        const radius = this.roundEdges ? 1 : 0;\n        const { x, y } = this.lineCoordinates[2].v1;\n        return roundedRect(x - this.width, y - 1, this.width, 2, radius, this.edges);\n    }\n    getPath() {\n        const radius = this.getRadius();\n        let path = '';\n        path = roundedRect(this.x, this.y, this.width, this.height, Math.min(this.height, radius), this.edges);\n        return path;\n    }\n    getStartingLineCoordinates() {\n        if (!this.animations) {\n            return [...this.lineCoordinates];\n        }\n        const lineCoordinates = cloneDeep(this.lineCoordinates);\n        lineCoordinates[1].v1.y = lineCoordinates[1].v2.y = lineCoordinates[3].v1.y = lineCoordinates[3].v2.y = lineCoordinates[0].v1.y = lineCoordinates[0].v2.y =\n            lineCoordinates[2].v1.y;\n        return lineCoordinates;\n    }\n    getRadius() {\n        let radius = 0;\n        if (this.roundEdges && this.height > 5 && this.width > 5) {\n            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n        }\n        return radius;\n    }\n    getGradient() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.getStartOpacity()\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    getStartOpacity() {\n        if (this.roundEdges) {\n            return 0.2;\n        }\n        else {\n            return 0.5;\n        }\n    }\n    get edges() {\n        let edges = [false, false, false, false];\n        if (this.roundEdges) {\n            edges = [true, true, true, true];\n        }\n        return edges;\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    checkToHideBar() {\n        this.hideBar = this.noBarWhenZero && this.height === 0;\n    }\n}\nBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxComponent, selector: \"g[ngx-charts-box]\", inputs: { strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", fill: \"fill\", data: \"data\", width: \"width\", height: \"height\", x: \"x\", y: \"y\", lineCoordinates: \"lineCoordinates\", roundEdges: \"roundEdges\", gradient: \"gradient\", gradientStops: \"gradientStops\", offset: \"offset\", isActive: \"isActive\", animations: \"animations\", ariaLabel: \"ariaLabel\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-box]',\n                    template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], lineCoordinates: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], gradientStops: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass BoxSeriesComponent {\n    constructor() {\n        this.animations = true;\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    update() {\n        this.updateTooltipSettings();\n        const width = this.series && this.series.series.length ? Math.round(this.xScale.bandwidth()) : null;\n        const seriesName = this.series.name;\n        // Calculate Quantile and Whiskers for each box serie.\n        this.counts = this.series.series;\n        const mappedCounts = this.counts.map(serie => Number(serie.value));\n        this.whiskers = [min(mappedCounts), max(mappedCounts)];\n        // We get the group count and must sort it in order to retrieve quantiles.\n        const groupCounts = this.counts.map(item => item.value).sort((a, b) => Number(a) - Number(b));\n        this.quartiles = this.getBoxQuantiles(groupCounts);\n        this.lineCoordinates = this.getLinesCoordinates(seriesName.toString(), this.whiskers, this.quartiles, width);\n        const value = this.quartiles[1];\n        const formattedLabel = formatLabel(seriesName);\n        const box = {\n            value,\n            data: this.counts,\n            label: seriesName,\n            formattedLabel,\n            width,\n            height: 0,\n            x: 0,\n            y: 0,\n            roundEdges: this.roundEdges,\n            quartiles: this.quartiles,\n            lineCoordinates: this.lineCoordinates\n        };\n        box.height = Math.abs(this.yScale(this.quartiles[0]) - this.yScale(this.quartiles[2]));\n        box.x = this.xScale(seriesName.toString());\n        box.y = this.yScale(this.quartiles[2]);\n        box.ariaLabel = formattedLabel + ' - Median: ' + value.toLocaleString();\n        if (this.colors.scaleType === ScaleType.Ordinal) {\n            box.color = this.colors.getColor(seriesName);\n        }\n        else {\n            box.color = this.colors.getColor(this.quartiles[1]);\n            box.gradientStops = this.colors.getLinearGradientStops(this.quartiles[0], this.quartiles[2]);\n        }\n        const tooltipLabel = formattedLabel;\n        const formattedTooltipLabel = `\n    <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n    <span class=\"tooltip-val\">\n      • Q1: ${this.quartiles[0]} • Q2: ${this.quartiles[1]} • Q3: ${this.quartiles[2]}<br>\n      • Min: ${this.whiskers[0]} • Max: ${this.whiskers[1]}\n    </span>`;\n        box.tooltipText = this.tooltipDisabled ? undefined : formattedTooltipLabel;\n        this.tooltipTitle = this.tooltipDisabled ? undefined : box.tooltipText;\n        this.box = box;\n    }\n    getBoxQuantiles(inputData) {\n        return [quantile(inputData, 0.25), quantile(inputData, 0.5), quantile(inputData, 0.75)];\n    }\n    getLinesCoordinates(seriesName, whiskers, quartiles, barWidth) {\n        // The X value is not being centered, so had to sum half the width to align it.\n        const commonX = this.xScale(seriesName);\n        const offsetX = commonX + barWidth / 2;\n        const medianLineWidth = Math.max(barWidth + 4 * this.strokeWidth, 1);\n        const whiskerLineWidth = Math.max(barWidth / 3, 1);\n        const whiskerZero = this.yScale(whiskers[0]);\n        const whiskerOne = this.yScale(whiskers[1]);\n        const median = this.yScale(quartiles[1]);\n        const topLine = {\n            v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerZero },\n            v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerZero }\n        };\n        const medianLine = {\n            v1: { x: offsetX + medianLineWidth / 2, y: median },\n            v2: { x: offsetX - medianLineWidth / 2, y: median }\n        };\n        const bottomLine = {\n            v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerOne },\n            v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerOne }\n        };\n        const verticalLine = {\n            v1: { x: offsetX, y: whiskerZero },\n            v2: { x: offsetX, y: whiskerOne }\n        };\n        return [verticalLine, topLine, medianLine, bottomLine];\n    }\n    updateTooltipSettings() {\n        if (this.tooltipDisabled) {\n            this.tooltipPlacement = undefined;\n            this.tooltipType = undefined;\n        }\n        else {\n            if (!this.tooltipPlacement) {\n                this.tooltipPlacement = PlacementTypes.Top;\n            }\n            if (!this.tooltipType) {\n                this.tooltipType = StyleTypes.tooltip;\n            }\n        }\n    }\n}\nBoxSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nBoxSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxSeriesComponent, selector: \"g[ngx-charts-box-series]\", inputs: { dims: \"dims\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", animations: \"animations\", strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", tooltipPlacement: \"tooltipPlacement\", tooltipType: \"tooltipType\", roundEdges: \"roundEdges\", gradient: \"gradient\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: BoxComponent, selector: \"g[ngx-charts-box]\", inputs: [\"strokeColor\", \"strokeWidth\", \"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"lineCoordinates\", \"roundEdges\", \"gradient\", \"gradientStops\", \"offset\", \"isActive\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-box-series]',\n                    template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { dims: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], tooltipPlacement: [{\n                type: Input\n            }], tooltipType: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass BoxChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        /** Show or hide the legend. */\n        this.legend = false;\n        this.legendPosition = LegendPosition.Right;\n        this.legendTitle = 'Legend';\n        this.showGridLines = true;\n        this.xAxis = true;\n        this.yAxis = true;\n        this.showXAxisLabel = true;\n        this.showYAxisLabel = true;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.strokeColor = '#FFFFFF';\n        this.strokeWidth = 2;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        /** Chart Margins (For each side, counterclock wise). */\n        this.margin = [10, 20, 10, 20];\n        /** Chart X axis dimension. */\n        this.xAxisHeight = 0;\n        /** Chart Y axis dimension. */\n        this.yAxisWidth = 0;\n    }\n    trackBy(index, item) {\n        return item.name;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.setScales();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    setColors() {\n        let domain = [];\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    setScales() {\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    }\n    getXScale(domain, width) {\n        const scale = scaleBand()\n            .domain(domain.map(d => d.toString()))\n            .rangeRound([0, width])\n            .padding(0.5);\n        return scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().domain(domain).range([height, 0]);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getUniqueBoxChartXDomainValues(results) {\n        const valueSet = new Set();\n        for (const result of results) {\n            valueSet.add(result.name);\n        }\n        return Array.from(valueSet);\n    }\n    getXDomain() {\n        let domain = [];\n        const values = this.getUniqueBoxChartXDomainValues(this.results);\n        let min;\n        let max;\n        if (typeof values[0] === 'string') {\n            domain = values.map(val => val.toString());\n        }\n        else if (typeof values[0] === 'number') {\n            const mappedValues = values.map(v => Number(v));\n            min = Math.min(...mappedValues);\n            max = Math.max(...mappedValues);\n            domain = [min, max];\n        }\n        else {\n            const mappedValues = values.map(v => Number(new Date(v)));\n            min = Math.min(...mappedValues);\n            max = Math.max(...mappedValues);\n            domain = [new Date(min), new Date(max)];\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const values = [...domain];\n        const mappedValues = values.map(v => Number(v));\n        const min = Math.min(...mappedValues);\n        const max = Math.max(...mappedValues);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => `${d.name}`);\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    onActivate(data) {\n        this.activate.emit(data);\n    }\n    onDeactivate(data) {\n        this.deactivate.emit(data);\n    }\n    getLegendOptions() {\n        const legendOpts = {\n            scaleType: this.schemeType,\n            colors: this.colors,\n            domain: [],\n            position: this.legendPosition,\n            title: this.legendTitle\n        };\n        if (this.schemeType === ScaleType.Ordinal) {\n            legendOpts.domain = this.xDomain;\n            legendOpts.colors = this.colors;\n        }\n        else {\n            legendOpts.domain = this.yDomain;\n            legendOpts.colors = this.colors.scale;\n        }\n        return legendOpts;\n    }\n}\nBoxChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBoxChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxChartComponent, selector: \"ngx-charts-box-chart\", inputs: { legend: \"legend\", legendPosition: \"legendPosition\", legendTitle: \"legendTitle\", legendOptionsConfig: \"legendOptionsConfig\", showGridLines: \"showGridLines\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", roundDomains: \"roundDomains\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", roundEdges: \"roundEdges\", strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", wrapTicks: \"wrapTicks\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: BoxSeriesComponent, selector: \"g[ngx-charts-box-series]\", inputs: [\"dims\", \"series\", \"xScale\", \"yScale\", \"colors\", \"animations\", \"strokeColor\", \"strokeWidth\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipPlacement\", \"tooltipType\", \"roundEdges\", \"gradient\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-box-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendOptionsConfig: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate', { static: false }]\n            }] } });\n\nclass BoxChartModule {\n}\nBoxChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBoxChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent], imports: [ChartCommonModule], exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent] });\nBoxChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent],\n                    exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent]\n                }]\n        }] });\n\nfunction getDomain(values, scaleType, autoScale, minVal, maxVal) {\n    let domain = [];\n    if (scaleType === ScaleType.Linear) {\n        values = values.map(v => Number(v));\n        if (!autoScale) {\n            values.push(0);\n        }\n    }\n    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n        const min = minVal || minVal === 0 ? minVal : Math.min(...values);\n        const max = maxVal ? maxVal : Math.max(...values);\n        domain = [min, max];\n    }\n    else {\n        domain = values;\n    }\n    return domain;\n}\nfunction getScale(domain, range, scaleType, roundDomains) {\n    switch (scaleType) {\n        case ScaleType.Time:\n            return scaleTime().range(range).domain(domain);\n        case ScaleType.Linear: {\n            const scale = scaleLinear().range(range).domain(domain);\n            if (roundDomains) {\n                return scale.nice();\n            }\n            return scale;\n        }\n        case ScaleType.Ordinal:\n            return scalePoint()\n                .range([range[0], range[1]])\n                .domain(domain.map(r => r.toString()));\n        default:\n            return undefined;\n    }\n}\n\nclass BubbleSeriesComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.circles = this.getCircles();\n    }\n    getCircles() {\n        const seriesName = this.data.name;\n        return this.data.series\n            .map((d, i) => {\n            if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n                const y = d.y;\n                const x = d.x;\n                const r = d.r;\n                const radius = this.rScale(r || 1);\n                const tooltipLabel = formatLabel(d.name);\n                const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(x)) : this.xScale(x);\n                const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(y)) : this.yScale(y);\n                const color = this.colors.scaleType === ScaleType.Linear ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n                const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\n                const opacity = isActive ? 1 : 0.3;\n                const data = Object.assign({}, d, {\n                    series: seriesName,\n                    name: d.name,\n                    value: d.y,\n                    x: d.x,\n                    radius: d.r\n                });\n                return {\n                    data,\n                    x,\n                    y,\n                    r,\n                    classNames: [`circle-data-${i}`],\n                    value: y,\n                    label: x,\n                    cx,\n                    cy,\n                    radius,\n                    tooltipLabel,\n                    color,\n                    opacity,\n                    seriesName,\n                    isActive,\n                    transform: `translate(${cx},${cy})`\n                };\n            }\n        })\n            .filter(circle => circle !== undefined);\n    }\n    getTooltipText(circle) {\n        const hasRadius = typeof circle.r !== 'undefined';\n        const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n        const hasSeriesName = circle.seriesName && circle.seriesName.length;\n        const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n        const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n        const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n        const x = formatLabel(circle.x);\n        const y = formatLabel(circle.y);\n        const name = hasSeriesName && hasTooltipLabel\n            ? `${circle.seriesName} • ${circle.tooltipLabel}`\n            : circle.seriesName + circle.tooltipLabel;\n        const tooltipTitle = hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n        return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isVisible(circle) {\n        if (this.activeEntries.length > 0) {\n            return this.isActive({ name: circle.seriesName });\n        }\n        return circle.opacity !== 0;\n    }\n    activateCircle(circle) {\n        circle.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    }\n    deactivateCircle(circle) {\n        circle.barVisible = false;\n        this.deactivate.emit({ name: this.data.name });\n    }\n    trackBy(index, circle) {\n        return `${circle.data.series} ${circle.data.name}`;\n    }\n}\nBubbleSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleSeriesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nBubbleSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BubbleSeriesComponent, selector: \"g[ngx-charts-bubble-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", rScale: \"rScale\", xScaleType: \"xScaleType\", yScaleType: \"yScaleType\", colors: \"colors\", visibleValue: \"visibleValue\", activeEntries: \"activeEntries\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          *ngIf=\"!isSSR\"\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n        <svg:g\n          *ngIf=\"isSSR\"\n          ngx-charts-circle\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    opacity: 0,\n                    transform: 'scale(0)'\n                }),\n                animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-bubble-series]',\n                    template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          *ngIf=\"!isSSR\"\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n        <svg:g\n          *ngIf=\"isSSR\"\n          ngx-charts-circle\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    opacity: 0,\n                                    transform: 'scale(0)'\n                                }),\n                                animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], rScale: [{\n                type: Input\n            }], xScaleType: [{\n                type: Input\n            }], yScaleType: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], visibleValue: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass BubbleChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.showGridLines = true;\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = true;\n        this.yAxis = true;\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.maxRadius = 10;\n        this.minRadius = 3;\n        this.schemeType = ScaleType.Ordinal;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.scaleType = ScaleType.Linear;\n        this.margin = [10, 20, 10, 20];\n        this.bubblePadding = [0, 0, 0, 0];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.activeEntries = [];\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.seriesDomain = this.results.map(d => d.name);\n        this.rDomain = this.getRDomain();\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n        const colorDomain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.rDomain;\n        this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n        this.data = this.results;\n        this.minRadius = Math.max(this.minRadius, 1);\n        this.maxRadius = Math.max(this.maxRadius, 1);\n        this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n        this.bubblePadding = [0, 0, 0, 0];\n        this.setScales();\n        this.bubblePadding = this.getBubblePadding();\n        this.setScales();\n        this.legendOptions = this.getLegendOptions();\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    hideCircles() {\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    getBubblePadding() {\n        let yMin = 0;\n        let xMin = 0;\n        let yMax = this.dims.height;\n        let xMax = this.dims.width;\n        for (const s of this.data) {\n            for (const d of s.series) {\n                const r = this.rScale(d.r);\n                const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(d.x)) : this.xScale(d.x);\n                const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(d.y)) : this.yScale(d.y);\n                xMin = Math.max(r - cx, xMin);\n                yMin = Math.max(r - cy, yMin);\n                yMax = Math.max(cy + r, yMax);\n                xMax = Math.max(cx + r, xMax);\n            }\n        }\n        xMax = Math.max(xMax - this.dims.width, 0);\n        yMax = Math.max(yMax - this.dims.height, 0);\n        return [yMin, xMax, yMax, xMin];\n    }\n    setScales() {\n        let width = this.dims.width;\n        if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n            width = width - this.bubblePadding[1];\n        }\n        let height = this.dims.height;\n        if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n            height = height - this.bubblePadding[2];\n        }\n        this.xScale = this.getXScale(this.xDomain, width);\n        this.yScale = this.getYScale(this.yDomain, height);\n    }\n    getYScale(domain, height) {\n        return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n    }\n    getXScale(domain, width) {\n        return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n    }\n    getRScale(domain, range) {\n        const scale = scaleLinear().range(range).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            position: this.legendPosition,\n            title: undefined\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.rDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    getXDomain() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.x)) {\n                    values.push(d.x);\n                }\n            }\n        }\n        this.xScaleType = getScaleType(values);\n        return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n    }\n    getYDomain() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.y)) {\n                    values.push(d.y);\n                }\n            }\n        }\n        this.yScaleType = getScaleType(values);\n        return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n    }\n    getRDomain() {\n        let min = Infinity;\n        let max = -Infinity;\n        for (const results of this.results) {\n            for (const d of results.series) {\n                const value = Number(d.r) || 1;\n                min = Math.min(min, value);\n                max = Math.max(max, value);\n            }\n        }\n        return [min, max];\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n}\nBubbleChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBubbleChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BubbleChartComponent, selector: \"ngx-charts-bubble-chart\", inputs: { showGridLines: \"showGridLines\", legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", maxRadius: \"maxRadius\", minRadius: \"minRadius\", autoScale: \"autoScale\", schemeType: \"schemeType\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g *ngIf=\"!isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: BubbleSeriesComponent, selector: \"g[ngx-charts-bubble-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"rScale\", \"xScaleType\", \"yScaleType\", \"colors\", \"visibleValue\", \"activeEntries\", \"xAxisLabel\", \"yAxisLabel\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bubble-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g *ngIf=\"!isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { showGridLines: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], maxRadius: [{\n                type: Input\n            }], minRadius: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass BubbleChartModule {\n}\nBubbleChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBubbleChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, declarations: [BubbleChartComponent, BubbleSeriesComponent], imports: [ChartCommonModule], exports: [BubbleChartComponent, BubbleSeriesComponent] });\nBubbleChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [BubbleChartComponent, BubbleSeriesComponent],\n                    exports: [BubbleChartComponent, BubbleSeriesComponent]\n                }]\n        }] });\n\nclass HeatMapCellComponent {\n    constructor(element) {\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.barOrientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.transform = `translate(${this.x} , ${this.y})`;\n        this.startOpacity = 0.3;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        this.gradientStops = this.getGradientStops();\n        if (this.animations) {\n            this.loadAnimation();\n        }\n    }\n    getGradientStops() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.startOpacity\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    loadAnimation() {\n        const node = select(this.element).select('.cell');\n        node.attr('opacity', 0);\n        this.animateToCurrentForm();\n    }\n    animateToCurrentForm() {\n        const node = select(this.element).select('.cell');\n        node.transition().duration(750).attr('opacity', 1);\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n}\nHeatMapCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapCellComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nHeatMapCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatMapCellComponent, selector: \"g[ngx-charts-heat-map-cell]\", inputs: { fill: \"fill\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", data: \"data\", gradient: \"gradient\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-heat-map-cell]',\n                    template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass HeatCellSeriesComponent {\n    constructor() {\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnInit() {\n        if (!this.tooltipText) {\n            this.tooltipText = this.getTooltipText;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.cells = this.getCells();\n    }\n    getCells() {\n        const cells = [];\n        this.data.map(row => {\n            row.series.map(cell => {\n                const value = cell.value;\n                cell.series = row.name;\n                cells.push({\n                    row,\n                    cell,\n                    x: this.xScale(row.name),\n                    y: this.yScale(cell.name),\n                    width: this.xScale.bandwidth(),\n                    height: this.yScale.bandwidth(),\n                    fill: this.colors.getColor(value),\n                    data: value,\n                    label: formatLabel(cell.name),\n                    series: row.name\n                });\n            });\n        });\n        return cells;\n    }\n    getTooltipText({ label, data, series }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n}\nHeatCellSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatCellSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nHeatCellSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatCellSeriesComponent, selector: \"g[ngx-charts-heat-map-cell-series]\", inputs: { data: \"data\", colors: \"colors\", xScale: \"xScale\", yScale: \"yScale\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: HeatMapCellComponent, selector: \"g[ngx-charts-heat-map-cell]\", inputs: [\"fill\", \"x\", \"y\", \"width\", \"height\", \"data\", \"gradient\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatCellSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-heat-map-cell-series]',\n                    template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass HeatMapComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.innerPadding = 8;\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.tooltipDisabled = false;\n        this.activeEntries = [];\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.scaleType = ScaleType.Linear;\n    }\n    update() {\n        super.update();\n        this.formatDates();\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.valueDomain = this.getValueDomain();\n        this.scaleType = getScaleType(this.valueDomain, false);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.scaleType,\n            legendPosition: this.legendPosition\n        });\n        if (this.scaleType === ScaleType.Linear) {\n            let min = this.min;\n            let max = this.max;\n            if (!this.min) {\n                min = Math.min(0, ...this.valueDomain);\n            }\n            if (!this.max) {\n                max = Math.max(...this.valueDomain);\n            }\n            this.valueDomain = [min, max];\n        }\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.rects = this.getRects();\n    }\n    getXDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.name)) {\n                domain.push(group.name);\n            }\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.name)) {\n                    domain.push(d.name);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        return domain;\n    }\n    /**\n     * Converts the input to gap paddingInner in fraction\n     * Supports the following inputs:\n     *    Numbers: 8\n     *    Strings: \"8\", \"8px\", \"8%\"\n     *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n     *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n     *\n     * @memberOf HeatMapComponent\n     */\n    getDimension(value, index = 0, N, L) {\n        if (typeof value === 'string') {\n            value = value\n                .replace('[', '')\n                .replace(']', '')\n                .replace('px', '')\n                // tslint:disable-next-line: quotemark\n                .replace(\"'\", '');\n            if (value.includes(',')) {\n                value = value.split(',');\n            }\n        }\n        if (Array.isArray(value) && typeof index === 'number') {\n            return this.getDimension(value[index], null, N, L);\n        }\n        if (typeof value === 'string' && value.includes('%')) {\n            return +value.replace('%', '') / 100;\n        }\n        return N / (L / +value + 1);\n    }\n    getXScale() {\n        const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n        return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n    }\n    getYScale() {\n        const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n        return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n    }\n    getRects() {\n        const rects = [];\n        this.xDomain.map(xVal => {\n            this.yDomain.map(yVal => {\n                rects.push({\n                    x: this.xScale(xVal),\n                    y: this.yScale(yVal),\n                    rx: 3,\n                    width: this.xScale.bandwidth(),\n                    height: this.yScale.bandwidth(),\n                    fill: 'rgba(200,200,200,0.03)'\n                });\n            });\n        });\n        return rects;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: this.scaleType,\n            domain: this.valueDomain,\n            colors: this.scaleType === ScaleType.Ordinal ? this.colors : this.colors.scale,\n            title: this.scaleType === ScaleType.Ordinal ? this.legendTitle : undefined,\n            position: this.legendPosition\n        };\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nHeatMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nHeatMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatMapComponent, selector: \"ngx-charts-heat-map\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", gradient: \"gradient\", innerPadding: \"innerPadding\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", min: \"min\", max: \"max\", activeEntries: \"activeEntries\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: HeatCellSeriesComponent, selector: \"g[ngx-charts-heat-map-cell-series]\", inputs: [\"data\", \"colors\", \"xScale\", \"yScale\", \"gradient\", \"tooltipDisabled\", \"tooltipText\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-heat-map', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass HeatMapModule {\n}\nHeatMapModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHeatMapModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent], imports: [ChartCommonModule], exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent] });\nHeatMapModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n                    exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n                }]\n        }] });\n\nclass LineComponent {\n    constructor(element, platformId) {\n        this.element = element;\n        this.platformId = platformId;\n        this.fill = 'none';\n        this.animations = true;\n        // @Output() select = new EventEmitter();\n        this.initialized = false;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            this.initialized = true;\n            this.initialPath = this.path;\n        }\n        else {\n            this.updatePathEl();\n        }\n    }\n    updatePathEl() {\n        const node = select(this.element.nativeElement).select('.line');\n        if (this.animations) {\n            node.transition().duration(750).attr('d', this.path);\n        }\n        else {\n            node.attr('d', this.path);\n        }\n    }\n}\nLineComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineComponent, deps: [{ token: i0.ElementRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nLineComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: { path: \"path\", stroke: \"stroke\", data: \"data\", fill: \"fill\", animations: \"animations\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:path\n        [@animationState]=\"'active'\"\n        class=\"line\"\n        [attr.d]=\"initialPath\"\n        [attr.fill]=\"fill\"\n        [attr.stroke]=\"stroke\"\n        stroke-width=\"1.5px\"\n      />\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:path class=\"line\" [attr.d]=\"initialPath\" [attr.fill]=\"fill\" [attr.stroke]=\"stroke\" stroke-width=\"1.5px\" />\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    strokeDasharray: 2000,\n                    strokeDashoffset: 2000\n                }),\n                animate(1000, style({\n                    strokeDashoffset: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-line]',\n                    template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:path\n        [@animationState]=\"'active'\"\n        class=\"line\"\n        [attr.d]=\"initialPath\"\n        [attr.fill]=\"fill\"\n        [attr.stroke]=\"stroke\"\n        stroke-width=\"1.5px\"\n      />\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:path class=\"line\" [attr.d]=\"initialPath\" [attr.fill]=\"fill\" [attr.stroke]=\"stroke\" stroke-width=\"1.5px\" />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    strokeDasharray: 2000,\n                                    strokeDashoffset: 2000\n                                }),\n                                animate(1000, style({\n                                    strokeDashoffset: 0\n                                }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { path: [{\n                type: Input\n            }], stroke: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }] } });\n\nclass LineSeriesComponent {\n    constructor() {\n        this.animations = true;\n        this.barOrientation = BarOrientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradients();\n        const data = this.sortData(this.data.series);\n        const lineGen = this.getLineGenerator();\n        this.path = lineGen(data) || '';\n        const areaGen = this.getAreaGenerator();\n        this.areaPath = areaGen(data) || '';\n        if (this.hasRange) {\n            const range = this.getRangeGenerator();\n            this.outerPath = range(data) || '';\n        }\n        if (this.hasGradient) {\n            this.stroke = this.gradientUrl;\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            if (max === min) {\n                this.stroke = this.colors.getColor(max);\n            }\n        }\n        else {\n            this.stroke = this.colors.getColor(this.data.name);\n        }\n    }\n    getLineGenerator() {\n        return line()\n            .x(d => {\n            const label = d.name;\n            let value;\n            if (this.scaleType === ScaleType.Time) {\n                value = this.xScale(label);\n            }\n            else if (this.scaleType === ScaleType.Linear) {\n                value = this.xScale(Number(label));\n            }\n            else {\n                value = this.xScale(label);\n            }\n            return value;\n        })\n            .y(d => this.yScale(d.value))\n            .curve(this.curve);\n    }\n    getRangeGenerator() {\n        return area()\n            .x(d => {\n            const label = d.name;\n            let value;\n            if (this.scaleType === ScaleType.Time) {\n                value = this.xScale(label);\n            }\n            else if (this.scaleType === ScaleType.Linear) {\n                value = this.xScale(Number(label));\n            }\n            else {\n                value = this.xScale(label);\n            }\n            return value;\n        })\n            .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\n            .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\n            .curve(this.curve);\n    }\n    getAreaGenerator() {\n        const xProperty = d => {\n            const label = d.name;\n            return this.xScale(label);\n        };\n        return area()\n            .x(xProperty)\n            .y0(() => this.yScale.range()[0])\n            .y1(d => this.yScale(d.value))\n            .curve(this.curve);\n    }\n    sortData(data) {\n        if (this.scaleType === ScaleType.Linear) {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        return data;\n    }\n    updateGradients() {\n        if (this.colors.scaleType === ScaleType.Linear) {\n            this.hasGradient = true;\n            this.gradientId = 'grad' + id().toString();\n            this.gradientUrl = `url(#${this.gradientId})`;\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            this.gradientStops = this.colors.getLinearGradientStops(max, min);\n            this.areaGradientStops = this.colors.getLinearGradientStops(max);\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n            this.areaGradientStops = undefined;\n        }\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n}\nLineSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nLineSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineSeriesComponent, selector: \"g[ngx-charts-line-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", curve: \"curve\", activeEntries: \"activeEntries\", rangeFillOpacity: \"rangeFillOpacity\", hasRange: \"hasRange\", animations: \"animations\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: [\"data\", \"path\", \"startingPath\", \"fill\", \"opacity\", \"startOpacity\", \"endOpacity\", \"gradient\", \"stops\", \"animations\"], outputs: [\"select\"] }, { type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: [\"path\", \"stroke\", \"data\", \"fill\", \"animations\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-line-series]',\n                    template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], hasRange: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }] } });\n\nclass LineChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.showRefLines = false;\n        this.showRefLabels = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n                if (d.min !== undefined) {\n                    this.hasRange = true;\n                    if (domain.indexOf(d.min) < 0) {\n                        domain.push(d.min);\n                    }\n                }\n                if (d.max !== undefined) {\n                    this.hasRange = true;\n                    if (domain.indexOf(d.max) < 0) {\n                        domain.push(d.max);\n                    }\n                }\n            }\n        }\n        const values = [...domain];\n        if (!this.autoScale) {\n            values.push(0);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime().range([0, width]).domain(domain);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear().range([0, width]).domain(domain);\n            if (this.roundDomains) {\n                scale = scale.nice();\n            }\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n        }\n        return scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        this.deactivateAll();\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nLineChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nLineChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineChartComponent, selector: \"ngx-charts-line-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", autoScale: \"autoScale\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", rangeFillOpacity: \"rangeFillOpacity\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", showRefLines: \"showRefLines\", referenceLines: \"referenceLines\", showRefLabels: \"showRefLabels\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngIf=\"!isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n          <svg:g *ngIf=\"isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: LineSeriesComponent, selector: \"g[ngx-charts-line-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"curve\", \"activeEntries\", \"rangeFillOpacity\", \"hasRange\", \"animations\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-line-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngIf=\"!isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n          <svg:g *ngIf=\"isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass LineChartModule {\n}\nLineChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLineChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, declarations: [LineComponent, LineChartComponent, LineSeriesComponent], imports: [ChartCommonModule], exports: [LineComponent, LineChartComponent, LineSeriesComponent] });\nLineChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n                    exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n                }]\n        }] });\n\nclass PieLabelComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.animations = true;\n        this.labelTrim = true;\n        this.labelTrimSize = 10;\n        this.trimLabel = trimLabel;\n    }\n    ngOnChanges(changes) {\n        this.setTransforms();\n        this.update();\n    }\n    setTransforms() {\n        if (isPlatformServer(this.platformId)) {\n            this.styleTransform = `translate3d(${this.textX}px,${this.textY}px, 0)`;\n            this.attrTransform = `translate(${this.textX},${this.textY})`;\n            this.textTransition = !this.animations ? null : 'transform 0.75s';\n        }\n        else {\n            const isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n            this.styleTransform = isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n            this.attrTransform = !isIE ? null : `translate(${this.textX},${this.textY})`;\n            this.textTransition = isIE || !this.animations ? null : 'transform 0.75s';\n        }\n    }\n    update() {\n        let startRadius = this.radius;\n        if (this.explodeSlices) {\n            startRadius = (this.radius * this.value) / this.max;\n        }\n        const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\n        // Calculate innerPos then scale outer position to match label position\n        const innerPos = innerArc.centroid(this.data);\n        let scale = this.data.pos[1] / innerPos[1];\n        if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n            scale = 1;\n        }\n        const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n        this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n    }\n    get textX() {\n        return this.data.pos[0];\n    }\n    get textY() {\n        return this.data.pos[1];\n    }\n    textAnchor() {\n        return this.midAngle(this.data) < Math.PI ? TextAnchor.Start : TextAnchor.End;\n    }\n    midAngle(d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n}\nPieLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieLabelComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nPieLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: { data: \"data\", radius: \"radius\", label: \"label\", color: \"color\", max: \"max\", value: \"value\", explodeSlices: \"explodeSlices\", animations: \"animations\", labelTrim: \"labelTrim\", labelTrimSize: \"labelTrimSize\" }, usesOnChanges: true, ngImport: i0, template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieLabelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-label]',\n                    template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { data: [{\n                type: Input\n            }], radius: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], labelTrim: [{\n                type: Input\n            }], labelTrimSize: [{\n                type: Input\n            }] } });\n\nclass PolarSeriesComponent {\n    constructor() {\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.circleRadius = 3;\n        this.barOrientation = BarOrientation;\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradients();\n        const line = this.getLineGenerator();\n        const data = this.sortData(this.data.series);\n        const seriesName = this.data.name;\n        const linearScaleType = this.colors.scaleType === ScaleType.Linear;\n        const min = this.yScale.domain()[0];\n        this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n        this.path = line(data) || '';\n        this.circles = data.map(d => {\n            const a = this.getAngle(d);\n            const r = this.getRadius(d);\n            const value = d.value;\n            const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n            const cData = Object.assign({}, d, {\n                series: seriesName,\n                value,\n                name: d.name\n            });\n            return {\n                data: cData,\n                cx: r * Math.sin(a),\n                cy: -r * Math.cos(a),\n                value,\n                color,\n                label: d.name\n            };\n        });\n        this.active = this.isActive(this.data);\n        this.inactive = this.isInactive(this.data);\n        this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n    }\n    getAngle(d) {\n        const label = d.name;\n        if (this.scaleType === ScaleType.Time) {\n            return this.xScale(label);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            return this.xScale(Number(label));\n        }\n        return this.xScale(label);\n    }\n    getRadius(d) {\n        return this.yScale(d.value);\n    }\n    getLineGenerator() {\n        return lineRadial()\n            .angle(d => this.getAngle(d))\n            .radius(d => this.getRadius(d))\n            .curve(this.curve);\n    }\n    sortData(data) {\n        if (this.scaleType === ScaleType.Linear) {\n            return sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            return sortByTime(data, 'name');\n        }\n        return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n    defaultTooltipText({ label, value }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n    }\n    updateGradients() {\n        this.hasGradient = this.gradient || this.colors.scaleType === ScaleType.Linear;\n        if (!this.hasGradient) {\n            return;\n        }\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        if (this.colors.scaleType === ScaleType.Linear) {\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            this.gradientStops = this.colors.getLinearGradientStops(max, min);\n        }\n        else {\n            this.gradientStops = undefined;\n        }\n    }\n}\nPolarSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPolarSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PolarSeriesComponent, selector: \"g[ngx-charts-polar-series]\", inputs: { name: \"name\", data: \"data\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", curve: \"curve\", activeEntries: \"activeEntries\", rangeFillOpacity: \"rangeFillOpacity\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", gradient: \"gradient\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: [\"color\", \"name\", \"startOpacity\", \"endOpacity\", \"cx\", \"cy\", \"stops\"] }, { type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: [\"path\", \"stroke\", \"data\", \"fill\", \"animations\"] }, { type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-polar-series]',\n                    template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { name: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nconst twoPI = 2 * Math.PI;\nclass PolarChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showGridLines = true;\n        this.curve = curveCardinalClosed;\n        this.activeEntries = [];\n        this.rangeFillOpacity = 0.15;\n        this.trimYAxisTicks = true;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.showSeriesOnHover = true;\n        this.gradient = false;\n        this.yAxisMinScale = 0;\n        this.labelTrim = true;\n        this.labelTrimSize = 10;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        // series: any; // ???\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.orientation = Orientation;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.setDims();\n        this.setScales();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.setTicks();\n    }\n    setDims() {\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        const halfWidth = Math.floor(this.dims.width / 2);\n        const halfHeight = Math.floor(this.dims.height / 2);\n        const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\n        const yOffset = Math.max(0, halfHeight - outerRadius);\n        this.yAxisDims = {\n            ...this.dims,\n            width: halfWidth\n        };\n        this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n        this.transformYAxis = `translate(0, ${yOffset})`;\n        this.labelOffset = this.dims.height + 40;\n        this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n    }\n    setScales() {\n        const xValues = this.getXValues();\n        this.scaleType = getScaleType(xValues);\n        this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, twoPI);\n        this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n        this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n    }\n    setTicks() {\n        let tickFormat;\n        if (this.xAxisTickFormatting) {\n            tickFormat = this.xAxisTickFormatting;\n        }\n        else if (this.xScale.tickFormat) {\n            tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n        }\n        else {\n            tickFormat = d => {\n                if (isDate(d)) {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        const outerRadius = this.outerRadius;\n        const s = 1.1;\n        this.thetaTicks = this.xDomain.map(d => {\n            const startAngle = this.xScale(d);\n            const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n            const label = tickFormat(d);\n            const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n            const pos = [dd, s * startPos[1]];\n            return {\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle: startAngle,\n                value: outerRadius,\n                label,\n                startPos,\n                pos\n            };\n        });\n        const minDistance = 10;\n        /* from pie chart, abstract out -*/\n        for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n            const a = this.thetaTicks[i];\n            for (let j = i + 1; j < this.thetaTicks.length; j++) {\n                const b = this.thetaTicks[j];\n                // if they're on the same side\n                if (b.pos[0] * a.pos[0] > 0) {\n                    // if they're overlapping\n                    const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n                    if (o > 0) {\n                        // push the second up or down\n                        b.pos[1] += Math.sign(b.pos[0]) * o;\n                    }\n                }\n            }\n        }\n        this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n    }\n    getXValues() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.name)) {\n                    values.push(d.name);\n                }\n            }\n        }\n        return values;\n    }\n    getXDomain(values = this.getXValues()) {\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            return [min, max];\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            return [min, max];\n        }\n        return values;\n    }\n    getYValues() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n                if (d.min !== undefined) {\n                    if (domain.indexOf(d.min) < 0) {\n                        domain.push(d.min);\n                    }\n                }\n                if (d.max !== undefined) {\n                    if (domain.indexOf(d.max) < 0) {\n                        domain.push(d.max);\n                    }\n                }\n            }\n        }\n        return domain;\n    }\n    getYDomain(domain = this.getYValues()) {\n        let min = Math.min(...domain);\n        const max = Math.max(this.yAxisMinScale, ...domain);\n        min = Math.max(0, min);\n        if (!this.autoScale) {\n            min = Math.min(0, min);\n        }\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        switch (this.scaleType) {\n            case ScaleType.Time:\n                return scaleTime().range([0, width]).domain(domain);\n            case ScaleType.Linear: {\n                const scale = scaleLinear().range([0, width]).domain(domain);\n                return this.roundDomains ? scale.nice() : scale;\n            }\n            default:\n                return scalePoint()\n                    .range([0, width - twoPI / domain.length])\n                    .padding(0)\n                    .domain(domain);\n        }\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([0, height]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        const domain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.yDomain.reverse();\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        if (this.schemeType === ScaleType.Ordinal) {\n            return {\n                scaleType: this.schemeType,\n                colors: this.colors,\n                domain: this.seriesDomain,\n                title: this.legendTitle,\n                position: this.legendPosition\n            };\n        }\n        return {\n            scaleType: this.schemeType,\n            colors: this.colors.scale,\n            domain: this.yDomain,\n            title: undefined,\n            position: this.legendPosition\n        };\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n}\nPolarChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPolarChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PolarChartComponent, selector: \"ngx-charts-polar-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", autoScale: \"autoScale\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", rangeFillOpacity: \"rangeFillOpacity\", trimYAxisTicks: \"trimYAxisTicks\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", showSeriesOnHover: \"showSeriesOnHover\", gradient: \"gradient\", yAxisMinScale: \"yAxisMinScale\", labelTrim: \"labelTrim\", labelTrimSize: \"labelTrimSize\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: [\"data\", \"radius\", \"label\", \"color\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }, { type: PolarSeriesComponent, selector: \"g[ngx-charts-polar-series]\", inputs: [\"name\", \"data\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"curve\", \"activeEntries\", \"rangeFillOpacity\", \"tooltipDisabled\", \"tooltipText\", \"gradient\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-polar-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], showSeriesOnHover: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], yAxisMinScale: [{\n                type: Input\n            }], labelTrim: [{\n                type: Input\n            }], labelTrimSize: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass PieArcComponent {\n    constructor(element) {\n        this.startAngle = 0;\n        this.endAngle = Math.PI * 2;\n        this.cornerRadius = 0;\n        this.explodeSlices = false;\n        this.gradient = false;\n        this.animate = true;\n        this.pointerEvents = true;\n        this.isActive = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dblclick = new EventEmitter();\n        this.barOrientation = BarOrientation;\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getGradient() {\n        return this.gradient ? this.gradientFill : this.fill;\n    }\n    getPointerEvents() {\n        return this.pointerEvents ? 'auto' : 'none';\n    }\n    update() {\n        const calc = this.calculateArc();\n        this.startOpacity = 0.5;\n        this.radialGradientId = 'linearGrad' + id().toString();\n        this.gradientFill = `url(#${this.radialGradientId})`;\n        if (this.animate) {\n            if (this.initialized) {\n                this.updateAnimation();\n            }\n            else {\n                this.loadAnimation();\n                this.initialized = true;\n            }\n        }\n        else {\n            this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n        }\n    }\n    calculateArc() {\n        let outerRadius = this.outerRadius;\n        if (this.explodeSlices && this.innerRadius === 0) {\n            outerRadius = (this.outerRadius * this.value) / this.max;\n        }\n        return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n    }\n    loadAnimation() {\n        const node = select(this.element)\n            .selectAll('.arc')\n            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n        const calc = this.calculateArc();\n        node\n            .transition()\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const copyOfD = Object.assign({}, d);\n            copyOfD.endAngle = copyOfD.startAngle;\n            const interpolater = interpolate(copyOfD, copyOfD);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        })\n            .transition()\n            .duration(750)\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const interpolater = interpolate(this._current, d);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        });\n    }\n    updateAnimation() {\n        const node = select(this.element)\n            .selectAll('.arc')\n            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n        const calc = this.calculateArc();\n        node\n            .transition()\n            .duration(750)\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const interpolater = interpolate(this._current, d);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        });\n    }\n    onClick() {\n        clearTimeout(this._timeout);\n        this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n    }\n    onDblClick(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._timeout);\n        this.dblclick.emit({\n            data: this.data,\n            nativeEvent: event\n        });\n    }\n}\nPieArcComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieArcComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nPieArcComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: { fill: \"fill\", startAngle: \"startAngle\", endAngle: \"endAngle\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", cornerRadius: \"cornerRadius\", value: \"value\", max: \"max\", data: \"data\", explodeSlices: \"explodeSlices\", gradient: \"gradient\", animate: \"animate\", pointerEvents: \"pointerEvents\", isActive: \"isActive\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dblclick: \"dblclick\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: [\"color\", \"name\", \"startOpacity\", \"endOpacity\", \"cx\", \"cy\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieArcComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-arc]',\n                    template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], endAngle: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], cornerRadius: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animate: [{\n                type: Input\n            }], pointerEvents: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dblclick: [{\n                type: Output\n            }] } });\n\nclass PieSeriesComponent {\n    constructor() {\n        this.series = [];\n        this.innerRadius = 60;\n        this.outerRadius = 80;\n        this.trimLabels = true;\n        this.maxLabelLength = 10;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dblclick = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        const pieGenerator = pie()\n            .value(d => d.value)\n            .sort(null);\n        const arcData = pieGenerator(this.series);\n        this.max = max(arcData, d => {\n            return d.value;\n        });\n        this.data = this.calculateLabelPositions(arcData);\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n    midAngle(d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n    outerArc() {\n        const factor = 1.5;\n        return arc()\n            .innerRadius(this.outerRadius * factor)\n            .outerRadius(this.outerRadius * factor);\n    }\n    calculateLabelPositions(pieData) {\n        const factor = 1.5;\n        const minDistance = 10;\n        const labelPositions = pieData;\n        labelPositions.forEach(d => {\n            d.pos = this.outerArc().centroid(d);\n            d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n        });\n        for (let i = 0; i < labelPositions.length - 1; i++) {\n            const a = labelPositions[i];\n            if (!this.labelVisible(a)) {\n                continue;\n            }\n            for (let j = i + 1; j < labelPositions.length; j++) {\n                const b = labelPositions[j];\n                if (!this.labelVisible(b)) {\n                    continue;\n                }\n                // if they're on the same side\n                if (b.pos[0] * a.pos[0] > 0) {\n                    // if they're overlapping\n                    const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n                    if (o > 0) {\n                        // push the second up or down\n                        b.pos[1] += Math.sign(b.pos[0]) * o;\n                    }\n                }\n            }\n        }\n        return labelPositions;\n    }\n    labelVisible(myArc) {\n        return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n    }\n    getTooltipTitle(a) {\n        return this.tooltipTemplate ? undefined : this.tooltipText(a);\n    }\n    labelText(myArc) {\n        if (this.labelFormatting) {\n            return this.labelFormatting(myArc.data.name);\n        }\n        return this.label(myArc);\n    }\n    label(myArc) {\n        return formatLabel(myArc.data.name);\n    }\n    defaultTooltipText(myArc) {\n        const label = this.label(myArc);\n        const val = formatLabel(myArc.data.value);\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n    color(myArc) {\n        return this.colors.getColor(this.label(myArc));\n    }\n    trackBy(index, item) {\n        return item.data.name;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    }\n}\nPieSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPieSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: { colors: \"colors\", series: \"series\", dims: \"dims\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", explodeSlices: \"explodeSlices\", showLabels: \"showLabels\", gradient: \"gradient\", activeEntries: \"activeEntries\", labelFormatting: \"labelFormatting\", trimLabels: \"trimLabels\", maxLabelLength: \"maxLabelLength\", tooltipText: \"tooltipText\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dblclick: \"dblclick\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: [\"data\", \"radius\", \"label\", \"color\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"] }, { type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-series]',\n                    template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { colors: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], showLabels: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], trimLabels: [{\n                type: Input\n            }], maxLabelLength: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dblclick: [{\n                type: Output\n            }] } });\n\nclass AdvancedPieChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.label = 'Total';\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [20, 20, 20, 20];\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: (this.width * 4) / 12.0,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.setColors();\n        const xOffset = this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.legendWidth = this.width - this.dims.width - this.margin[1];\n        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n        this.innerRadius = this.outerRadius * 0.75;\n        this.transform = `translate(${xOffset} , ${yOffset})`;\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nAdvancedPieChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedPieChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAdvancedPieChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AdvancedPieChartComponent, selector: \"ngx-charts-advanced-pie-chart\", inputs: { gradient: \"gradient\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", label: \"label\", valueFormatting: \"valueFormatting\", nameFormatting: \"nameFormatting\", percentageFormatting: \"percentageFormatting\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: [\"colors\", \"series\", \"dims\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"showLabels\", \"gradient\", \"activeEntries\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"tooltipText\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }, { type: AdvancedLegendComponent, selector: \"ngx-charts-advanced-legend\", inputs: [\"width\", \"data\", \"colors\", \"label\", \"animations\", \"valueFormatting\", \"labelFormatting\", \"percentageFormatting\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedPieChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-advanced-pie-chart', template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"] }]\n        }], propDecorators: { gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], valueFormatting: [{\n                type: Input\n            }], nameFormatting: [{\n                type: Input\n            }], percentageFormatting: [{\n                type: Input\n            }] } });\n\nclass PieChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.labels = false;\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.explodeSlices = false;\n        this.doughnut = false;\n        this.arcWidth = 0.25;\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.trimLabels = true;\n        this.maxLabelLength = 10;\n        this.dblclick = new EventEmitter();\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    update() {\n        super.update();\n        if (this.labels && this.hasNoOptionalMarginsSet()) {\n            this.margins = [30, 80, 30, 80];\n        }\n        else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n            // default value for margins\n            this.margins = [20, 20, 20, 20];\n        }\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margins,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        const xOffset = this.margins[3] + this.dims.width / 2;\n        const yOffset = this.margins[0] + this.dims.height / 2;\n        this.translation = `translate(${xOffset}, ${yOffset})`;\n        this.outerRadius = Math.min(this.dims.width, this.dims.height);\n        if (this.labels) {\n            // make room for labels\n            this.outerRadius /= 3;\n        }\n        else {\n            this.outerRadius /= 2;\n        }\n        this.innerRadius = 0;\n        if (this.doughnut) {\n            this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n        }\n        this.domain = this.getDomain();\n        // sort data according to domain\n        this.data = this.results.sort((a, b) => {\n            return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n        });\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: ScaleType.Ordinal,\n            domain: this.domain,\n            colors: this.colors,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    hasNoOptionalMarginsSet() {\n        return !this.margins || this.margins.length <= 0;\n    }\n}\nPieChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPieChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieChartComponent, selector: \"ngx-charts-pie-chart\", inputs: { labels: \"labels\", legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", explodeSlices: \"explodeSlices\", doughnut: \"doughnut\", arcWidth: \"arcWidth\", gradient: \"gradient\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", labelFormatting: \"labelFormatting\", trimLabels: \"trimLabels\", maxLabelLength: \"maxLabelLength\", tooltipText: \"tooltipText\", margins: \"margins\" }, outputs: { dblclick: \"dblclick\", select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: [\"colors\", \"series\", \"dims\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"showLabels\", \"gradient\", \"activeEntries\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"tooltipText\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-pie-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"] }]\n        }], propDecorators: { labels: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], doughnut: [{\n                type: Input\n            }], arcWidth: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], trimLabels: [{\n                type: Input\n            }], maxLabelLength: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], dblclick: [{\n                type: Output\n            }], margins: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nfunction gridSize(dims, len, minWidth) {\n    let rows = 1;\n    let cols = len;\n    const width = dims.width;\n    if (width > minWidth) {\n        while (width / cols < minWidth) {\n            rows += 1;\n            cols = Math.ceil(len / rows);\n        }\n    }\n    return [cols, rows];\n}\nfunction gridLayout(dims, data, minWidth, designatedTotal) {\n    const xScale = scaleBand();\n    const yScale = scaleBand();\n    const width = dims.width;\n    const height = dims.height;\n    const [columns, rows] = gridSize(dims, data.length, minWidth);\n    const xDomain = [];\n    const yDomain = [];\n    for (let i = 0; i < rows; i++) {\n        yDomain.push(i);\n    }\n    for (let i = 0; i < columns; i++) {\n        xDomain.push(i);\n    }\n    xScale.domain(xDomain);\n    yScale.domain(yDomain);\n    xScale.rangeRound([0, width], 0.1);\n    yScale.rangeRound([0, height], 0.1);\n    const res = [];\n    const total = designatedTotal ? designatedTotal : getTotal(data);\n    const cardWidth = xScale.bandwidth();\n    const cardHeight = yScale.bandwidth();\n    for (let i = 0; i < data.length; i++) {\n        res[i] = {};\n        res[i].data = {\n            name: data[i] ? data[i].name : '',\n            value: data[i] ? data[i].value : undefined,\n            extra: data[i] ? data[i].extra : undefined,\n            label: data[i] ? data[i].label : ''\n        };\n        res[i].x = xScale(i % columns);\n        res[i].y = yScale(Math.floor(i / columns));\n        res[i].width = cardWidth;\n        res[i].height = cardHeight;\n        res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n        res[i].data.total = total;\n    }\n    return res;\n}\nfunction getTotal(results) {\n    return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\n}\n\nclass PieGridSeriesComponent {\n    constructor(element) {\n        this.innerRadius = 70;\n        this.outerRadius = 80;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.layout = pie()\n            .value(d => d.data.value)\n            .sort(null);\n        this.arcs = this.getArcs();\n    }\n    getArcs() {\n        return this.layout(this.data).map((arc, index) => {\n            const label = arc.data.data.name;\n            const other = arc.data.data.other;\n            if (index === 0) {\n                arc.startAngle = 0;\n            }\n            const color = this.colors(label);\n            return {\n                data: arc.data.data,\n                class: 'arc ' + 'arc' + index,\n                fill: color,\n                startAngle: other ? 0 : arc.startAngle,\n                endAngle: arc.endAngle,\n                animate: this.animations && !other,\n                pointerEvents: !other\n            };\n        });\n    }\n    onClick(data) {\n        this.select.emit(this.data[0].data);\n    }\n    trackBy(index, item) {\n        return item.data.name;\n    }\n    label(arc) {\n        return arc.data.name;\n    }\n    color(arc) {\n        return this.colors(this.label(arc));\n    }\n}\nPieGridSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridSeriesComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nPieGridSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieGridSeriesComponent, selector: \"g[ngx-charts-pie-grid-series]\", inputs: { colors: \"colors\", data: \"data\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-grid-series]',\n                    template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { colors: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass PieGridComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.tooltipDisabled = false;\n        this.label = 'Total';\n        this.minWidth = 150;\n        this.activeEntries = [];\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [20, 20, 20, 20];\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n        this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n        this.series = this.getSeries();\n        this.setColors();\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n    defaultTooltipText({ data }) {\n        const label = trimLabel(formatLabel(data.name));\n        const val = data.value.toLocaleString();\n        return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    getSeries() {\n        const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n        return this.data.map(d => {\n            const baselineLabelHeight = 20;\n            const padding = 10;\n            const name = d.data.name;\n            const label = formatLabel(name);\n            const value = d.data.value;\n            const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n            const innerRadius = radius * 0.9;\n            let count = 0;\n            const colors = () => {\n                count += 1;\n                if (count === 1) {\n                    return 'rgba(100,100,100,0.3)';\n                }\n                else {\n                    return this.colorScale.getColor(label);\n                }\n            };\n            const xPos = d.x + (d.width - padding) / 2;\n            const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n            return {\n                transform: `translate(${xPos}, ${yPos})`,\n                colors,\n                innerRadius,\n                outerRadius: radius,\n                name,\n                label: trimLabel(label),\n                total: value,\n                value,\n                percent: format('.1%')(d.data.percent),\n                data: [\n                    d,\n                    {\n                        data: {\n                            other: true,\n                            value: total - value,\n                            name: d.data.name\n                        }\n                    }\n                ]\n            };\n        });\n    }\n    getTotal() {\n        return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colorScale = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nPieGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPieGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieGridComponent, selector: \"ngx-charts-pie-grid\", inputs: { designatedTotal: \"designatedTotal\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", label: \"label\", minWidth: \"minWidth\", activeEntries: \"activeEntries\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieGridSeriesComponent, selector: \"g[ngx-charts-pie-grid-series]\", inputs: [\"colors\", \"data\", \"innerRadius\", \"outerRadius\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-pie-grid', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"] }]\n        }], propDecorators: { designatedTotal: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], minWidth: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass PieChartModule {\n}\nPieChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPieChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, declarations: [AdvancedPieChartComponent,\n        PieLabelComponent,\n        PieArcComponent,\n        PieChartComponent,\n        PieGridComponent,\n        PieGridSeriesComponent,\n        PieSeriesComponent], imports: [ChartCommonModule], exports: [AdvancedPieChartComponent,\n        PieLabelComponent,\n        PieArcComponent,\n        PieChartComponent,\n        PieGridComponent,\n        PieGridSeriesComponent,\n        PieSeriesComponent] });\nPieChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [\n                        AdvancedPieChartComponent,\n                        PieLabelComponent,\n                        PieArcComponent,\n                        PieChartComponent,\n                        PieGridComponent,\n                        PieGridSeriesComponent,\n                        PieSeriesComponent\n                    ],\n                    exports: [\n                        AdvancedPieChartComponent,\n                        PieLabelComponent,\n                        PieArcComponent,\n                        PieChartComponent,\n                        PieGridComponent,\n                        PieGridSeriesComponent,\n                        PieSeriesComponent\n                    ]\n                }]\n        }] });\n\nclass PolarChartModule {\n}\nPolarChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPolarChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, declarations: [PolarChartComponent, PolarSeriesComponent], imports: [ChartCommonModule, PieChartModule, LineChartModule], exports: [PolarChartComponent, PolarSeriesComponent] });\nPolarChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, imports: [[ChartCommonModule, PieChartModule, LineChartModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule, PieChartModule, LineChartModule],\n                    declarations: [PolarChartComponent, PolarSeriesComponent],\n                    exports: [PolarChartComponent, PolarSeriesComponent]\n                }]\n        }] });\n\nfunction calculateTextWidth(fontFamilyKey, text, defaultWidth = 8) {\n    return text.split('').reduce((acc, curr) => {\n        const width = fontFamilyKey[curr] || defaultWidth;\n        return acc + width;\n    }, 0);\n}\n\nconst VERDANA_FONT_WIDTHS_16_PX = {\n    '0': 10,\n    '1': 10,\n    '2': 10,\n    '3': 10,\n    '4': 10,\n    '5': 10,\n    '6': 10,\n    '7': 10,\n    '8': 10,\n    '9': 10,\n    A: 11,\n    B: 11,\n    C: 11,\n    D: 12,\n    E: 10,\n    F: 9,\n    G: 12,\n    H: 12,\n    I: 7,\n    J: 7,\n    K: 11,\n    L: 9,\n    M: 13,\n    N: 12,\n    O: 13,\n    P: 10,\n    Q: 13,\n    R: 11,\n    S: 11,\n    T: 10,\n    U: 12,\n    V: 11,\n    W: 16,\n    X: 11,\n    Y: 10,\n    Z: 11,\n    a: 10,\n    b: 10,\n    c: 8,\n    d: 10,\n    e: 10,\n    f: 6,\n    g: 10,\n    h: 10,\n    i: 4,\n    j: 6,\n    k: 9,\n    l: 4,\n    m: 16,\n    n: 10,\n    o: 10,\n    p: 10,\n    q: 10,\n    r: 7,\n    s: 8,\n    t: 6,\n    u: 10,\n    v: 9,\n    w: 13,\n    x: 9,\n    y: 9,\n    z: 8,\n    '!': 6,\n    '@': 16,\n    '#': 13,\n    $: 10,\n    '%': 17,\n    '^': 13,\n    '&': 12,\n    '*': 10,\n    '(': 7,\n    ')': 7,\n    _: 10,\n    '-': 7,\n    '+': 13,\n    '=': 13,\n    ',': 6,\n    '.': 6,\n    '/': 7,\n    \"'\": 4,\n    ':': 7,\n    '|': 7,\n    '?': 9,\n    ';': 7,\n    '<': 13,\n    '>': 13\n};\n\nclass CardComponent {\n    constructor(element, cd, zone, platformId) {\n        this.cd = cd;\n        this.zone = zone;\n        this.platformId = platformId;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.value = '';\n        this.textFontSize = 12;\n        this.textTransform = '';\n        this.initialized = false;\n        this.bandHeight = 10;\n        this.textPadding = [10, 20, 5, 20];\n        this.labelFontSize = 15;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.scaleTextSSR();\n        }\n    }\n    ngOnDestroy() {\n        if (isPlatformBrowser(this.platformId)) {\n            cancelAnimationFrame(this.animationReq);\n        }\n    }\n    update() {\n        this.zone.run(() => {\n            const hasValue = this.data && typeof this.data.value !== 'undefined';\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n            this.transform = `translate(${this.x} , ${this.y})`;\n            this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n            this.cardWidth = Math.max(0, this.width);\n            this.cardHeight = Math.max(0, this.height);\n            this.label = this.label ? this.label : this.data.name;\n            const cardData = {\n                label: this.label,\n                data: this.data,\n                value: this.data.value\n            };\n            this.formattedLabel = labelFormatting(cardData);\n            this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n            const value = hasValue ? valueFormatting(cardData) : '';\n            this.value = this.paddedValue(value);\n            this.setPadding();\n            this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n            setTimeout(() => {\n                if (isPlatformBrowser(this.platformId)) {\n                    this.scaleText();\n                }\n                this.value = value;\n                if (hasValue && !this.initialized) {\n                    setTimeout(() => this.startCount(), 20);\n                }\n            }, 8);\n        });\n    }\n    paddedValue(value) {\n        if (this.medianSize && this.medianSize > value.length) {\n            value += '\\u2007'.repeat(this.medianSize - value.length);\n        }\n        return value;\n    }\n    startCount() {\n        if (!this.initialized && this.animations) {\n            cancelAnimationFrame(this.animationReq);\n            const val = this.data.value;\n            const decs = decimalChecker(val);\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const callback = ({ value, finished }) => {\n                this.zone.run(() => {\n                    value = finished ? val : value;\n                    this.value = valueFormatting({ label: this.label, data: this.data, value });\n                    if (!finished) {\n                        this.value = this.paddedValue(this.value);\n                    }\n                    this.cd.markForCheck();\n                });\n            };\n            this.animationReq = count(0, val, decs, 1, callback);\n            this.initialized = true;\n        }\n    }\n    scaleText() {\n        this.zone.run(() => {\n            const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\n            if (width === 0 || height === 0) {\n                return;\n            }\n            const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n            const availableWidth = this.cardWidth - 2 * textPadding;\n            const availableHeight = this.cardHeight / 3;\n            const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n            this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n            this.labelFontSize = Math.min(this.textFontSize, 15);\n            this.setPadding();\n            this.cd.markForCheck();\n        });\n    }\n    scaleTextSSR() {\n        const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, this.value, 10);\n        const height = 18;\n        const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n        const availableWidth = this.cardWidth - 2 * textPadding;\n        const availableHeight = this.cardHeight / 3;\n        const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n        this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n        this.labelFontSize = Math.min(this.textFontSize, 15);\n        this.setPadding();\n    }\n    setPadding() {\n        this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n        const padding = this.cardHeight / 2;\n        this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n        this.textPadding[2] = padding - this.labelFontSize;\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n}\nCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CardComponent, selector: \"g[ngx-charts-card]\", inputs: { color: \"color\", bandColor: \"bandColor\", textColor: \"textColor\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", label: \"label\", data: \"data\", medianSize: \"medianSize\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", animations: \"animations\" }, outputs: { select: \"select\" }, viewQueries: [{ propertyName: \"textEl\", first: true, predicate: [\"textEl\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-card]',\n                    template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { color: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], medianSize: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], textEl: [{\n                type: ViewChild,\n                args: ['textEl', { static: false }]\n            }] } });\n\n/**\n * Converts a hex to RGB\n *\n * @export\n */\nfunction hexToRgb(value) {\n    // deprecated, use d3.color()\n    return d3_color.rgb(value);\n}\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\nfunction invertColor(value) {\n    const color = d3_color.rgb(value);\n    const { r, g, b, opacity } = color;\n    if (opacity === 0) {\n        return color.toString();\n    }\n    const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n    const depth = yiq >= 128 ? -0.8 : 0.8;\n    return shadeRGBColor(color, depth);\n}\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\nfunction shadeRGBColor({ r, g, b }, percent) {\n    const t = percent < 0 ? 0 : 255;\n    const p = percent < 0 ? percent * -1 : percent;\n    r = Math.round((t - r) * p) + r;\n    g = Math.round((t - g) * p) + g;\n    b = Math.round((t - b) * p) + b;\n    return `rgb(${r}, ${g}, ${b})`;\n}\n\nclass CardSeriesComponent {\n    constructor() {\n        this.innerPadding = 15;\n        this.emptyColor = 'rgba(0, 0, 0, 0)';\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        if (this.data.length > 2) {\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const sortedLengths = this.data\n                .map(d => {\n                const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n                return hasValue\n                    ? valueFormatting({\n                        data: d.data,\n                        label: d ? d.data.name : '',\n                        value: d && d.data ? d.data.value : ''\n                    }).length\n                    : 0;\n            })\n                .sort((a, b) => b - a);\n            const idx = Math.ceil(this.data.length / 2);\n            this.medianSize = sortedLengths[idx];\n        }\n        const cards = this.getCards();\n        this.cards = cards.filter(d => d.data.value !== null);\n        this.emptySlots = cards.filter(d => d.data.value === null);\n    }\n    getCards() {\n        const yPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n        const xPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n        return this.data.map((d, index) => {\n            let label = d.data.name;\n            if (label && label.constructor.name === 'Date') {\n                label = label.toLocaleDateString();\n            }\n            else {\n                label = label ? label.toLocaleString() : label;\n            }\n            const value = d.data.value;\n            const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n            const color = this.cardColor || valueColor || '#000';\n            return {\n                x: d.x,\n                y: d.y,\n                width: d.width - xPadding,\n                height: d.height - yPadding,\n                color,\n                bandColor: this.bandColor || valueColor,\n                textColor: this.textColor || invertColor(color),\n                label,\n                data: d.data,\n                tooltipText: `${label}: ${value}`\n            };\n        });\n    }\n    trackBy(index, card) {\n        return card.label;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n}\nCardSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCardSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CardSeriesComponent, selector: \"g[ngx-charts-card-series]\", inputs: { data: \"data\", dims: \"dims\", colors: \"colors\", innerPadding: \"innerPadding\", cardColor: \"cardColor\", bandColor: \"bandColor\", emptyColor: \"emptyColor\", textColor: \"textColor\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `, isInline: true, components: [{ type: CardComponent, selector: \"g[ngx-charts-card]\", inputs: [\"color\", \"bandColor\", \"textColor\", \"x\", \"y\", \"width\", \"height\", \"label\", \"data\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\"], outputs: [\"select\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-card-series]',\n                    template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], cardColor: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], emptyColor: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass NumberCardComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.emptyColor = 'rgba(0, 0, 0, 0)';\n        this.innerPadding = 15;\n        this.margin = [10, 10, 10, 10];\n    }\n    get clickable() {\n        return !!this.select.observers.length;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.setColors();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        const size = gridSize(this.dims, this.results.length, 150);\n        const N = size[0] * size[1];\n        const data = this.results.slice();\n        while (data.length < N) {\n            data.push({ value: null });\n        }\n        this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n}\nNumberCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nNumberCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: NumberCardComponent, selector: \"ngx-charts-number-card\", inputs: { cardColor: \"cardColor\", bandColor: \"bandColor\", emptyColor: \"emptyColor\", innerPadding: \"innerPadding\", textColor: \"textColor\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", designatedTotal: \"designatedTotal\" }, usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: CardSeriesComponent, selector: \"g[ngx-charts-card-series]\", inputs: [\"data\", \"dims\", \"colors\", \"innerPadding\", \"cardColor\", \"bandColor\", \"emptyColor\", \"textColor\", \"valueFormatting\", \"labelFormatting\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-number-card', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"] }]\n        }], propDecorators: { cardColor: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], emptyColor: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], designatedTotal: [{\n                type: Input\n            }] } });\n\nclass NumberCardModule {\n}\nNumberCardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNumberCardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, declarations: [CardComponent, CardSeriesComponent, NumberCardComponent], imports: [ChartCommonModule], exports: [CardComponent, CardSeriesComponent, NumberCardComponent] });\nNumberCardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n                    exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n                }]\n        }] });\n\nclass TreeMapCellComponent {\n    constructor(element) {\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.initialized = false;\n        this.orientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges() {\n        this.update();\n        this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n        const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n        const cellData = {\n            data: this.data,\n            label: this.label,\n            value: this.value\n        };\n        this.formattedValue = this.valueFormatting(cellData.value);\n        this.formattedLabel = labelFormatting(cellData);\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        this.gradientStops = this.getGradientStops();\n    }\n    update() {\n        if (this.initialized) {\n            this.animateToCurrentForm();\n        }\n        else {\n            if (this.animations) {\n                this.loadAnimation();\n            }\n            this.initialized = true;\n        }\n    }\n    loadAnimation() {\n        const node = select(this.element).select('.cell');\n        node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n        this.animateToCurrentForm();\n    }\n    getTextColor() {\n        return invertColor(this.fill);\n    }\n    animateToCurrentForm() {\n        const node = select(this.element).select('.cell');\n        if (this.animations) {\n            node\n                .transition()\n                .duration(750)\n                .attr('opacity', 1)\n                .attr('x', this.x)\n                .attr('y', this.y)\n                .attr('width', this.width)\n                .attr('height', this.height);\n        }\n        else {\n            node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n        }\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    getGradientStops() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: 0.3\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n}\nTreeMapCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nTreeMapCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapCellComponent, selector: \"g[ngx-charts-tree-map-cell]\", inputs: { data: \"data\", fill: \"fill\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", label: \"label\", value: \"value\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tree-map-cell]',\n                    template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass TreeMapCellSeriesComponent {\n    constructor() {\n        this.gradient = false;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.styleTypes = StyleTypes;\n        this.placementTypes = PlacementTypes;\n    }\n    ngOnChanges(changes) {\n        this.cells = this.getCells();\n    }\n    getCells() {\n        return this.data.children\n            .filter(d => {\n            return d.depth === 1;\n        })\n            .map((d, index) => {\n            const label = d.id;\n            return {\n                data: d.data,\n                x: d.x0,\n                y: d.y0,\n                width: d.x1 - d.x0,\n                height: d.y1 - d.y0,\n                fill: this.colors.getColor(label),\n                label,\n                value: d.value\n            };\n        });\n    }\n    getTooltipText({ label, value }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nTreeMapCellSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTreeMapCellSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapCellSeriesComponent, selector: \"g[ngx-charts-tree-map-cell-series]\", inputs: { data: \"data\", dims: \"dims\", colors: \"colors\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: TreeMapCellComponent, selector: \"g[ngx-charts-tree-map-cell]\", inputs: [\"data\", \"fill\", \"x\", \"y\", \"width\", \"height\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\"], outputs: [\"select\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tree-map-cell-series]',\n                    template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass TreeMapComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.select = new EventEmitter();\n        this.margin = [10, 10, 10, 10];\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.domain = this.getDomain();\n        this.treemap = treemap().size([this.dims.width, this.dims.height]);\n        const rootNode = {\n            name: 'root',\n            value: 0,\n            isRoot: true\n        };\n        const root = stratify()\n            .id(d => {\n            let label = d.name;\n            if (label.constructor.name === 'Date') {\n                label = label.toLocaleDateString();\n            }\n            else {\n                label = label.toLocaleString();\n            }\n            return label;\n        })\n            .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\n            .sum(d => d.value);\n        this.data = this.treemap(root);\n        this.setColors();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getDomain() {\n        return this.results.map(d => d.name);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n}\nTreeMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nTreeMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapComponent, selector: \"ngx-charts-tree-map\", inputs: { results: \"results\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\" }, outputs: { select: \"select\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: TreeMapCellSeriesComponent, selector: \"g[ngx-charts-tree-map-cell-series]\", inputs: [\"data\", \"dims\", \"colors\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-tree-map', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"] }]\n        }], propDecorators: { results: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass TreeMapModule {\n}\nTreeMapModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTreeMapModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent], imports: [ChartCommonModule], exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent] });\nTreeMapModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n                    exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n                }]\n        }] });\n\nvar ElementType;\n(function (ElementType) {\n    ElementType[\"Value\"] = \"value\";\n    ElementType[\"Units\"] = \"units\";\n})(ElementType || (ElementType = {}));\nclass LinearGaugeComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.min = 0;\n        this.max = 100;\n        this.value = 0;\n        this.margin = [10, 20, 10, 20];\n        this.valueResizeScale = 1;\n        this.unitsResizeScale = 1;\n        this.valueTextTransform = '';\n        this.valueTranslate = '';\n        this.unitsTextTransform = '';\n        this.unitsTranslate = '';\n        this.barOrientation = BarOrientation;\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        setTimeout(() => {\n            this.scaleText(ElementType.Value);\n            this.scaleText(ElementType.Units);\n        });\n    }\n    update() {\n        super.update();\n        this.hasPreviousValue = this.previousValue !== undefined;\n        this.max = Math.max(this.max, this.value);\n        this.min = Math.min(this.min, this.value);\n        if (this.hasPreviousValue) {\n            this.max = Math.max(this.max, this.previousValue);\n            this.min = Math.min(this.min, this.previousValue);\n        }\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.valueDomain = this.getValueDomain();\n        this.valueScale = this.getValueScale();\n        this.displayValue = this.getDisplayValue();\n        this.setColors();\n        const xOffset = this.margin[3] + this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.transform = `translate(${xOffset}, ${yOffset})`;\n        this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n        this.valueTranslate = `translate(0, -15)`;\n        this.unitsTranslate = `translate(0, 15)`;\n        if (isPlatformServer(this.platformId)) {\n            this.scaleTextSSR('value');\n            this.scaleTextSSR('units');\n        }\n        else {\n            setTimeout(() => this.scaleText(ElementType.Value), 50);\n            setTimeout(() => this.scaleText(ElementType.Units), 50);\n        }\n    }\n    getValueDomain() {\n        return [this.min, this.max];\n    }\n    getValueScale() {\n        return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    }\n    getDisplayValue() {\n        if (this.valueFormatting) {\n            return this.valueFormatting(this.value);\n        }\n        return this.value.toLocaleString();\n    }\n    scaleText(element, repeat = true) {\n        let el;\n        let resizeScale;\n        if (element === ElementType.Value) {\n            el = this.valueTextEl;\n            resizeScale = this.valueResizeScale;\n        }\n        else {\n            el = this.unitsTextEl;\n            resizeScale = this.unitsResizeScale;\n        }\n        const { width, height } = el.nativeElement.getBoundingClientRect();\n        if (width === 0 || height === 0)\n            return;\n        const oldScale = resizeScale;\n        const availableWidth = this.dims.width;\n        const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n        const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n        const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n        if (resizeScale !== oldScale) {\n            if (element === ElementType.Value) {\n                this.valueResizeScale = resizeScale;\n                this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n            }\n            else {\n                this.unitsResizeScale = resizeScale;\n                this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n            }\n            this.cd.markForCheck();\n            if (repeat && isPlatformBrowser(this.platformId)) {\n                setTimeout(() => {\n                    this.scaleText(element, false);\n                }, 50);\n            }\n        }\n    }\n    scaleTextSSR(element) {\n        let resizeScale = 1;\n        const value = element === 'value' ? this.displayValue : this.units;\n        const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, value, 10);\n        const height = 25;\n        const availableWidth = this.dims.width;\n        const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n        const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n        const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n        if (element === 'value') {\n            this.valueResizeScale = resizeScale;\n            this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n        }\n        else {\n            this.unitsResizeScale = resizeScale;\n            this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n        }\n        this.cd.markForCheck();\n    }\n    onClick() {\n        this.select.emit({\n            name: 'Value',\n            value: this.value\n        });\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, [this.value], this.customColors);\n    }\n}\nLinearGaugeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LinearGaugeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nLinearGaugeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LinearGaugeComponent, selector: \"ngx-charts-linear-gauge\", inputs: { min: \"min\", max: \"max\", value: \"value\", units: \"units\", previousValue: \"previousValue\", valueFormatting: \"valueFormatting\" }, viewQueries: [{ propertyName: \"valueTextEl\", first: true, predicate: [\"valueTextEl\"], descendants: true }, { propertyName: \"unitsTextEl\", first: true, predicate: [\"unitsTextEl\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LinearGaugeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-linear-gauge', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"] }]\n        }], propDecorators: { min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], units: [{\n                type: Input\n            }], previousValue: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], valueTextEl: [{\n                type: ViewChild,\n                args: ['valueTextEl']\n            }], unitsTextEl: [{\n                type: ViewChild,\n                args: ['unitsTextEl']\n            }] } });\n\nclass GaugeArcComponent {\n    constructor() {\n        this.isActive = false;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    tooltipText(arc) {\n        const label = formatLabel(arc.data.name);\n        let val;\n        if (this.valueFormatting) {\n            val = this.valueFormatting(arc.data.value);\n        }\n        else {\n            val = formatLabel(arc.data.value);\n        }\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n}\nGaugeArcComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeArcComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGaugeArcComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeArcComponent, selector: \"g[ngx-charts-gauge-arc]\", inputs: { backgroundArc: \"backgroundArc\", valueArc: \"valueArc\", cornerRadius: \"cornerRadius\", colors: \"colors\", isActive: \"isActive\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeArcComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-gauge-arc]',\n                    template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { backgroundArc: [{\n                type: Input\n            }], valueArc: [{\n                type: Input\n            }], cornerRadius: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass GaugeAxisComponent {\n    constructor() {\n        this.rotate = '';\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.rotationAngle = -90 + this.startAngle;\n        this.rotate = `rotate(${this.rotationAngle})`;\n        this.ticks = this.getTicks();\n    }\n    getTicks() {\n        const bigTickSegment = this.angleSpan / this.bigSegments;\n        const smallTickSegment = bigTickSegment / this.smallSegments;\n        const tickLength = 20;\n        const ticks = {\n            big: [],\n            small: []\n        };\n        const startDistance = this.radius + 10;\n        const textDist = startDistance + tickLength + 10;\n        for (let i = 0; i <= this.bigSegments; i++) {\n            const angleDeg = i * bigTickSegment;\n            const angle = (angleDeg * Math.PI) / 180;\n            const textAnchor = this.getTextAnchor(angleDeg);\n            let skip = false;\n            if (i === 0 && this.angleSpan === 360) {\n                skip = true;\n            }\n            if (!skip) {\n                let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n                if (this.tickFormatting) {\n                    text = this.tickFormatting(text);\n                }\n                ticks.big.push({\n                    line: this.getTickPath(startDistance, tickLength, angle),\n                    textAnchor,\n                    text,\n                    textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n                });\n            }\n            if (i === this.bigSegments) {\n                continue;\n            }\n            for (let j = 1; j <= this.smallSegments; j++) {\n                const smallAngleDeg = angleDeg + j * smallTickSegment;\n                const smallAngle = (smallAngleDeg * Math.PI) / 180;\n                ticks.small.push({\n                    line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n                });\n            }\n        }\n        return ticks;\n    }\n    getTextAnchor(angle) {\n        // [0, 45] = 'middle';\n        // [46, 135] = 'start';\n        // [136, 225] = 'middle';\n        // [226, 315] = 'end';\n        angle = (this.startAngle + angle) % 360;\n        let textAnchor = TextAnchor.Middle;\n        if (angle > 45 && angle <= 135) {\n            textAnchor = TextAnchor.Start;\n        }\n        else if (angle > 225 && angle <= 315) {\n            textAnchor = TextAnchor.End;\n        }\n        return textAnchor;\n    }\n    getTickPath(startDistance, tickLength, angle) {\n        const y1 = startDistance * Math.sin(angle);\n        const y2 = (startDistance + tickLength) * Math.sin(angle);\n        const x1 = startDistance * Math.cos(angle);\n        const x2 = (startDistance + tickLength) * Math.cos(angle);\n        const points = [\n            { x: x1, y: y1 },\n            { x: x2, y: y2 }\n        ];\n        const lineGenerator = line()\n            .x(d => d.x)\n            .y(d => d.y);\n        return lineGenerator(points);\n    }\n}\nGaugeAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGaugeAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeAxisComponent, selector: \"g[ngx-charts-gauge-axis]\", inputs: { bigSegments: \"bigSegments\", smallSegments: \"smallSegments\", min: \"min\", max: \"max\", angleSpan: \"angleSpan\", startAngle: \"startAngle\", radius: \"radius\", valueScale: \"valueScale\", tickFormatting: \"tickFormatting\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-gauge-axis]',\n                    template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { bigSegments: [{\n                type: Input\n            }], smallSegments: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], angleSpan: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], radius: [{\n                type: Input\n            }], valueScale: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }] } });\n\nclass GaugeComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.min = 0;\n        this.max = 100;\n        this.bigSegments = 10;\n        this.smallSegments = 5;\n        this.showAxis = true;\n        this.startAngle = -120;\n        this.angleSpan = 240;\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.showText = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.resizeScale = 1;\n        this.rotation = '';\n        this.textTransform = 'scale(1, 1)';\n        this.cornerRadius = 10;\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        setTimeout(() => this.scaleText());\n    }\n    update() {\n        super.update();\n        if (!this.showAxis) {\n            if (!this.margin) {\n                this.margin = [10, 20, 10, 20];\n            }\n        }\n        else {\n            if (!this.margin) {\n                this.margin = [60, 100, 60, 100];\n            }\n        }\n        // make the starting angle positive\n        if (this.startAngle < 0) {\n            this.startAngle = (this.startAngle % 360) + 360;\n        }\n        this.angleSpan = Math.min(this.angleSpan, 360);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.domain = this.getDomain();\n        this.valueDomain = this.getValueDomain();\n        this.valueScale = this.getValueScale();\n        this.displayValue = this.getDisplayValue();\n        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n        this.arcs = this.getArcs();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        const xOffset = this.margin[3] + this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.transform = `translate(${xOffset}, ${yOffset})`;\n        this.rotation = `rotate(${this.startAngle})`;\n        setTimeout(() => this.scaleText(), 50);\n    }\n    getArcs() {\n        const arcs = [];\n        const availableRadius = this.outerRadius * 0.7;\n        const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n        const arcWidth = radiusPerArc * 0.7;\n        this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n        this.cornerRadius = Math.floor(arcWidth / 2);\n        let i = 0;\n        for (const d of this.results) {\n            const outerRadius = this.outerRadius - i * radiusPerArc;\n            const innerRadius = outerRadius - arcWidth;\n            const backgroundArc = {\n                endAngle: (this.angleSpan * Math.PI) / 180,\n                innerRadius,\n                outerRadius,\n                data: {\n                    value: this.max,\n                    name: d.name\n                }\n            };\n            const valueArc = {\n                endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\n                innerRadius,\n                outerRadius,\n                data: {\n                    value: d.value,\n                    name: d.name\n                }\n            };\n            const arc = {\n                backgroundArc,\n                valueArc\n            };\n            arcs.push(arc);\n            i++;\n        }\n        return arcs;\n    }\n    getDomain() {\n        return this.results.map(d => d.name);\n    }\n    getValueDomain() {\n        const values = this.results.map(d => d.value);\n        const dataMin = Math.min(...values);\n        const dataMax = Math.max(...values);\n        if (this.min !== undefined) {\n            this.min = Math.min(this.min, dataMin);\n        }\n        else {\n            this.min = dataMin;\n        }\n        if (this.max !== undefined) {\n            this.max = Math.max(this.max, dataMax);\n        }\n        else {\n            this.max = dataMax;\n        }\n        return [this.min, this.max];\n    }\n    getValueScale() {\n        return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n    }\n    getDisplayValue() {\n        const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n        if (this.textValue && 0 !== this.textValue.length) {\n            return this.textValue.toLocaleString();\n        }\n        if (this.valueFormatting) {\n            return this.valueFormatting(value);\n        }\n        return value.toLocaleString();\n    }\n    scaleText(repeat = true) {\n        if (!this.showText) {\n            return;\n        }\n        const { width } = this.textEl.nativeElement.getBoundingClientRect();\n        const oldScale = this.resizeScale;\n        if (width === 0) {\n            this.resizeScale = 1;\n        }\n        else {\n            const availableSpace = this.textRadius;\n            this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\n        }\n        if (this.resizeScale !== oldScale) {\n            this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n            this.cd.markForCheck();\n            if (repeat) {\n                setTimeout(() => this.scaleText(false), 50);\n            }\n        }\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: ScaleType.Ordinal,\n            colors: this.colors,\n            domain: this.domain,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    }\n    trackBy(index, item) {\n        return item.valueArc.data.name;\n    }\n}\nGaugeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nGaugeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeComponent, selector: \"ngx-charts-gauge\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", min: \"min\", max: \"max\", textValue: \"textValue\", units: \"units\", bigSegments: \"bigSegments\", smallSegments: \"smallSegments\", results: \"results\", showAxis: \"showAxis\", startAngle: \"startAngle\", angleSpan: \"angleSpan\", activeEntries: \"activeEntries\", axisTickFormatting: \"axisTickFormatting\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", showText: \"showText\", margin: \"margin\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], viewQueries: [{ propertyName: \"textEl\", first: true, predicate: [\"textEl\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GaugeArcComponent, selector: \"g[ngx-charts-gauge-arc]\", inputs: [\"backgroundArc\", \"valueArc\", \"cornerRadius\", \"colors\", \"isActive\", \"tooltipDisabled\", \"valueFormatting\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: GaugeAxisComponent, selector: \"g[ngx-charts-gauge-axis]\", inputs: [\"bigSegments\", \"smallSegments\", \"min\", \"max\", \"angleSpan\", \"startAngle\", \"radius\", \"valueScale\", \"tickFormatting\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-gauge', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], textValue: [{\n                type: Input\n            }], units: [{\n                type: Input\n            }], bigSegments: [{\n                type: Input\n            }], smallSegments: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], showAxis: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], angleSpan: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], axisTickFormatting: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], showText: [{\n                type: Input\n            }], margin: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], textEl: [{\n                type: ViewChild,\n                args: ['textEl']\n            }] } });\n\nclass GaugeModule {\n}\nGaugeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGaugeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent], imports: [ChartCommonModule, PieChartModule, BarChartModule], exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent] });\nGaugeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, imports: [[ChartCommonModule, PieChartModule, BarChartModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule, PieChartModule, BarChartModule],\n                    declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n                    exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n                }]\n        }] });\n\n// The export is needed here to generate a valid polyfills.metadata.json file\nfunction ngxChartsPolyfills() {\n    // IE11 fix\n    // Ref: https://github.com/swimlane/ngx-charts/issues/386\n    if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n        SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n    }\n}\n\nclass NgxChartsModule {\n    constructor() {\n        ngxChartsPolyfills();\n    }\n}\nNgxChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, exports: [ChartCommonModule,\n        AreaChartModule,\n        BarChartModule,\n        BoxChartModule,\n        BubbleChartModule,\n        HeatMapModule,\n        LineChartModule,\n        PolarChartModule,\n        NumberCardModule,\n        PieChartModule,\n        TreeMapModule,\n        GaugeModule] });\nNgxChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, imports: [ChartCommonModule,\n        AreaChartModule,\n        BarChartModule,\n        BoxChartModule,\n        BubbleChartModule,\n        HeatMapModule,\n        LineChartModule,\n        PolarChartModule,\n        NumberCardModule,\n        PieChartModule,\n        TreeMapModule,\n        GaugeModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [\n                        ChartCommonModule,\n                        AreaChartModule,\n                        BarChartModule,\n                        BoxChartModule,\n                        BubbleChartModule,\n                        HeatMapModule,\n                        LineChartModule,\n                        PolarChartModule,\n                        NumberCardModule,\n                        PieChartModule,\n                        TreeMapModule,\n                        GaugeModule\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nfunction tickFormat(fieldType, groupByType) {\n    return function (label) {\n        if (label === 'No Value' || label === 'Other') {\n            return label;\n        }\n        if (fieldType === 'date' && groupByType === 'groupBy') {\n            const formatter = timeFormat('MM/DD/YYYY');\n            return formatter(label);\n        }\n        return label.toString();\n    };\n}\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/*\n * Public API Surface of ngx-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AdvancedLegendComponent, AdvancedPieChartComponent, AreaChartComponent, AreaChartModule, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaComponent, AreaSeriesComponent, AxesModule, AxisLabelComponent, BarChartModule, BarChartType, BarComponent, BarHorizontal2DComponent, BarHorizontalComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarLabelComponent, BarOrientation, BarVertical2DComponent, BarVerticalComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BaseChartComponent, BoxChartComponent, BoxChartModule, BoxComponent, BoxSeriesComponent, BubbleChartComponent, BubbleChartModule, BubbleSeriesComponent, CardComponent, CardSeriesComponent, ChartCommonModule, ChartComponent, CircleComponent, CircleSeriesComponent, ColorHelper, CountUpDirective, D0Types, GaugeArcComponent, GaugeAxisComponent, GaugeComponent, GaugeModule, GridPanelComponent, GridPanelSeriesComponent, HeatCellSeriesComponent, HeatMapCellComponent, HeatMapComponent, HeatMapModule, LegendComponent, LegendEntryComponent, LegendPosition, LegendType, LineChartComponent, LineChartModule, LineComponent, LineSeriesComponent, LinearGaugeComponent, NgxChartsModule, NumberCardComponent, NumberCardModule, Orientation, PieArcComponent, PieChartComponent, PieChartModule, PieGridComponent, PieGridSeriesComponent, PieLabelComponent, PieSeriesComponent, PlacementTypes, PolarChartComponent, PolarChartModule, PolarSeriesComponent, ScaleLegendComponent, ScaleType, SeriesHorizontal, SeriesType, SeriesVerticalComponent, ShowTypes, StyleTypes, SvgLinearGradientComponent, SvgRadialGradientComponent, TextAnchor, Timeline, TooltipArea, TooltipContentComponent, TooltipDirective, TooltipModule, TooltipService, TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent, TreeMapModule, VisibilityObserver, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent, calculateViewDimensions, colorSets, count, decimalChecker, escapeLabel, formatLabel, getDomain, getScale, getScaleType, getTickLines, getUniqueXDomainValues, getXDomainArray, gridLayout, gridSize, hexToRgb, id, invertColor, reduceTicks, shadeRGBColor, sortByDomain, sortByTime, sortLinear, throttle, throttleable, tickFormat, trimLabel };\n"],"mappings":"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AE,uCAunMlE;MAvnMgEA,EAAE,aAwnM5D;MAxnM0DA,EAAE,mCAwnM5D;MAxnM0DA,EAAE,aAwoMpE;MAxoMkEA,EAAE,yCAwoMpE;MAxoMkEA,EAAE,aA6qM3D;MA7qMyDA,EAAE,+DA6qM3D;IAAA;EAAA;EAAA,eA2B8vDoS,cAAc,EAAuNqK,cAAc,EAAsRsD,cAAc,EAA0T4T,mBAAmB,EAA+NpI,WAAW,EAAmMlG,qBAAqB,EAAgPoI,QAAQ,EAA0MzsB,EAAE,CAACsI,IAAI,EAA0EtI,EAAE,CAACmR,OAAO;EAAA;EAAA;EAAA;AAAA,EAAwL;AAC1yH;EAAA,mDAzsM0GnS,EAAE,mBAysMjBi4B,yBAAyB,EAAc,CAAC;IACvH9vB,IAAI,EAAEjI,SAAS;IACf2D,IAAI,EAAE,CAAC;MAAE4F,QAAQ,EAAE,+BAA+B;MAAEC,QAAQ,EAAG;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;MAAE8F,eAAe,EAAE9O,uBAAuB,CAAC+O,MAAM;MAAE9F,aAA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;AAAA,EAAiG;AACtG;EAAA,mDAh+U0GlX,EAAE,mBAg+UjB09B,8BAA8B,EAAc,CAAC;IAC5Hv1B,IAAI,EAAEjI,SAAS;IACf2D,IAAI,EAAE,CAAC;MAAE4F,QAAQ,EAAE,oCAAoC;MAAEC,QAAQ,EAAG;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;MAAEC,aAAa,EAAExJ,iBAAiB,CAACyJ,IAAI;MAAE4F,eAAe,EAAE9O,uBAAuB,CAAC+O,MAAM;MAAE6C,UAAU,EAAE,CACjF7Q,OAAO,CAAC,gBAAgB,EAAE,CACtBC,UAAU,CAAC,QAAQ,EAAE,CACjBC,KAAK,CAAC;QACF8kB,OAAO,EAAE,CAAC;QACVvP,SAAS,EAAE;MACf,CAAC,CAAC,EACFtV,OAAO,CAAC,GAAG,EAAED,KAAK,CAAC;QAAE8kB,OAAO,EAAE,CAAC;QAAEvP,SAAS,EAAE;MAAW,CAAC,CAAC,CAAC,CAC7D,CAAC,CACL,CAAC,CACL;MAAErN,MAAM,EAAE,CAAC,yvDAAyvD;IAAE,CAAC;EACpxD,CAAC,CAAC,QAAkB;IAAEilB,MAAM,EAAE,CAAC;MACvB3mB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEo0B,WAAW,EAAE,CAAC;MACdtsB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEmwB,cAAc,EAAE,CAAC;MACjBroB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEq0B,KAAK,EAAE,CAAC;MACRvsB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEs0B,KAAK,EAAE,CAAC;MACRxsB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEg1B,cAAc,EAAE,CAAC;MACjBltB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEi1B,cAAc,EAAE,CAAC;MACjBntB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEk3B,UAAU,EAAE,CAAC;MACbpvB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEm3B,UAAU,EAAE,CAAC;MACbrvB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAE+gB,eAAe,EAAE,CAAC;MAClBjZ,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAE0O,QAAQ,EAAE,CAAC;MACX5G,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEyY,aAAa,EAAE,CAAC;MAChB3Q,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEuR,aAAa,EAAE,CAAC;MAChBzJ,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEuU,UAAU,EAAE,CAAC;MACbzM,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEw0B,cAAc,EAAE,CAAC;MACjB1sB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEy0B,cAAc,EAAE,CAAC;MACjB3sB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAE00B,gBAAgB,EAAE,CAAC;MACnB5sB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAE20B,kBAAkB,EAAE,CAAC;MACrB7sB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAE40B,kBAAkB,EAAE,CAAC;MACrB9sB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEo3B,mBAAmB,EAAE,CAAC;MACtBtvB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEq3B,mBAAmB,EAAE,CAAC;MACtBvvB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEs3B,UAAU,EAAE,CAAC;MACbxvB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEu3B,UAAU,EAAE,CAAC;MACbzvB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAE+6B,UAAU,EAAE,CAAC;MACbjzB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAE60B,YAAY,EAAE,CAAC;MACf/sB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAEg4B,aAAa,EAAE,CAAC;MAChBlwB,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAE2Y,SAAS,EAAE,CAAC;MACZ7Q,IAAI,EAAE9H;IACV,CAAC,CAAC;IAAE+P,QAAQ,EAAE,CAAC;MACXjI,IAAI,EAAEvH;IACV,CAAC,CAAC;IAAEyP,UAAU,EAAE,CAAC;MACblI,IAAI,EAAEvH;IACV,CAAC,CAAC;IAAEgjB,eAAe,EAAE,CAAC;MAClBzb,IAAI,EAAEpH,YAAY;MAClB8C,IAAI,EAAE,CAAC,iBAAiB;IAC5B,CAAC;EAAE,CAAC;AAAA;AAEhB,MAAM85B,2BAA2B,SAASlpB,kBAAkB,CAAC;EACzD5M,WAAW,GAAG;IACV,KAAK,CAAC,GAAGtD,SAAS,CAAC;IACnB,IAAI,CAACuqB,MAAM,GAAG,KAAK;IACnB,IAAI,CAAC2F,WAAW,GAAG,QAAQ;IAC3B,IAAI,CAACjE,cAAc,GAAGriB,cAAc,CAAC5H,KAAK;IAC1C,IAAI,CAAC6a,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACtI,aAAa,GAAG,IAAI;IACzB,IAAI,CAAClH,aAAa,GAAG,EAAE;IACvB,IAAI,CAACijB,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,kBAAkB,GAAG,EAAE;IAC5B,IAAI,CAACC,kBAAkB,GAAG,EAAE;IAC5B,IAAI,CAACmG,UAAU,GAAG,CAAC;IACnB,IAAI,CAAClG,YAAY,GAAG,KAAK;IACzB,IAAI,CAACyE,aAAa,GAAG,KAAK;IAC1B,IAAI,CAACtB,aAAa,GAAG,IAAI;IACzB,IAAI,CAACrf,SAAS,GAAG,KAAK;IACtB,IAAI,CAAC5I,QAAQ,GAAG,IAAIzP,YAAY,EAAE;IAClC,IAAI,CAAC0P,UAAU,GAAG,IAAI1P,YAAY,EAAE;IACpC,IAAI,CAACoW,MAAM,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAC9B,IAAI,CAACqZ,WAAW,GAAG,CAAC;IACpB,IAAI,CAACC,UAAU,GAAG,CAAC;IACnB,IAAI,CAACgN,kBAAkB,GAAG;MAAEjE,QAAQ,EAAE,CAAC;MAAEW,QAAQ,EAAE;IAAE,CAAC;IACtD,IAAI,CAACpU,KAAK,GAAG,KAAK;IAClB,IAAI,CAACiX,YAAY,GAAG9D,YAAY;IAChC,IAAI,CAAC9mB,OAAO,GAAG,CAACC,KAAK,EAAEJ,IAAI,KAAK;MAC5B,OAAOA,IAAI,CAAClB,IAAI;IACpB,CAAC;EACL;EACAmE,QAAQ,GAAG;IACP,IAAI5T,gBAAgB,CAAC,IAAI,CAAC8G,UAAU,CAAC,EAAE;MACnC,IAAI,CAAC2d,KAAK,GAAG,IAAI;IACrB;EACJ;EACAvU,MAAM,GAAG;IACL,KAAK,CAACA,MAAM,EAAE;IACd,IAAI,CAAC,IAAI,CAACuoB,aAAa,EAAE;MACrB,IAAI,CAAC0D,kBAAkB,GAAG;QAAEjE,QAAQ,EAAE,CAAC;QAAEW,QAAQ,EAAE;MAAE,CAAC;IAC1D;IACA,IAAI,CAAChjB,MAAM,GAAG,CAAC,EAAE,GAAG,IAAI,CAACsmB,kBAAkB,CAACtD,QAAQ,EAAE,EAAE,EAAE,EAAE,GAAG,IAAI,CAACsD,kBAAkB,CAACjE,QAAQ,EAAE,EAAE,CAAC;IACpG,IAAI,CAAC7jB,IAAI,GAAGya,uBAAuB,CAAC;MAChCxpB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBP,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBgqB,OAAO,EAAE,IAAI,CAAClZ,MAAM;MACpBmZ,SAAS,EAAE,IAAI,CAACwE,KAAK;MACrBvE,SAAS,EAAE,IAAI,CAACwE,KAAK;MACrBvE,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BC,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BC,UAAU,EAAE,IAAI,CAAC+E,cAAc;MAC/B9E,UAAU,EAAE,IAAI,CAAC+E,cAAc;MAC/BjjB,UAAU,EAAE,IAAI,CAACyc,MAAM;MACvBnc,UAAU,EAAE,IAAI,CAACiC,UAAU;MAC3B4b,cAAc,EAAE,IAAI,CAACA;IACzB,CAAC,CAAC;IACF,IAAI,IAAI,CAACmJ,aAAa,EAAE;MACpB,IAAI,CAACpkB,IAAI,CAACtP,MAAM,IAAI,IAAI,CAACo3B,kBAAkB,CAACjE,QAAQ;IACxD;IACA,IAAI,CAACzjB,WAAW,EAAE;IAClB,IAAI,CAACimB,WAAW,GAAG,IAAI,CAACC,cAAc,EAAE;IACxC,IAAI,CAACC,WAAW,GAAG,IAAI,CAACC,cAAc,EAAE;IACxC,IAAI,CAACC,WAAW,GAAG,IAAI,CAACC,cAAc,EAAE;IACxC,IAAI,CAAC5e,MAAM,GAAG,IAAI,CAAC4Q,SAAS,EAAE;IAC9B,IAAI,CAAC5N,MAAM,GAAG,IAAI,CAACuV,SAAS,EAAE;IAC9B,IAAI,CAACE,SAAS,EAAE;IAChB,IAAI,CAACjjB,aAAa,GAAG,IAAI,CAACkjB,gBAAgB,EAAE;IAC5C,IAAI,CAAC7e,SAAS,GAAI,aAAY,IAAI,CAAC3B,IAAI,CAACmb,OAAQ,MAAK,IAAI,CAAC3Z,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAACsmB,kBAAkB,CAACjE,QAAS,GAAE;EAC7G;EACAyC,cAAc,GAAG;IACb,MAAMhtB,MAAM,GAAG,EAAE;IACjB,KAAK,MAAMkd,KAAK,IAAI,IAAI,CAAC1W,OAAO,EAAE;MAC9B,IAAI,CAACxG,MAAM,CAAC0f,QAAQ,CAACxC,KAAK,CAACnc,KAAK,CAAC,EAAE;QAC/Bf,MAAM,CAAC9C,IAAI,CAACggB,KAAK,CAACnc,KAAK,CAAC;MAC5B;IACJ;IACA,OAAOf,MAAM;EACjB;EACAktB,cAAc,GAAG;IACb,MAAMltB,MAAM,GAAG,EAAE;IACjB,KAAK,MAAMkd,KAAK,IAAI,IAAI,CAAC1W,OAAO,EAAE;MAC9B,KAAK,MAAMtD,CAAC,IAAIga,KAAK,CAAClW,MAAM,EAAE;QAC1B,IAAI,CAAChH,MAAM,CAAC0f,QAAQ,CAACxc,CAAC,CAACnC,KAAK,CAAC,EAAE;UAC3Bf,MAAM,CAAC9C,IAAI,CAACgG,CAAC,CAACnC,KAAK,CAAC;QACxB;MACJ;IACJ;IACA,OAAOf,MAAM;EACjB;EACAotB,cAAc,GAAG;IACb,MAAMptB,MAAM,GAAG,EAAE;IACjB,IAAIiuB,QAAQ,GAAG,CAAC;IAChB,IAAIC,OAAO,GAAG,CAAC;IACf,KAAK,MAAMhR,KAAK,IAAI,IAAI,CAAC1W,OAAO,EAAE;MAC9B,IAAI2nB,WAAW,GAAG,CAAC;MACnB,IAAIC,UAAU,GAAG,CAAC;MAClB,KAAK,MAAMlrB,CAAC,IAAIga,KAAK,CAAClW,MAAM,EAAE;QAC1B,IAAI9D,CAAC,CAACxM,KAAK,GAAG,CAAC,EAAE;UACby3B,WAAW,IAAIjrB,CAAC,CAACxM,KAAK;QAC1B,CAAC,MACI;UACD03B,UAAU,IAAIlrB,CAAC,CAACxM,KAAK;QACzB;QACAu3B,QAAQ,GAAG/qB,CAAC,CAACxM,KAAK,GAAGu3B,QAAQ,GAAG/qB,CAAC,CAACxM,KAAK,GAAGu3B,QAAQ;QAClDC,OAAO,GAAGhrB,CAAC,CAACxM,KAAK,GAAGw3B,OAAO,GAAGhrB,CAAC,CAACxM,KAAK,GAAGw3B,OAAO;MACnD;MACAluB,MAAM,CAAC9C,IAAI,CAACixB,WAAW,CAAC;MACxBnuB,MAAM,CAAC9C,IAAI,CAACkxB,UAAU,CAAC;IAC3B;IACApuB,MAAM,CAAC9C,IAAI,CAAC+wB,QAAQ,CAAC;IACrBjuB,MAAM,CAAC9C,IAAI,CAACgxB,OAAO,CAAC;IACpB,MAAMl6B,GAAG,GAAGwM,IAAI,CAACxM,GAAG,CAAC,CAAC,EAAE,GAAGgM,MAAM,CAAC;IAClC,MAAM/L,GAAG,GAAG,IAAI,CAAC0zB,SAAS,GAAGnnB,IAAI,CAACvM,GAAG,CAAC,IAAI,CAAC0zB,SAAS,EAAE,GAAG3nB,MAAM,CAAC,GAAGQ,IAAI,CAACvM,GAAG,CAAC,GAAG+L,MAAM,CAAC;IACtF,OAAO,CAAChM,GAAG,EAAEC,GAAG,CAAC;EACrB;EACAmrB,SAAS,GAAG;IACR,MAAM5mB,OAAO,GAAG,IAAI,CAACu0B,WAAW,CAAC3wB,MAAM,IAAI,IAAI,CAACsK,IAAI,CAAC/O,KAAK,GAAG,IAAI,CAAC40B,UAAU,GAAG,CAAC,CAAC;IACjF,OAAOh5B,SAAS,EAAE,CAACk5B,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC/lB,IAAI,CAAC/O,KAAK,CAAC,CAAC,CAACihB,YAAY,CAACpgB,OAAO,CAAC,CAACwH,MAAM,CAAC,IAAI,CAAC+sB,WAAW,CAAC;EACtG;EACAhG,SAAS,GAAG;IACR,MAAM/b,KAAK,GAAG7X,WAAW,EAAE,CAACY,KAAK,CAAC,CAAC,IAAI,CAAC2S,IAAI,CAACtP,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC4I,MAAM,CAAC,IAAI,CAACmtB,WAAW,CAAC;IACjF,OAAO,IAAI,CAAC9G,YAAY,GAAGrb,KAAK,CAAC4c,IAAI,EAAE,GAAG5c,KAAK;EACnD;EACA2jB,2BAA2B,CAAC/Z,KAAK,EAAEgZ,UAAU,EAAE;IAC3C,IAAIhZ,KAAK,CAAC+X,IAAI,CAACpC,QAAQ,EAAE;MACrB,IAAI,CAACiE,kBAAkB,CAACjE,QAAQ,GAAG/pB,IAAI,CAACvM,GAAG,CAAC,IAAI,CAACu6B,kBAAkB,CAACjE,QAAQ,EAAE3V,KAAK,CAAC+X,IAAI,CAACv1B,MAAM,CAAC;IACpG,CAAC,MACI;MACD,IAAI,CAACo3B,kBAAkB,CAACtD,QAAQ,GAAG1qB,IAAI,CAACvM,GAAG,CAAC,IAAI,CAACu6B,kBAAkB,CAACtD,QAAQ,EAAEtW,KAAK,CAAC+X,IAAI,CAACv1B,MAAM,CAAC;IACpG;IACA,IAAIw2B,UAAU,KAAK,IAAI,CAACpnB,OAAO,CAACpK,MAAM,GAAG,CAAC,EAAE;MACxCvG,UAAU,CAAC,MAAM,IAAI,CAAC0M,MAAM,EAAE,CAAC;IACnC;EACJ;EACAorB,cAAc,CAACzQ,KAAK,EAAE;IAClB,OAAQ,aAAY,IAAI,CAAC1O,MAAM,CAAC0O,KAAK,CAACpb,IAAI,CAAC,IAAI,CAAE,MAAK;EAC1D;EACAiU,OAAO,CAACpT,IAAI,EAAEua,KAAK,EAAE;IACjB,IAAIA,KAAK,EAAE;MACPva,IAAI,CAACqE,MAAM,GAAGkW,KAAK,CAACpb,IAAI;IAC5B;IACA,IAAI,CAAC9O,MAAM,CAAC6O,IAAI,CAACc,IAAI,CAAC;EAC1B;EACAskB,SAAS,GAAG;IACR,IAAIjnB,MAAM;IACV,IAAI,IAAI,CAAC+F,UAAU,KAAKvG,SAAS,CAACwG,OAAO,EAAE;MACvChG,MAAM,GAAG,IAAI,CAACitB,WAAW;IAC7B,CAAC,MACI;MACDjtB,MAAM,GAAG,IAAI,CAACmtB,WAAW;IAC7B;IACA,IAAI,CAACptB,MAAM,GAAG,IAAIkiB,WAAW,CAAC,IAAI,CAACnc,MAAM,EAAE,IAAI,CAACC,UAAU,EAAE/F,MAAM,EAAE,IAAI,CAAC8H,YAAY,CAAC;EAC1F;EACAof,gBAAgB,GAAG;IACf,MAAMkB,IAAI,GAAG;MACT7jB,SAAS,EAAE,IAAI,CAACwB,UAAU;MAC1BhG,MAAM,EAAEzI,SAAS;MACjB0I,MAAM,EAAE,EAAE;MACV9E,KAAK,EAAE5D,SAAS;MAChBmC,QAAQ,EAAE,IAAI,CAACkoB;IACnB,CAAC;IACD,IAAIyG,IAAI,CAAC7jB,SAAS,KAAK/E,SAAS,CAACwG,OAAO,EAAE;MACtCoiB,IAAI,CAACpoB,MAAM,GAAG,IAAI,CAACitB,WAAW;MAC9B7E,IAAI,CAACroB,MAAM,GAAG,IAAI,CAACA,MAAM;MACzBqoB,IAAI,CAACltB,KAAK,GAAG,IAAI,CAAC0qB,WAAW;IACjC,CAAC,MACI;MACDwC,IAAI,CAACpoB,MAAM,GAAG,IAAI,CAACmtB,WAAW;MAC9B/E,IAAI,CAACroB,MAAM,GAAG,IAAI,CAACA,MAAM,CAACiL,KAAK;IACnC;IACA,OAAOod,IAAI;EACf;EACAC,gBAAgB,CAAC;IAAE1wB;EAAM,CAAC,EAAE;IACxB,IAAI,CAAC6pB,UAAU,GAAG7pB,KAAK;IACvB,IAAI,CAAC4K,MAAM,EAAE;EACjB;EACA+lB,iBAAiB,CAAC;IAAElxB;EAAO,CAAC,EAAE;IAC1B,IAAI,CAACmqB,WAAW,GAAGnqB,MAAM;IACzB,IAAI,CAACmL,MAAM,EAAE;EACjB;EACAgmB,UAAU,CAAC3T,KAAK,EAAEsI,KAAK,EAAE0P,UAAU,GAAG,KAAK,EAAE;IACzC,MAAM5pB,IAAI,GAAGxM,MAAM,CAACkR,MAAM,CAAC,CAAC,CAAC,EAAEkN,KAAK,CAAC;IACrC,IAAIsI,KAAK,EAAE;MACPla,IAAI,CAACgE,MAAM,GAAGkW,KAAK,CAACpb,IAAI;IAC5B;IACA,MAAMY,KAAK,GAAG,IAAI,CAAC8D,OAAO,CACrBkK,GAAG,CAAC3J,CAAC,IAAIA,CAAC,CAACC,MAAM,CAAC,CAClB6mB,IAAI,EAAE,CACNrO,MAAM,CAAC7iB,CAAC,IAAI;MACb,IAAIiwB,UAAU,EAAE;QACZ,OAAOjwB,CAAC,CAACoE,KAAK,KAAKiC,IAAI,CAAClB,IAAI;MAChC,CAAC,MACI;QACD,OAAOnF,CAAC,CAACmF,IAAI,KAAKkB,IAAI,CAAClB,IAAI,IAAInF,CAAC,CAACqK,MAAM,KAAKhE,IAAI,CAACgE,MAAM;MAC3D;IACJ,CAAC,CAAC;IACF,IAAI,CAACjE,aAAa,GAAG,CAAC,GAAGL,KAAK,CAAC;IAC/B,IAAI,CAACnB,QAAQ,CAACM,IAAI,CAAC;MAAEnL,KAAK,EAAEsM,IAAI;MAAEwlB,OAAO,EAAE,IAAI,CAACzlB;IAAc,CAAC,CAAC;EACpE;EACA0lB,YAAY,CAAC7T,KAAK,EAAEsI,KAAK,EAAE0P,UAAU,GAAG,KAAK,EAAE;IAC3C,MAAM5pB,IAAI,GAAGxM,MAAM,CAACkR,MAAM,CAAC,CAAC,CAAC,EAAEkN,KAAK,CAAC;IACrC,IAAIsI,KAAK,EAAE;MACPla,IAAI,CAACgE,MAAM,GAAGkW,KAAK,CAACpb,IAAI;IAC5B;IACA,IAAI,CAACiB,aAAa,GAAG,IAAI,CAACA,aAAa,CAACyc,MAAM,CAAC7iB,CAAC,IAAI;MAChD,IAAIiwB,UAAU,EAAE;QACZ,OAAOjwB,CAAC,CAACoE,KAAK,KAAKiC,IAAI,CAAClB,IAAI;MAChC,CAAC,MACI;QACD,OAAO,EAAEnF,CAAC,CAACmF,IAAI,KAAKkB,IAAI,CAAClB,IAAI,IAAInF,CAAC,CAACqK,MAAM,KAAKhE,IAAI,CAACgE,MAAM,CAAC;MAC9D;IACJ,CAAC,CAAC;IACF,IAAI,CAACxF,UAAU,CAACK,IAAI,CAAC;MAAEnL,KAAK,EAAEsM,IAAI;MAAEwlB,OAAO,EAAE,IAAI,CAACzlB;IAAc,CAAC,CAAC;EACtE;AACJ;AACA+rB,2BAA2B,CAACz0B,IAAI;EAAA;EAAA;IAAA,gGAj2V0ElJ,EAAE,uBAi2VY29B,2BAA2B,SAA3BA,2BAA2B;EAAA;AAAA,GAAqD;AACxMA,2BAA2B,CAACt0B,IAAI,kBAl2V0ErJ,EAAE;EAAA,MAk2VA29B,2BAA2B;EAAA;EAAA;IAAA;MAl2V7B39B,EAAE;IAAA;IAAA;MAAA;MAAFA,EAAE,qBAAFA,EAAE;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA,WAAFA,EAAE;EAAA;EAAA;EAAA;EAAA;IAAA;MAAFA,EAAE,yCA42VvG;MA52VqGA,EAAE;QAAA,OAy2V/E,uBAAmB,SAAS,EAAE,IAAI,CAAC;MAAA,EAAC;QAAA,OAClC,yBAAqB,SAAS,EAAE,IAAI,CAAC;MAAA,EADH;QAAA,OAEvC,mBAAe;MAAA,EAFwB;MAz2VyCA,EAAE,iBA62V1C;MA72VwCA,EAAE,0BA62V1C;MA72VwCA,EAAE,4EA63V3F;MA73VyFA,EAAE,4EA44V3F;MA54VyFA,EAAE,2EA06V5F;MA16V0FA,EAAE,eA26V9F;MA36V4FA,EAAE,2EAw8V9F;MAx8V4FA,EAAE,eAy8VrF;IAAA;IAAA;MAz8VmFA,EAAE,oBAAFA,EAAE,kDAo2V9E;MAp2V4EA,EAAE,aA62VnE;MA72ViEA,EAAE,wCA62VnE;MA72ViEA,EAAE,aAg3VtF;MAh3VoFA,EAAE,8BAg3VtF;MAh3VoFA,EAAE,aAg4VtF;MAh4VoFA,EAAE,8BAg4VtF;MAh4VoFA,EAAE,aA64VhF;MA74V8EA,EAAE,+BA64VhF;MA74V8EA,EAAE,aA46VnF;MA56ViFA,EAAE,8BA46VnF;IAAA;EAAA;EAAA,eA8BsxDoS,cAAc,EAAuNqK,cAAc,EAAsRsD,cAAc,EAA0Tmd,uBAAuB,EAAsXl8B,EAAE,CAACsI,IAAI,EAA0EtI,EAAE,CAACmR,OAAO;EAAA;EAAA;EAAA;IAAA,WAAqG,CACrsG1Q,OAAO,CAAC,gBAAgB,EAAE,CACtBC,UAAU,CAAC,QAAQ,EAAE,CACjBC,KAAK,CAAC;MACF8kB,OAAO,EAAE,CAAC;MACVvP,SAAS,EAAE;IACf,CAAC,CAAC,EACFtV,OAAO,CAAC,GAAG,EAAED,KAAK,CAAC;MAAE8kB,OAAO,EAAE,CAAC;MAAEvP,SAAS,EAAE;IAAW,CAAC,CAAC,CAAC,CAC7D,CAAC,CACL,CAAC;EACL;EAAA;AAAA,EAAiG;AACtG;EAAA,mDAr9V0GlX,EAAE,mBAq9VjB29B,2BAA2B,EAAc,CAAC;IACzHx1B,IAAI,EAAEjI,SAAS;IACf2D,IAAI,EAAE,CAAC;MAAE4F,QAAQ,EAAE,iCAAiC;MAAEC,QAAQ,EAAG;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;MAAEC,aAAa,EAAExJ,iBAAiB,CAACyJ,IAAI;MAAE4F,eAAe,EAAE9O,uBAAuB,CAAC+O,MAAM;MAAE6C,UAAU,EAAE,CACjF7Q,OAAO,CAAC,gBAAgB,EAAE,CACtBC,UAAU,CAAC,QAAQ,EAAE,CAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}