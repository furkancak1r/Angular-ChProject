{"ast":null,"code":"import { fabric } from 'fabric';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"canvas\"];\nfunction HomeComponent_ng_container_12_ng_container_7_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r6 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r6 === 0 ? \"Yataydaki 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Yataydaki \" + (i_r6 + 1) + \". \\u00E7izginin \" + i_r6 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r6);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r6);\n  }\n}\nfunction HomeComponent_ng_container_12_ng_container_7_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r8 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r8 === 0 ? \"Dikeyde 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Dikeyde \" + (i_r8 + 1) + \". \\u00E7izginin \" + i_r8 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r8);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r8);\n  }\n}\nfunction HomeComponent_ng_container_12_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 15);\n    i0.ɵɵtemplate(2, HomeComponent_ng_container_12_ng_container_7_ng_container_2_Template, 4, 3, \"ng-container\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 17);\n    i0.ɵɵtemplate(4, HomeComponent_ng_container_12_ng_container_7_ng_container_4_Template, 4, 3, \"ng-container\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getLinesArray(ctx_r2.otherDataForm.controls[\"horizontalLines\"].value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getLinesArray(ctx_r2.otherDataForm.controls[\"verticalLines\"].value));\n  }\n}\nfunction HomeComponent_ng_container_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\", 11);\n    i0.ɵɵtext(2, \"Yatayda ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 12);\n    i0.ɵɵelementStart(4, \"label\", 13);\n    i0.ɵɵtext(5, \"Dikeyde ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 14);\n    i0.ɵɵtemplate(7, HomeComponent_ng_container_12_ng_container_7_Template, 5, 2, \"ng-container\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.otherDataForm.controls[\"horizontalLines\"].value > 0 && ctx_r1.otherDataForm.controls[\"verticalLines\"].value > 0);\n  }\n}\nexport class HomeComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({})\n    });\n  }\n  ngOnInit() {\n    // Subscribe to valueChanges observable of horizontalLines form control\n    this.otherDataForm.get('horizontalLines')?.valueChanges.subscribe(value => {\n      // Call addHorizontalDistances() with the new value of horizontalLines form control\n      this.addHorizontalDistances(value);\n    });\n    // Subscribe to valueChanges observable of verticalLines form control\n    this.otherDataForm.get('verticalLines')?.valueChanges.subscribe(value => {\n      // Call addVerticalDistances() with the new value of verticalLines form control\n      this.addVerticalDistances(value);\n    });\n    // Subscribe to valueChanges observable of otherDataForm and call drawRectangle() method when any value changes.\n    this.otherDataForm.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n  }\n  ngAfterViewInit() {\n    // Set initial size of canvas element.\n    // Set initial size of canvas element.\n    const canvas = this.canvas.nativeElement;\n    if (!canvas) return;\n    canvas.width = 800;\n    canvas.height = 600;\n    this.minScale = 0.1;\n    let width = this.otherDataForm.value.width;\n    let height = this.otherDataForm.value.height;\n    // Create a new fabric.Canvas instance and set its dimensions\n    const fabricCanvas = new fabric.Canvas(canvas);\n    fabricCanvas.setDimensions({\n      width: canvas.width,\n      height: canvas.height\n    });\n    // Assign the fabric.Canvas instance to the fabricCanvas property\n    this.fabricCanvas = fabricCanvas;\n    // Set a minimum scale value\n    const minScale = 0.1;\n    // Calculate the scale factor based on the desired width and height of the rectangle\n    let scale = Math.min(canvas.width / width, canvas.height / height);\n    // Ensure that the scale factor is not less than the minimum scale value\n    scale = Math.max(minScale, scale);\n    // Scale the canvas using the fabric.Canvas.setZoom() method\n    fabricCanvas.setZoom(scale);\n    // Add an event listener for the wheel event on the canvas element\n  }\n  // Add zoomIn and zoomOut methods to the component class\n  zoomIn() {\n    // Get a reference to the fabric.Canvas instance\n    // Calculate the new zoom level\n    let zoom = this.fabricCanvas.getZoom();\n    zoom += 0.1;\n    if (zoom > 20) zoom = 20;\n    // Set the new zoom level on the fabric.Canvas instance\n    this.fabricCanvas.setZoom(zoom);\n  }\n  zoomOut() {\n    // Get a reference to the fabric.Canvas instance\n    // Calculate the new zoom level\n    let zoom = this.fabricCanvas.getZoom();\n    zoom -= 0.1;\n    if (zoom < this.minScale) zoom = this.minScale;\n    // Set the new zoom level on the fabric.Canvas instance\n    this.fabricCanvas.setZoom(zoom);\n  }\n  onSubmit() {\n    // Access the values of distances for horizontal and vertical lines\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n    // Log the distances for horizontal and vertical lines\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n    // Clear the form after submission (optional)\n    this.otherDataForm.reset();\n  }\n  getLinesArray(lineCount) {\n    return Array(lineCount).fill(0).map((_, index) => index + 1);\n  }\n  addHorizontalDistances(count) {\n    const horizontalDistances = this.otherDataForm.get('horizontalDistances');\n    horizontalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      horizontalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n  }\n  addVerticalDistances(count) {\n    const verticalDistances = this.otherDataForm.get('verticalDistances');\n    verticalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      verticalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n  }\n  drawRectangle() {\n    // Check if the form values have changed\n    const formValues = this.otherDataForm.value;\n    if (JSON.stringify(formValues) === JSON.stringify(this.prevFormValues)) {\n      return;\n    } // Store the current form values\n    this.prevFormValues = formValues;\n    let width = this.otherDataForm.value.width;\n    let height = this.otherDataForm.value.height;\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n    if (!width || !height) return;\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    // Scale down rectangle and text if necessary\n    // Scale down rectangle and text if necessary\n    let scale = 1;\n    if (width > canvas.width - 20 || height > canvas.height - 20) {\n      scale = Math.max(0.1, Math.min((canvas.width - 20) / width, (canvas.height - 20) / height));\n      width *= scale;\n      height *= scale;\n      // Scale relative to center of canvas\n      ctx.translate(canvas.width / 2, canvas.height / 2);\n      ctx.scale(scale, scale);\n      ctx.translate(-canvas.width / (2 * scale), -canvas.height / (2 * scale));\n    }\n    const offsetX = (canvas.width / scale - width) / 2;\n    const offsetY = (canvas.height / scale - height) / 2;\n    ctx.beginPath();\n    ctx.rect(offsetX, offsetY, width, height);\n    ctx.stroke();\n    ctx.font = '16px sans-serif';\n    // Ensure text stays within canvas\n    let textWidth = ctx.measureText(`Width: ${width / scale}mm`).width;\n    let textX = Math.min(width + 20 + offsetX, (canvas.width - textWidth - 10) / scale);\n    // Position text next to bottom side of rectangle\n    ctx.fillText(`Width: ${width / scale}mm`, width / (2 * scale) + offsetX - textWidth / 2, height + offsetY + 20);\n    textWidth = ctx.measureText(`Height: ${height / scale}mm`).width;\n    let textY = Math.min(height + 30 + offsetY, (canvas.height - 10) / scale);\n    // Position text next to right side of rectangle\n    ctx.fillText(`Height: ${height / scale}mm`, width + offsetX + 10, height / (2 * scale) + offsetY);\n    let currentY = offsetY;\n    for (const key in horizontalDistances) {\n      const distance = horizontalDistances[key];\n      if (distance !== null) {\n        currentY += distance;\n        const isBeyondBounds = currentY > height + offsetY;\n        ctx.beginPath();\n        ctx.moveTo(offsetX, currentY);\n        ctx.lineTo(width + offsetX, currentY);\n        ctx.strokeStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.stroke();\n        textWidth = ctx.measureText(`${distance}mm`).width;\n        textX = Math.min(width + Math.max(20, textWidth) + offsetX, (canvas.width - textWidth - 10) / scale);\n        ctx.fillStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.fillText(`${distance}mm`, textX, currentY);\n      }\n    }\n    let currentX = offsetX;\n    for (const key in verticalDistances) {\n      const distance = verticalDistances[key];\n      if (distance !== null) {\n        currentX += distance;\n        const isBeyondBounds = currentX > width + offsetX;\n        ctx.beginPath();\n        ctx.moveTo(currentX, offsetY);\n        ctx.lineTo(currentX, height + offsetY);\n        ctx.strokeStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.stroke();\n        textWidth = ctx.measureText(`${distance}mm`).width;\n        textY = Math.min(height + Math.max(30, textWidth) + offsetY, (canvas.height - textWidth - 10) / scale);\n        ctx.fillStyle = isBeyondBounds ? 'red' : 'black';\n        // Position text below center of line\n        ctx.fillText(`${distance}mm`, currentX - textWidth / 2, height + offsetY + 20);\n      }\n    }\n    // Reset canvas context\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  viewQuery: function HomeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n    }\n  },\n  decls: 19,\n  vars: 2,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [\"canvas\", \"\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"width\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"width\", \"name\", \"width\", \"formControlName\", \"width\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"height\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"height\", \"name\", \"height\", \"formControlName\", \"height\", 1, \"form-control\", \"form-control-sm\"], [4, \"ngIf\"], [3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"for\", \"horizontalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"horizontalLines\", \"name\", \"horizontalLines\", \"formControlName\", \"horizontalLines\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"verticalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"verticalLines\", \"name\", \"verticalLines\", \"formControlName\", \"verticalLines\", 1, \"form-control\", \"form-control-sm\"], [\"formGroupName\", \"horizontalDistances\"], [4, \"ngFor\", \"ngForOf\"], [\"formGroupName\", \"verticalDistances\"], [\"type\", \"number\", 1, \"form-control\", \"form-control-sm\", 3, \"name\", \"formControlName\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"canvas\", null, 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 1)(5, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(6, \"label\", 4);\n      i0.ɵɵtext(7, \"Dikd\\u00F6rtgenin geni\\u015Fli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 5);\n      i0.ɵɵelementStart(9, \"label\", 6);\n      i0.ɵɵtext(10, \"Dikd\\u00F6rtgenin y\\u00FCksekli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 7);\n      i0.ɵɵtemplate(12, HomeComponent_ng_container_12_Template, 8, 1, \"ng-container\", 8);\n      i0.ɵɵelementStart(13, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_13_listener() {\n        return ctx.zoomIn();\n      });\n      i0.ɵɵtext(14, \"Zoom In\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_15_listener() {\n        return ctx.zoomOut();\n      });\n      i0.ɵɵtext(16, \"Zoom Out\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"button\", 10);\n      i0.ɵɵtext(18, \"G\\u00F6nder\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.otherDataForm.controls[\"width\"].value > 0 && ctx.otherDataForm.controls[\"height\"].value > 0);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["fabric","i0","HomeComponent","constructor","formBuilder","otherDataForm","group","width","height","horizontalLines","verticalLines","horizontalDistances","verticalDistances","ngOnInit","get","valueChanges","subscribe","value","addHorizontalDistances","addVerticalDistances","drawRectangle","ngAfterViewInit","canvas","nativeElement","minScale","fabricCanvas","Canvas","setDimensions","scale","Math","min","max","setZoom","zoomIn","zoom","getZoom","zoomOut","onSubmit","console","log","reset","getLinesArray","lineCount","Array","fill","map","_","index","count","i","addControl","control","formValues","JSON","stringify","prevFormValues","ctx","getContext","clearRect","translate","offsetX","offsetY","beginPath","rect","stroke","font","textWidth","measureText","textX","fillText","textY","currentY","key","distance","isBeyondBounds","moveTo","lineTo","strokeStyle","fillStyle","currentX","setTransform","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { fabric } from 'fabric';\n\n@Component({\n  selector: 'app-home',\n  template: `\n    <div\n      style=\"display: flex; justify-content: space-between; align-items: center; height: 100vh;\"\n    >\n      <div class=\"col-md-4\">\n        <canvas #canvas></canvas>\n      </div>\n      <div class=\"col-md-4\">\n        <form\n          [formGroup]=\"otherDataForm\"\n          (ngSubmit)=\"onSubmit()\"\n          class=\"form-group mb-3\"\n        >\n          <label for=\"width\" class=\"mr-2\">Dikdörtgenin genişliği (mm):</label>\n          <input\n            type=\"number\"\n            id=\"width\"\n            name=\"width\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"width\"\n          />\n\n          <label for=\"height\" class=\"mr-2\">Dikdörtgenin yüksekliği (mm):</label>\n          <input\n            type=\"number\"\n            id=\"height\"\n            name=\"height\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"height\"\n          />\n\n          <ng-container\n            *ngIf=\"\n              otherDataForm.controls['width'].value > 0 &&\n              otherDataForm.controls['height'].value > 0\n            \"\n          >\n            <label for=\"horizontalLines\" class=\"mr-2\"\n              >Yatayda kaç adet çizgi olsun:</label\n            >\n            <input\n              type=\"number\"\n              id=\"horizontalLines\"\n              name=\"horizontalLines\"\n              class=\"form-control form-control-sm\"\n              formControlName=\"horizontalLines\"\n            />\n\n            <label for=\"verticalLines\" class=\"mr-2\"\n              >Dikeyde kaç adet çizgi olsun:</label\n            >\n            <input\n              type=\"number\"\n              id=\"verticalLines\"\n              name=\"verticalLines\"\n              class=\"form-control form-control-sm\"\n              formControlName=\"verticalLines\"\n            />\n\n            <ng-container\n              *ngIf=\"\n                otherDataForm.controls['horizontalLines'].value > 0 &&\n                otherDataForm.controls['verticalLines'].value > 0\n              \"\n            >\n              <div formGroupName=\"horizontalDistances\">\n                <ng-container\n                  *ngFor=\"\n                    let line of this.getLinesArray(\n                      otherDataForm.controls['horizontalLines'].value\n                    );\n                    let i = index\n                  \"\n                >\n                  <!-- this anahtar kelimesini ekledim -->\n                  <label>\n                    {{\n                      i === 0\n                        ? 'Yataydaki 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:'\n                        : 'Yataydaki ' +\n                          (i + 1) +\n                          '. çizginin ' +\n                          i +\n                          '. çizgi ile arasındaki mesafe kaç mm olmalı:'\n                    }}\n                    <input\n                      type=\"number\"\n                      name=\"{{ 'distance_' + i }}\"\n                      class=\"form-control form-control-sm\"\n                      formControlName=\"{{ 'distance_' + i }}\"\n                    />\n                  </label>\n                </ng-container>\n              </div>\n\n              <div formGroupName=\"verticalDistances\">\n                <ng-container\n                  *ngFor=\"\n                    let line of this.getLinesArray(\n                      otherDataForm.controls['verticalLines'].value\n                    );\n                    let i = index\n                  \"\n                >\n                  <!-- this anahtar kelimesini ekledim -->\n                  <label>\n                    {{\n                      i === 0\n                        ? 'Dikeyde 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:'\n                        : 'Dikeyde ' +\n                          (i + 1) +\n                          '. çizginin ' +\n                          i +\n                          '. çizgi ile arasındaki mesafe kaç mm olmalı:'\n                    }}\n                    <input\n                      type=\"number\"\n                      name=\"{{ 'distance_' + i }}\"\n                      class=\"form-control form-control-sm\"\n                      formControlName=\"{{ 'distance_' + i }}\"\n                    />\n                  </label>\n                </ng-container>\n              </div>\n            </ng-container>\n          </ng-container>\n          <!-- Add zoom in and zoom out buttons to the template -->\n          <button (click)=\"zoomIn()\">Zoom In</button>\n          <button (click)=\"zoomOut()\">Zoom Out</button>\n\n          <button type=\"submit\" class=\"btn btn-primary\">Gönder</button>\n        </form>\n      </div>\n    </div>\n  `,\n})\nexport class HomeComponent implements OnInit {\n  @ViewChild('canvas') canvas!: ElementRef<HTMLCanvasElement>;\n  otherDataForm: FormGroup;\n  fabricCanvas: any;\n  minScale!: number;\n  prevFormValues: any;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({}),\n    });\n  }\n\n  ngOnInit(): void {\n    // Subscribe to valueChanges observable of horizontalLines form control\n    this.otherDataForm\n      .get('horizontalLines')\n      ?.valueChanges.subscribe((value) => {\n        // Call addHorizontalDistances() with the new value of horizontalLines form control\n        this.addHorizontalDistances(value);\n      });\n\n    // Subscribe to valueChanges observable of verticalLines form control\n    this.otherDataForm.get('verticalLines')?.valueChanges.subscribe((value) => {\n      // Call addVerticalDistances() with the new value of verticalLines form control\n      this.addVerticalDistances(value);\n    });\n\n    // Subscribe to valueChanges observable of otherDataForm and call drawRectangle() method when any value changes.\n    this.otherDataForm.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n  }\n\n  ngAfterViewInit(): void {\n    // Set initial size of canvas element.\n    // Set initial size of canvas element.\n    const canvas = this.canvas.nativeElement;\n    if (!canvas) return;\n    canvas.width = 800;\n    canvas.height = 600;\n    this.minScale = 0.1;\n    let width = this.otherDataForm.value.width;\n    let height = this.otherDataForm.value.height;\n\n    // Create a new fabric.Canvas instance and set its dimensions\n    const fabricCanvas = new fabric.Canvas(canvas);\n    fabricCanvas.setDimensions({ width: canvas.width, height: canvas.height });\n\n    // Assign the fabric.Canvas instance to the fabricCanvas property\n    this.fabricCanvas = fabricCanvas;\n\n    // Set a minimum scale value\n    const minScale = 0.1;\n\n    // Calculate the scale factor based on the desired width and height of the rectangle\n    let scale = Math.min(canvas.width / width, canvas.height / height);\n\n    // Ensure that the scale factor is not less than the minimum scale value\n    scale = Math.max(minScale, scale);\n\n    // Scale the canvas using the fabric.Canvas.setZoom() method\n    fabricCanvas.setZoom(scale);\n\n    // Add an event listener for the wheel event on the canvas element\n  }\n  // Add zoomIn and zoomOut methods to the component class\n  zoomIn(): void {\n    // Get a reference to the fabric.Canvas instance\n\n    // Calculate the new zoom level\n    let zoom = this.fabricCanvas.getZoom();\n    zoom += 0.1;\n    if (zoom > 20) zoom = 20;\n\n    // Set the new zoom level on the fabric.Canvas instance\n    this.fabricCanvas.setZoom(zoom);\n  }\n\n  zoomOut(): void {\n    // Get a reference to the fabric.Canvas instance\n\n    // Calculate the new zoom level\n    let zoom = this.fabricCanvas.getZoom();\n    zoom -= 0.1;\n    if (zoom < this.minScale) zoom = this.minScale;\n\n    // Set the new zoom level on the fabric.Canvas instance\n    this.fabricCanvas.setZoom(zoom);\n  }\n\n  onSubmit(): void {\n    // Access the values of distances for horizontal and vertical lines\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n\n    // Log the distances for horizontal and vertical lines\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n\n    // Clear the form after submission (optional)\n    this.otherDataForm.reset();\n  }\n\n  getLinesArray(lineCount: number): number[] {\n    return Array(lineCount)\n      .fill(0)\n      .map((_, index) => index + 1);\n  }\n\n  addHorizontalDistances(count: number): void {\n    const horizontalDistances = this.otherDataForm.get(\n      'horizontalDistances'\n    ) as FormGroup;\n    horizontalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      horizontalDistances.addControl(\n        `distance_${i}`,\n        this.formBuilder.control(null)\n      );\n    }\n  }\n\n  addVerticalDistances(count: number): void {\n    const verticalDistances = this.otherDataForm.get(\n      'verticalDistances'\n    ) as FormGroup;\n    verticalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      verticalDistances.addControl(\n        `distance_${i}`,\n        this.formBuilder.control(null)\n      );\n    }\n  }\n  drawRectangle(): void {\n    // Check if the form values have changed\n    const formValues = this.otherDataForm.value;\n    if (JSON.stringify(formValues) === JSON.stringify(this.prevFormValues)) {\n      return;\n    } // Store the current form values\n    this.prevFormValues = formValues;\n\n    let width = this.otherDataForm.value.width;\n    let height = this.otherDataForm.value.height;\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n\n    if (!width || !height) return;\n\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) return;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Scale down rectangle and text if necessary\n    // Scale down rectangle and text if necessary\n    let scale = 1;\n\n    if (width > canvas.width - 20 || height > canvas.height - 20) {\n      scale = Math.max(\n        0.1,\n        Math.min((canvas.width - 20) / width, (canvas.height - 20) / height)\n      );\n      width *= scale;\n      height *= scale;\n\n      // Scale relative to center of canvas\n      ctx.translate(canvas.width / 2, canvas.height / 2);\n      ctx.scale(scale, scale);\n      ctx.translate(-canvas.width / (2 * scale), -canvas.height / (2 * scale));\n    }\n\n    const offsetX = (canvas.width / scale - width) / 2;\n    const offsetY = (canvas.height / scale - height) / 2;\n\n    ctx.beginPath();\n    ctx.rect(offsetX, offsetY, width, height);\n    ctx.stroke();\n\n    ctx.font = '16px sans-serif';\n\n    // Ensure text stays within canvas\n    let textWidth = ctx.measureText(`Width: ${width / scale}mm`).width;\n\n    let textX = Math.min(\n      width + 20 + offsetX,\n      (canvas.width - textWidth - 10) / scale\n    );\n\n    // Position text next to bottom side of rectangle\n    ctx.fillText(\n      `Width: ${width / scale}mm`,\n      width / (2 * scale) + offsetX - textWidth / 2,\n      height + offsetY + 20\n    );\n\n    textWidth = ctx.measureText(`Height: ${height / scale}mm`).width;\n\n    let textY = Math.min(height + 30 + offsetY, (canvas.height - 10) / scale);\n\n    // Position text next to right side of rectangle\n    ctx.fillText(\n      `Height: ${height / scale}mm`,\n      width + offsetX + 10,\n      height / (2 * scale) + offsetY\n    );\n\n    let currentY = offsetY;\n\n    for (const key in horizontalDistances) {\n      const distance = horizontalDistances[key];\n      if (distance !== null) {\n        currentY += distance;\n        const isBeyondBounds = currentY > height + offsetY;\n\n        ctx.beginPath();\n        ctx.moveTo(offsetX, currentY);\n        ctx.lineTo(width + offsetX, currentY);\n        ctx.strokeStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.stroke();\n\n        textWidth = ctx.measureText(`${distance}mm`).width;\n\n        textX = Math.min(\n          width + Math.max(20, textWidth) + offsetX,\n          (canvas.width - textWidth - 10) / scale\n        );\n\n        ctx.fillStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.fillText(`${distance}mm`, textX, currentY);\n      }\n    }\n\n    let currentX = offsetX;\n\n    for (const key in verticalDistances) {\n      const distance = verticalDistances[key];\n      if (distance !== null) {\n        currentX += distance;\n        const isBeyondBounds = currentX > width + offsetX;\n\n        ctx.beginPath();\n        ctx.moveTo(currentX, offsetY);\n        ctx.lineTo(currentX, height + offsetY);\n        ctx.strokeStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.stroke();\n\n        textWidth = ctx.measureText(`${distance}mm`).width;\n\n        textY = Math.min(\n          height + Math.max(30, textWidth) + offsetY,\n          (canvas.height - textWidth - 10) / scale\n        );\n\n        ctx.fillStyle = isBeyondBounds ? 'red' : 'black';\n\n        // Position text below center of line\n        ctx.fillText(\n          `${distance}mm`,\n          currentX - textWidth / 2,\n          height + offsetY + 20\n        );\n      }\n    }\n\n    // Reset canvas context\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}