{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nconst _c0 = [\"canvas\"];\nexport class HomeComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({})\n    });\n  }\n  ngOnInit() {\n    // İlgili valueChanges ve submit işlemlerini burada gerçekleştirin\n  }\n  ngAfterViewInit() {\n    // Set initial size of canvas element.\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    canvas.width = 800;\n    canvas.height = 600;\n    this.otherDataForm.get('horizontalLines')?.valueChanges.subscribe(value => {\n      this.addHorizontalDistances(value);\n    });\n    this.otherDataForm.get('verticalLines')?.valueChanges.subscribe(value => {\n      this.addVerticalDistances(value);\n    });\n    this.otherDataForm.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n  }\n  addHorizontalDistances(value) {\n    throw new Error('Method not implemented.');\n  }\n  addVerticalDistances(value) {\n    throw new Error('Method not implemented.');\n  }\n  onSubmit() {\n    // İlgili submit işlemlerini burada gerçekleştirin\n    // Grafiği temizleyin\n    this.chart.data.labels = [];\n    this.chart.data.datasets = [];\n    this.chart.update();\n  }\n  drawRectangle() {\n    const width = this.otherDataForm.value.width;\n    const height = this.otherDataForm.value.height;\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n    if (!width || !height) {\n      return;\n    }\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    // Dikdörtgeni çiz\n    ctx?.clearRect(0, 0, canvas.width, canvas.height);\n    ctx?.beginPath();\n    ctx?.rect(centerX - width / 2, centerY - height / 2, width, height);\n    ctx?.stroke();\n    // Horizontal çizgileri çiz ve etiketleri ekle\n    const horizontalLineCount = parseInt(this.otherDataForm.value.horizontalLines, 10);\n    const horizontalLineSpacing = height / (horizontalLineCount + 1);\n    for (let i = 1; i <= horizontalLineCount; i++) {\n      const y = centerY - height / 2 + i * horizontalLineSpacing;\n      ctx?.beginPath();\n      ctx?.moveTo(centerX - width / 2, y);\n      ctx?.lineTo(centerX + width / 2, y);\n      ctx?.stroke();\n      const distance = horizontalDistances[i];\n      const textX = centerX + width / 2 + 10;\n      const textY = y;\n      ctx?.fillText(distance, textX, textY);\n    }\n    // Vertical çizgileri çiz ve etiketleri ekle\n    const verticalLineCount = parseInt(this.otherDataForm.value.verticalLines, 10);\n    const verticalLineSpacing = width / (verticalLineCount + 1);\n    for (let i = 1; i <= verticalLineCount; i++) {\n      const x = centerX - width / 2 + i * verticalLineSpacing;\n      ctx?.beginPath();\n      ctx?.moveTo(x, centerY - height / 2);\n      ctx?.lineTo(x, centerY + height / 2);\n      ctx?.stroke();\n      const distance = verticalDistances[i];\n      const textX = x;\n      const textY = centerY + height / 2 + 20;\n      ctx?.fillText(distance, textX, textY);\n    }\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  viewQuery: function HomeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n    }\n  },\n  decls: 4,\n  vars: 0,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [\"canvas\", \"\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"canvas\", null, 2);\n      i0.ɵɵelementEnd()();\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["HomeComponent","constructor","formBuilder","otherDataForm","group","width","height","horizontalLines","verticalLines","horizontalDistances","verticalDistances","ngOnInit","ngAfterViewInit","canvas","nativeElement","ctx","getContext","get","valueChanges","subscribe","value","addHorizontalDistances","addVerticalDistances","drawRectangle","Error","onSubmit","chart","data","labels","datasets","update","centerX","centerY","clearRect","beginPath","rect","stroke","horizontalLineCount","parseInt","horizontalLineSpacing","i","y","moveTo","lineTo","distance","textX","textY","fillText","verticalLineCount","verticalLineSpacing","x","selectors","viewQuery","i0"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport Chart from 'chart.js/auto';\n\n@Component({\n  selector: 'app-home',\n  template: `\n    <div style=\"display: flex; justify-content: space-between; align-items: center; height: 100vh;\">\n      <div class=\"col-md-4\">\n        <canvas #canvas></canvas>\n      </div>\n      <!-- Form kısmı buraya gelecek -->\n    </div>\n  `,\n})\nexport class HomeComponent implements OnInit {\n  @ViewChild('canvas') canvas!: ElementRef<HTMLCanvasElement>;\n  otherDataForm: FormGroup;\n  chart!: Chart;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({}),\n    });\n  }\n\n  ngOnInit(): void {\n    // İlgili valueChanges ve submit işlemlerini burada gerçekleştirin\n  }\n\n  ngAfterViewInit(): void {\n    // Set initial size of canvas element.\n    const canvas = this.canvas.nativeElement as HTMLCanvasElement;\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) return;\n\n    canvas.width = 800;\n    canvas.height = 600;\n\n    this.otherDataForm.get('horizontalLines')?.valueChanges.subscribe((value) => {\n      this.addHorizontalDistances(value);\n    });\n\n    this.otherDataForm.get('verticalLines')?.valueChanges.subscribe((value) => {\n      this.addVerticalDistances(value);\n    });\n\n    this.otherDataForm.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n  }\n  addHorizontalDistances(value: any) {\n    throw new Error('Method not implemented.');\n  }\n  addVerticalDistances(value: any) {\n    throw new Error('Method not implemented.');\n  }\n\n  onSubmit(): void {\n    // İlgili submit işlemlerini burada gerçekleştirin\n\n    // Grafiği temizleyin\n    this.chart.data.labels = [];\n    this.chart.data.datasets = [];\n    this.chart.update();\n  }\n\n  drawRectangle(): void {\n    const width = this.otherDataForm.value.width;\n    const height = this.otherDataForm.value.height;\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n\n    if (!width || !height) {\n      return;\n    }\n\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n\n    // Dikdörtgeni çiz\n    ctx?.clearRect(0, 0, canvas.width, canvas.height);\n    ctx?.beginPath();\n    ctx?.rect(centerX - width / 2, centerY - height / 2, width, height);\n    ctx?.stroke();\n\n    // Horizontal çizgileri çiz ve etiketleri ekle\n    const horizontalLineCount = parseInt(this.otherDataForm.value.horizontalLines, 10);\n    const horizontalLineSpacing = height / (horizontalLineCount + 1);\n\n    for (let i = 1; i <= horizontalLineCount; i++) {\n      const y = centerY - height / 2 + i * horizontalLineSpacing;\n      ctx?.beginPath();\n      ctx?.moveTo(centerX - width / 2, y);\n      ctx?.lineTo(centerX + width / 2, y);\n      ctx?.stroke();\n\n      const distance = horizontalDistances[i];\n      const textX = centerX + width / 2 + 10;\n      const textY = y;\n      ctx?.fillText(distance, textX, textY);\n    }\n\n    // Vertical çizgileri çiz ve etiketleri ekle\n    const verticalLineCount = parseInt(this.otherDataForm.value.verticalLines, 10);\n    const verticalLineSpacing = width / (verticalLineCount + 1);\n\n    for (let i = 1; i <= verticalLineCount; i++) {\n      const x = centerX - width / 2 + i * verticalLineSpacing;\n      ctx?.beginPath();\n      ctx?.moveTo(x, centerY - height / 2);\n      ctx?.lineTo(x, centerY + height / 2);\n      ctx?.stroke();\n\n      const distance = verticalDistances[i];\n      const textX = x;\n      const textY = centerY + height / 2 + 20;\n      ctx?.fillText(distance, textX, textY);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}