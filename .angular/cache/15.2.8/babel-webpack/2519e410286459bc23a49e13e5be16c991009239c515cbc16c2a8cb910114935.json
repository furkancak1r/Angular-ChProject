{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"canvas\"];\nfunction HomeComponent_ng_container_12_ng_container_7_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r6 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r6 === 0 ? \"Yataydaki 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Yataydaki \" + (i_r6 + 1) + \". \\u00E7izginin \" + i_r6 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r6);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r6);\n  }\n}\nfunction HomeComponent_ng_container_12_ng_container_7_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r8 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r8 === 0 ? \"Dikeyde 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Dikeyde \" + (i_r8 + 1) + \". \\u00E7izginin \" + i_r8 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r8);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r8);\n  }\n}\nfunction HomeComponent_ng_container_12_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 14);\n    i0.ɵɵtemplate(2, HomeComponent_ng_container_12_ng_container_7_ng_container_2_Template, 4, 3, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 16);\n    i0.ɵɵtemplate(4, HomeComponent_ng_container_12_ng_container_7_ng_container_4_Template, 4, 3, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getLinesArray(ctx_r2.otherDataForm.controls[\"horizontalLines\"].value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getLinesArray(ctx_r2.otherDataForm.controls[\"verticalLines\"].value));\n  }\n}\nfunction HomeComponent_ng_container_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\", 10);\n    i0.ɵɵtext(2, \"Yatayda ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 11);\n    i0.ɵɵelementStart(4, \"label\", 12);\n    i0.ɵɵtext(5, \"Dikeyde ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 13);\n    i0.ɵɵtemplate(7, HomeComponent_ng_container_12_ng_container_7_Template, 5, 2, \"ng-container\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.otherDataForm.controls[\"horizontalLines\"].value > 0 && ctx_r1.otherDataForm.controls[\"verticalLines\"].value > 0);\n  }\n}\nexport class HomeComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({})\n    });\n  }\n  ngOnInit() {\n    // Subscribe to valueChanges observable of horizontalLines form control\n    this.otherDataForm.get('horizontalLines')?.valueChanges.subscribe(value => {\n      // Call addHorizontalDistances() with the new value of horizontalLines form control\n      this.addHorizontalDistances(value);\n    });\n    // Subscribe to valueChanges observable of verticalLines form control\n    this.otherDataForm.get('verticalLines')?.valueChanges.subscribe(value => {\n      // Call addVerticalDistances() with the new value of verticalLines form control\n      this.addVerticalDistances(value);\n    });\n    // Subscribe to valueChanges observable of otherDataForm and call drawRectangle() method when any value changes.\n    this.otherDataForm.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n  }\n  ngAfterViewInit() {\n    // Set initial size of canvas element based on parent element size\n    const canvas = this.canvas.nativeElement;\n    const parentElement = canvas.parentElement;\n    if (parentElement) {\n      canvas.width = parentElement.clientWidth;\n      canvas.height = parentElement.clientHeight;\n    }\n  }\n  onSubmit() {\n    // Access the values of distances for horizontal and vertical lines\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n    // Log the distances for horizontal and vertical lines\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n    // Clear the form after submission (optional)\n    this.otherDataForm.reset();\n  }\n  getLinesArray(lineCount) {\n    return Array(lineCount).fill(0).map((_, index) => index + 1);\n  }\n  addHorizontalDistances(count) {\n    const horizontalDistances = this.otherDataForm.get('horizontalDistances');\n    horizontalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      horizontalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n  }\n  addVerticalDistances(count) {\n    const verticalDistances = this.otherDataForm.get('verticalDistances');\n    verticalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      verticalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n  }\n  drawRectangle() {\n    const width = this.otherDataForm.value.width;\n    const height = this.otherDataForm.value.height;\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n    if (!width || !height) return;\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    // Calculate scale factor based on parent element size\n    const scaleFactor = Math.min(canvas.width / (width + 200), canvas.height / (height + 200));\n    // Calculate offset for centering\n    const offsetX = (canvas.width - width * scaleFactor) / 2;\n    const offsetY = (canvas.height - height * scaleFactor) / 2;\n    // Scale and center rectangle\n    ctx.beginPath();\n    ctx.rect(offsetX, offsetY, width * scaleFactor, height * scaleFactor);\n    ctx.stroke();\n    // Scale and center text\n    ctx.font = '16px sans-serif';\n    // Calculate text width and adjust position accordingly\n    let textWidth = ctx.measureText(`Width: ${width}mm`).width;\n    let textX = Math.min(offsetX + width * scaleFactor + 20, canvas.width - textWidth - 10);\n    // Check if text overlaps with rectangle and adjust position accordingly\n    if (textX < offsetX + width * scaleFactor) {\n      textX = offsetX + width * scaleFactor + 20;\n    }\n    ctx.fillText(`Width: ${width}mm`, textX, offsetY + height * scaleFactor / 2);\n    // Calculate text width and adjust position accordingly\n    textWidth = ctx.measureText(`Height: ${height}mm`).width;\n    textX = Math.min(offsetX + width * scaleFactor / 2, canvas.width - textWidth - 10);\n    // Check if text overlaps with rectangle and adjust position accordingly\n    if (textX < offsetX + width * scaleFactor) {\n      textX = offsetX + width * scaleFactor + 20;\n    }\n    ctx.fillText(`Height: ${height}mm`, textX, offsetY + height * scaleFactor + 30);\n    let currentY = offsetY;\n    for (const key in horizontalDistances) {\n      const distance = horizontalDistances[key];\n      if (distance !== null) {\n        currentY += distance * scaleFactor;\n        const isBeyondBounds = currentY > height * scaleFactor + offsetY;\n        ctx.beginPath();\n        ctx.moveTo(offsetX, currentY);\n        ctx.lineTo(offsetX + width * scaleFactor, currentY);\n        ctx.strokeStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.stroke();\n        // Calculate text width and adjust position accordingly\n        textWidth = ctx.measureText(`${distance}mm`).width;\n        textX = Math.min(offsetX + width * scaleFactor + Math.max(20, textWidth), canvas.width - textWidth - 10);\n        // Check if text overlaps with rectangle and adjust position accordingly\n        if (textX < offsetX + width * scaleFactor) {\n          textX = offsetX + width * scaleFactor + 20;\n        }\n        ctx.fillStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.fillText(`${distance}mm`, textX, currentY);\n      }\n    }\n    let currentX = offsetX;\n    for (const key in verticalDistances) {\n      const distance = verticalDistances[key];\n      if (distance !== null) {\n        currentX += distance * scaleFactor;\n        const isBeyondBounds = currentX > width * scaleFactor + offsetX;\n        ctx.beginPath();\n        ctx.moveTo(currentX, offsetY);\n        ctx.lineTo(currentX, offsetY + height * scaleFactor);\n        ctx.strokeStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.stroke();\n        // Calculate text width and adjust position accordingly\n        textWidth = ctx.measureText(`${distance}mm`).width;\n        textX = Math.min(currentX - textWidth / 2, canvas.width - textWidth - 10);\n        // Check if text overlaps with rectangle and adjust position accordingly\n        if (textX < offsetX + width * scaleFactor) {\n          textX = offsetX + width * scaleFactor + 20;\n        }\n        ctx.fillStyle = isBeyondBounds ? 'red' : 'black';\n        ctx.fillText(`${distance}mm`, textX, offsetY + height * scaleFactor + Math.max(30, textWidth));\n      }\n    }\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  viewQuery: function HomeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n    }\n  },\n  decls: 15,\n  vars: 2,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [\"canvas\", \"\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"width\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"width\", \"name\", \"width\", \"formControlName\", \"width\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"height\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"height\", \"name\", \"height\", \"formControlName\", \"height\", 1, \"form-control\", \"form-control-sm\"], [4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"for\", \"horizontalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"horizontalLines\", \"name\", \"horizontalLines\", \"formControlName\", \"horizontalLines\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"verticalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"verticalLines\", \"name\", \"verticalLines\", \"formControlName\", \"verticalLines\", 1, \"form-control\", \"form-control-sm\"], [\"formGroupName\", \"horizontalDistances\"], [4, \"ngFor\", \"ngForOf\"], [\"formGroupName\", \"verticalDistances\"], [\"type\", \"number\", 1, \"form-control\", \"form-control-sm\", 3, \"name\", \"formControlName\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"canvas\", null, 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 1)(5, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(6, \"label\", 4);\n      i0.ɵɵtext(7, \"Dikd\\u00F6rtgenin geni\\u015Fli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 5);\n      i0.ɵɵelementStart(9, \"label\", 6);\n      i0.ɵɵtext(10, \"Dikd\\u00F6rtgenin y\\u00FCksekli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 7);\n      i0.ɵɵtemplate(12, HomeComponent_ng_container_12_Template, 8, 1, \"ng-container\", 8);\n      i0.ɵɵelementStart(13, \"button\", 9);\n      i0.ɵɵtext(14, \"G\\u00F6nder\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.otherDataForm.controls[\"width\"].value > 0 && ctx.otherDataForm.controls[\"height\"].value > 0);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;;;IAuEgBA,6BAOC;IAECA,6BAAO;IACLA,YASA;IAAAA,4BAKE;IACJA,iBAAQ;IACVA,0BAAe;;;;IAhBXA,eASA;IATAA,2QASA;IAEEA,eAA4B;IAA5BA,oDAA4B;IAE5BA,+DAAuC;;;;;IAO7CA,6BAOC;IAECA,6BAAO;IACLA,YASA;IAAAA,4BAKE;IACJA,iBAAQ;IACVA,0BAAe;;;;IAhBXA,eASA;IATAA,uQASA;IAEEA,eAA4B;IAA5BA,oDAA4B;IAE5BA,+DAAuC;;;;;IA5DjDA,6BAKC;IACCA,+BAAyC;IACvCA,gHA0Be;IACjBA,iBAAM;IAENA,+BAAuC;IACrCA,gHA0Be;IACjBA,iBAAM;IACRA,0BAAe;;;;IAxDuBA,eAI3C;IAJ2CA,sGAI3C;IA0B2CA,eAI3C;IAJ2CA,oGAI3C;;;;;IAvEGA,6BAKC;IACCA,iCACG;IAAAA,uDAA6B;IAAAA,iBAC/B;IACDA,4BAME;IAEFA,iCACG;IAAAA,uDAA6B;IAAAA,iBAC/B;IACDA,4BAME;IAEFA,gGAiEe;IACjBA,0BAAe;;;;IAjEVA,eAIf;IAJeA,6IAIf;;;AAqEA,OAAM,MAAOC,aAAa;EAIxBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAC7B,IAAI,CAACC,aAAa,GAAG,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;MAC1CC,KAAK,EAAE,IAAI;MACXC,MAAM,EAAE,IAAI;MACZC,eAAe,EAAE,IAAI;MACrBC,aAAa,EAAE,IAAI;MACnBC,mBAAmB,EAAE,IAAI,CAACP,WAAW,CAACE,KAAK,CAAC,EAAE,CAAC;MAC/CM,iBAAiB,EAAE,IAAI,CAACR,WAAW,CAACE,KAAK,CAAC,EAAE;KAC7C,CAAC;EACJ;EAEAO,QAAQ;IACN;IACA,IAAI,CAACR,aAAa,CACfS,GAAG,CAAC,iBAAiB,CAAC,EACrBC,YAAY,CAACC,SAAS,CAAEC,KAAK,IAAI;MACjC;MACA,IAAI,CAACC,sBAAsB,CAACD,KAAK,CAAC;IACpC,CAAC,CAAC;IAEJ;IACA,IAAI,CAACZ,aAAa,CAACS,GAAG,CAAC,eAAe,CAAC,EAAEC,YAAY,CAACC,SAAS,CAAEC,KAAK,IAAI;MACxE;MACA,IAAI,CAACE,oBAAoB,CAACF,KAAK,CAAC;IAClC,CAAC,CAAC;IAEF;IACA,IAAI,CAACZ,aAAa,CAACU,YAAY,CAACC,SAAS,CAAC,MAAK;MAC7C,IAAI,CAACI,aAAa,EAAE;IACtB,CAAC,CAAC;EACJ;EAEAC,eAAe;IACb;IACA,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACC,aAAa;IACxC,MAAMC,aAAa,GAAGF,MAAM,CAACE,aAAa;IAC1C,IAAIA,aAAa,EAAE;MACjBF,MAAM,CAACf,KAAK,GAAGiB,aAAa,CAACC,WAAW;MACxCH,MAAM,CAACd,MAAM,GAAGgB,aAAa,CAACE,YAAY;;EAE9C;EAEAC,QAAQ;IACN;IACA,MAAMhB,mBAAmB,GAAG,IAAI,CAACN,aAAa,CAACY,KAAK,CAACN,mBAAmB;IACxE,MAAMC,iBAAiB,GAAG,IAAI,CAACP,aAAa,CAACY,KAAK,CAACL,iBAAiB;IAEpE;IACAgB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAElB,mBAAmB,CAAC;IACzDiB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEjB,iBAAiB,CAAC;IAErD;IACA,IAAI,CAACP,aAAa,CAACyB,KAAK,EAAE;EAC5B;EAEAC,aAAa,CAACC,SAAiB;IAC7B,OAAOC,KAAK,CAACD,SAAS,CAAC,CACpBE,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,GAAG,CAAC,CAAC;EACjC;EAEAnB,sBAAsB,CAACoB,KAAa;IAClC,MAAM3B,mBAAmB,GAAG,IAAI,CAACN,aAAa,CAACS,GAAG,CAChD,qBAAqB,CACT;IACdH,mBAAmB,CAACmB,KAAK,EAAE;IAC3B,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,EAAEC,CAAC,EAAE,EAAE;MAC9B5B,mBAAmB,CAAC6B,UAAU,CAC5B,YAAYD,CAAC,EAAE,EACf,IAAI,CAACnC,WAAW,CAACqC,OAAO,CAAC,IAAI,CAAC,CAC/B;;EAEL;EAEAtB,oBAAoB,CAACmB,KAAa;IAChC,MAAM1B,iBAAiB,GAAG,IAAI,CAACP,aAAa,CAACS,GAAG,CAC9C,mBAAmB,CACP;IACdF,iBAAiB,CAACkB,KAAK,EAAE;IACzB,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,EAAEC,CAAC,EAAE,EAAE;MAC9B3B,iBAAiB,CAAC4B,UAAU,CAC1B,YAAYD,CAAC,EAAE,EACf,IAAI,CAACnC,WAAW,CAACqC,OAAO,CAAC,IAAI,CAAC,CAC/B;;EAEL;EAEArB,aAAa;IACX,MAAMb,KAAK,GAAG,IAAI,CAACF,aAAa,CAACY,KAAK,CAACV,KAAK;IAC5C,MAAMC,MAAM,GAAG,IAAI,CAACH,aAAa,CAACY,KAAK,CAACT,MAAM;IAC9C,MAAMG,mBAAmB,GAAG,IAAI,CAACN,aAAa,CAACY,KAAK,CAACN,mBAAmB;IACxE,MAAMC,iBAAiB,GAAG,IAAI,CAACP,aAAa,CAACY,KAAK,CAACL,iBAAiB;IAEpE,IAAI,CAACL,KAAK,IAAI,CAACC,MAAM,EAAE;IAEvB,MAAMc,MAAM,GAAG,IAAI,CAACA,MAAM,CAACC,aAAa;IACxC,MAAMmB,GAAG,GAAGpB,MAAM,CAACqB,UAAU,CAAC,IAAI,CAAC;IAEnC,IAAI,CAACD,GAAG,EAAE;IAEVA,GAAG,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEtB,MAAM,CAACf,KAAK,EAAEe,MAAM,CAACd,MAAM,CAAC;IAEhD;IACA,MAAMqC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAC1BzB,MAAM,CAACf,KAAK,IAAIA,KAAK,GAAG,GAAG,CAAC,EAC5Be,MAAM,CAACd,MAAM,IAAIA,MAAM,GAAG,GAAG,CAAC,CAC/B;IAED;IACA,MAAMwC,OAAO,GAAG,CAAC1B,MAAM,CAACf,KAAK,GAAGA,KAAK,GAAGsC,WAAW,IAAI,CAAC;IACxD,MAAMI,OAAO,GAAG,CAAC3B,MAAM,CAACd,MAAM,GAAGA,MAAM,GAAGqC,WAAW,IAAI,CAAC;IAE1D;IACAH,GAAG,CAACQ,SAAS,EAAE;IACfR,GAAG,CAACS,IAAI,CACNH,OAAO,EACPC,OAAO,EACP1C,KAAK,GAAGsC,WAAW,EACnBrC,MAAM,GAAGqC,WAAW,CACrB;IACDH,GAAG,CAACU,MAAM,EAAE;IAEX;IACAV,GAAG,CAACW,IAAI,GAAG,iBAAiB;IAE5B;IACA,IAAIC,SAAS,GAAGZ,GAAG,CAACa,WAAW,CAAC,UAAUhD,KAAK,IAAI,CAAC,CAACA,KAAK;IAC1D,IAAIiD,KAAK,GAAGV,IAAI,CAACC,GAAG,CAClBC,OAAO,GAAGzC,KAAK,GAAGsC,WAAW,GAAE,EAAE,EACjCvB,MAAM,CAACf,KAAK,GAAE+C,SAAS,GAAE,EAAE,CAC5B;IAED;IACA,IAAGE,KAAK,GAAGR,OAAO,GAAGzC,KAAK,GAAGsC,WAAW,EAAC;MACvCW,KAAK,GAAGR,OAAO,GAAGzC,KAAK,GAAGsC,WAAW,GAAE,EAAE;;IAG3CH,GAAG,CAACe,QAAQ,CACV,UAAUlD,KAAK,IAAI,EACnBiD,KAAK,EACLP,OAAO,GAAGzC,MAAM,GAAGqC,WAAW,GAAE,CAAC,CAClC;IAED;IACAS,SAAS,GAAGZ,GAAG,CAACa,WAAW,CAAC,WAAW/C,MAAM,IAAI,CAAC,CAACD,KAAK;IACxDiD,KAAK,GAAGV,IAAI,CAACC,GAAG,CACdC,OAAO,GAAGzC,KAAK,GAAGsC,WAAW,GAAE,CAAC,EAChCvB,MAAM,CAACf,KAAK,GAAE+C,SAAS,GAAE,EAAE,CAC5B;IAED;IACA,IAAGE,KAAK,GAAGR,OAAO,GAAGzC,KAAK,GAAGsC,WAAW,EAAC;MACvCW,KAAK,GAAGR,OAAO,GAAGzC,KAAK,GAAGsC,WAAW,GAAE,EAAE;;IAG3CH,GAAG,CAACe,QAAQ,CACV,WAAWjD,MAAM,IAAI,EACrBgD,KAAK,EACLP,OAAO,GAAGzC,MAAM,GAAGqC,WAAW,GAAE,EAAE,CACnC;IAED,IAAIa,QAAQ,GAAGT,OAAO;IACtB,KAAK,MAAMU,GAAG,IAAIhD,mBAAmB,EAAE;MACrC,MAAMiD,QAAQ,GAAGjD,mBAAmB,CAACgD,GAAG,CAAC;MACzC,IAAIC,QAAQ,KAAK,IAAI,EAAE;QACrBF,QAAQ,IAAIE,QAAQ,GAAGf,WAAW;QAClC,MAAMgB,cAAc,GAClBH,QAAQ,GAAGlD,MAAM,GAAGqC,WAAW,GAAGI,OAAO;QAE3CP,GAAG,CAACQ,SAAS,EAAE;QACfR,GAAG,CAACoB,MAAM,CAACd,OAAO,EAAEU,QAAQ,CAAC;QAC7BhB,GAAG,CAACqB,MAAM,CAACf,OAAO,GAAGzC,KAAK,GAAGsC,WAAW,EAAEa,QAAQ,CAAC;QACnDhB,GAAG,CAACsB,WAAW,GAAGH,cAAc,GAAG,KAAK,GAAG,OAAO;QAClDnB,GAAG,CAACU,MAAM,EAAE;QAEZ;QACAE,SAAS,GAAGZ,GAAG,CAACa,WAAW,CAAC,GAAGK,QAAQ,IAAI,CAAC,CAACrD,KAAK;QAClDiD,KAAK,GAAGV,IAAI,CAACC,GAAG,CACdC,OAAO,GACLzC,KAAK,GAAGsC,WAAW,GACnBC,IAAI,CAACmB,GAAG,CAAC,EAAE,EAAEX,SAAS,CAAC,EACzBhC,MAAM,CAACf,KAAK,GAAE+C,SAAS,GAAE,EAAE,CAC5B;QAED;QACA,IAAGE,KAAK,GAAGR,OAAO,GAAGzC,KAAK,GAAGsC,WAAW,EAAC;UACvCW,KAAK,GAAGR,OAAO,GAAGzC,KAAK,GAAGsC,WAAW,GAAE,EAAE;;QAG3CH,GAAG,CAACwB,SAAS,GAAGL,cAAc,GAAG,KAAK,GAAG,OAAO;QAChDnB,GAAG,CAACe,QAAQ,CAAC,GAAGG,QAAQ,IAAI,EAAEJ,KAAK,EAAEE,QAAQ,CAAC;;;IAIlD,IAAIS,QAAQ,GAAGnB,OAAO;IACtB,KAAK,MAAMW,GAAG,IAAI/C,iBAAiB,EAAE;MACnC,MAAMgD,QAAQ,GAAGhD,iBAAiB,CAAC+C,GAAG,CAAC;MACvC,IAAIC,QAAQ,KAAK,IAAI,EAAE;QACrBO,QAAQ,IAAIP,QAAQ,GAAGf,WAAW;QAClC,MAAMgB,cAAc,GAClBM,QAAQ,GAAG5D,KAAK,GAAGsC,WAAW,GAAGG,OAAO;QAE1CN,GAAG,CAACQ,SAAS,EAAE;QACfR,GAAG,CAACoB,MAAM,CAACK,QAAQ,EAAElB,OAAO,CAAC;QAC7BP,GAAG,CAACqB,MAAM,CAACI,QAAQ,EAAElB,OAAO,GAAGzC,MAAM,GAAGqC,WAAW,CAAC;QACpDH,GAAG,CAACsB,WAAW,GAAGH,cAAc,GAAG,KAAK,GAAG,OAAO;QAClDnB,GAAG,CAACU,MAAM,EAAE;QAEZ;QACAE,SAAS,GAAGZ,GAAG,CAACa,WAAW,CAAC,GAAGK,QAAQ,IAAI,CAAC,CAACrD,KAAK;QAClDiD,KAAK,GAAGV,IAAI,CAACC,GAAG,CACdoB,QAAQ,GAAEb,SAAS,GAAE,CAAC,EACtBhC,MAAM,CAACf,KAAK,GAAE+C,SAAS,GAAE,EAAE,CAC5B;QAEA;QACA,IAAGE,KAAK,GAAGR,OAAO,GAAGzC,KAAK,GAAGsC,WAAW,EAAC;UACvCW,KAAK,GAAGR,OAAO,GAAGzC,KAAK,GAAGsC,WAAW,GAAE,EAAE;;QAG3CH,GAAG,CAACwB,SAAS,GAAGL,cAAc,GAAG,KAAK,GAAG,OAAO;QAChDnB,GAAG,CAACe,QAAQ,CACV,GAAGG,QAAQ,IAAI,EACfJ,KAAK,EACLP,OAAO,GACLzC,MAAM,GAAGqC,WAAW,GACpBC,IAAI,CAACmB,GAAG,CAAC,EAAE,EAAEX,SAAS,CAAC,CAC1B;;;EAGT;;AA1OWpD,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAkE;EAAAC;IAAA;;;;;;;;;;;;;MApItBpE,8BAEC;MAEGA,kCAAyB;MAC3BA,iBAAM;MACNA,8BAAsB;MAGlBA;QAAA,OAAYyC,cAAU;MAAA,EAAC;MAGvBzC,gCAAgC;MAAAA,2DAA4B;MAAAA,iBAAQ;MACpEA,2BAME;MAEFA,gCAAiC;MAAAA,6DAA6B;MAAAA,iBAAQ;MACtEA,4BAME;MAEFA,kFA8Fe;MAEfA,kCAA8C;MAAAA,4BAAM;MAAAA,iBAAS;;;MAtH7DA,eAA2B;MAA3BA,6CAA2B;MAuBxBA,eAIb;MAJaA,sHAIb","names":["i0","HomeComponent","constructor","formBuilder","otherDataForm","group","width","height","horizontalLines","verticalLines","horizontalDistances","verticalDistances","ngOnInit","get","valueChanges","subscribe","value","addHorizontalDistances","addVerticalDistances","drawRectangle","ngAfterViewInit","canvas","nativeElement","parentElement","clientWidth","clientHeight","onSubmit","console","log","reset","getLinesArray","lineCount","Array","fill","map","_","index","count","i","addControl","control","ctx","getContext","clearRect","scaleFactor","Math","min","offsetX","offsetY","beginPath","rect","stroke","font","textWidth","measureText","textX","fillText","currentY","key","distance","isBeyondBounds","moveTo","lineTo","strokeStyle","max","fillStyle","currentX","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-home',\n  template: `\n    <div\n      style=\"display: flex; justify-content: space-between; align-items: center; height: 100vh;\"\n    >\n      <div class=\"col-md-4\">\n        <canvas #canvas></canvas>\n      </div>\n      <div class=\"col-md-4\">\n        <form\n          [formGroup]=\"otherDataForm\"\n          (ngSubmit)=\"onSubmit()\"\n          class=\"form-group mb-3\"\n        >\n          <label for=\"width\" class=\"mr-2\">Dikdörtgenin genişliği (mm):</label>\n          <input\n            type=\"number\"\n            id=\"width\"\n            name=\"width\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"width\"\n          />\n\n          <label for=\"height\" class=\"mr-2\">Dikdörtgenin yüksekliği (mm):</label>\n          <input\n            type=\"number\"\n            id=\"height\"\n            name=\"height\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"height\"\n          />\n\n          <ng-container\n            *ngIf=\"\n              otherDataForm.controls['width'].value > 0 &&\n              otherDataForm.controls['height'].value > 0\n            \"\n          >\n            <label for=\"horizontalLines\" class=\"mr-2\"\n              >Yatayda kaç adet çizgi olsun:</label\n            >\n            <input\n              type=\"number\"\n              id=\"horizontalLines\"\n              name=\"horizontalLines\"\n              class=\"form-control form-control-sm\"\n              formControlName=\"horizontalLines\"\n            />\n\n            <label for=\"verticalLines\" class=\"mr-2\"\n              >Dikeyde kaç adet çizgi olsun:</label\n            >\n            <input\n              type=\"number\"\n              id=\"verticalLines\"\n              name=\"verticalLines\"\n              class=\"form-control form-control-sm\"\n              formControlName=\"verticalLines\"\n            />\n\n            <ng-container\n              *ngIf=\"\n                otherDataForm.controls['horizontalLines'].value > 0 &&\n                otherDataForm.controls['verticalLines'].value > 0\n              \"\n            >\n              <div formGroupName=\"horizontalDistances\">\n                <ng-container\n                  *ngFor=\"\n                    let line of this.getLinesArray(\n                      otherDataForm.controls['horizontalLines'].value\n                    );\n                    let i = index\n                  \"\n                >\n                  <!-- this anahtar kelimesini ekledim -->\n                  <label>\n                    {{\n                      i === 0\n                        ? 'Yataydaki 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:'\n                        : 'Yataydaki ' +\n                          (i + 1) +\n                          '. çizginin ' +\n                          i +\n                          '. çizgi ile arasındaki mesafe kaç mm olmalı:'\n                    }}\n                    <input\n                      type=\"number\"\n                      name=\"{{ 'distance_' + i }}\"\n                      class=\"form-control form-control-sm\"\n                      formControlName=\"{{ 'distance_' + i }}\"\n                    />\n                  </label>\n                </ng-container>\n              </div>\n\n              <div formGroupName=\"verticalDistances\">\n                <ng-container\n                  *ngFor=\"\n                    let line of this.getLinesArray(\n                      otherDataForm.controls['verticalLines'].value\n                    );\n                    let i = index\n                  \"\n                >\n                  <!-- this anahtar kelimesini ekledim -->\n                  <label>\n                    {{\n                      i === 0\n                        ? 'Dikeyde 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:'\n                        : 'Dikeyde ' +\n                          (i + 1) +\n                          '. çizginin ' +\n                          i +\n                          '. çizgi ile arasındaki mesafe kaç mm olmalı:'\n                    }}\n                    <input\n                      type=\"number\"\n                      name=\"{{ 'distance_' + i }}\"\n                      class=\"form-control form-control-sm\"\n                      formControlName=\"{{ 'distance_' + i }}\"\n                    />\n                  </label>\n                </ng-container>\n              </div>\n            </ng-container>\n          </ng-container>\n\n          <button type=\"submit\" class=\"btn btn-primary\">Gönder</button>\n        </form>\n      </div>\n    </div>\n  `,\n})\nexport class HomeComponent implements OnInit {\n  @ViewChild('canvas') canvas!: ElementRef<HTMLCanvasElement>;\n  otherDataForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({}),\n    });\n  }\n\n  ngOnInit(): void {\n    // Subscribe to valueChanges observable of horizontalLines form control\n    this.otherDataForm\n      .get('horizontalLines')\n      ?.valueChanges.subscribe((value) => {\n        // Call addHorizontalDistances() with the new value of horizontalLines form control\n        this.addHorizontalDistances(value);\n      });\n\n    // Subscribe to valueChanges observable of verticalLines form control\n    this.otherDataForm.get('verticalLines')?.valueChanges.subscribe((value) => {\n      // Call addVerticalDistances() with the new value of verticalLines form control\n      this.addVerticalDistances(value);\n    });\n\n    // Subscribe to valueChanges observable of otherDataForm and call drawRectangle() method when any value changes.\n    this.otherDataForm.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n  }\n\n  ngAfterViewInit(): void {\n    // Set initial size of canvas element based on parent element size\n    const canvas = this.canvas.nativeElement;\n    const parentElement = canvas.parentElement;\n    if (parentElement) {\n      canvas.width = parentElement.clientWidth;\n      canvas.height = parentElement.clientHeight;\n    }\n  }\n\n  onSubmit(): void {\n    // Access the values of distances for horizontal and vertical lines\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n\n    // Log the distances for horizontal and vertical lines\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n\n    // Clear the form after submission (optional)\n    this.otherDataForm.reset();\n  }\n\n  getLinesArray(lineCount: number): number[] {\n    return Array(lineCount)\n      .fill(0)\n      .map((_, index) => index + 1);\n  }\n\n  addHorizontalDistances(count: number): void {\n    const horizontalDistances = this.otherDataForm.get(\n      'horizontalDistances'\n    ) as FormGroup;\n    horizontalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      horizontalDistances.addControl(\n        `distance_${i}`,\n        this.formBuilder.control(null)\n      );\n    }\n  }\n\n  addVerticalDistances(count: number): void {\n    const verticalDistances = this.otherDataForm.get(\n      'verticalDistances'\n    ) as FormGroup;\n    verticalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      verticalDistances.addControl(\n        `distance_${i}`,\n        this.formBuilder.control(null)\n      );\n    }\n  }\n\n  drawRectangle(): void {\n    const width = this.otherDataForm.value.width;\n    const height = this.otherDataForm.value.height;\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n\n    if (!width || !height) return;\n\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) return;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Calculate scale factor based on parent element size\n    const scaleFactor = Math.min(\n      canvas.width / (width + 200),\n      canvas.height / (height + 200)\n    );\n\n    // Calculate offset for centering\n    const offsetX = (canvas.width - width * scaleFactor) / 2;\n    const offsetY = (canvas.height - height * scaleFactor) / 2;\n\n    // Scale and center rectangle\n    ctx.beginPath();\n    ctx.rect(\n      offsetX,\n      offsetY,\n      width * scaleFactor,\n      height * scaleFactor\n    );\n    ctx.stroke();\n\n     // Scale and center text\n     ctx.font = '16px sans-serif';\n\n     // Calculate text width and adjust position accordingly\n     let textWidth = ctx.measureText(`Width: ${width}mm`).width;\n     let textX = Math.min(\n       offsetX + width * scaleFactor +20,\n       canvas.width -textWidth -10\n     );\n\n     // Check if text overlaps with rectangle and adjust position accordingly\n     if(textX < offsetX + width * scaleFactor){\n       textX = offsetX + width * scaleFactor +20;\n     }\n\n     ctx.fillText(\n       `Width: ${width}mm`,\n       textX,\n       offsetY + height * scaleFactor /2\n     );\n\n     // Calculate text width and adjust position accordingly\n     textWidth = ctx.measureText(`Height: ${height}mm`).width;\n     textX = Math.min(\n       offsetX + width * scaleFactor /2,\n       canvas.width -textWidth -10\n     );\n\n     // Check if text overlaps with rectangle and adjust position accordingly\n     if(textX < offsetX + width * scaleFactor){\n       textX = offsetX + width * scaleFactor +20;\n     }\n\n     ctx.fillText(\n       `Height: ${height}mm`,\n       textX,\n       offsetY + height * scaleFactor +30\n     );\n\n     let currentY = offsetY;\n     for (const key in horizontalDistances) {\n       const distance = horizontalDistances[key];\n       if (distance !== null) {\n         currentY += distance * scaleFactor;\n         const isBeyondBounds =\n           currentY > height * scaleFactor + offsetY;\n\n         ctx.beginPath();\n         ctx.moveTo(offsetX, currentY);\n         ctx.lineTo(offsetX + width * scaleFactor, currentY);\n         ctx.strokeStyle = isBeyondBounds ? 'red' : 'black';\n         ctx.stroke();\n\n         // Calculate text width and adjust position accordingly\n         textWidth = ctx.measureText(`${distance}mm`).width;\n         textX = Math.min(\n           offsetX +\n             width * scaleFactor +\n             Math.max(20, textWidth),\n           canvas.width -textWidth -10\n         );\n\n         // Check if text overlaps with rectangle and adjust position accordingly\n         if(textX < offsetX + width * scaleFactor){\n           textX = offsetX + width * scaleFactor +20;\n         }\n\n         ctx.fillStyle = isBeyondBounds ? 'red' : 'black';\n         ctx.fillText(`${distance}mm`, textX, currentY);\n       }\n     }\n\n     let currentX = offsetX;\n     for (const key in verticalDistances) {\n       const distance = verticalDistances[key];\n       if (distance !== null) {\n         currentX += distance * scaleFactor;\n         const isBeyondBounds =\n           currentX > width * scaleFactor + offsetX;\n\n         ctx.beginPath();\n         ctx.moveTo(currentX, offsetY);\n         ctx.lineTo(currentX, offsetY + height * scaleFactor);\n         ctx.strokeStyle = isBeyondBounds ? 'red' : 'black';\n         ctx.stroke();\n\n         // Calculate text width and adjust position accordingly\n         textWidth = ctx.measureText(`${distance}mm`).width;\n         textX = Math.min(\n           currentX -textWidth /2,\n           canvas.width -textWidth -10\n         );\n\n          // Check if text overlaps with rectangle and adjust position accordingly\n          if(textX < offsetX + width * scaleFactor){\n            textX = offsetX + width * scaleFactor +20;\n          }\n\n          ctx.fillStyle = isBeyondBounds ? 'red' : 'black';\n          ctx.fillText(\n            `${distance}mm`,\n            textX,\n            offsetY +\n              height * scaleFactor +\n              Math.max(30, textWidth)\n          );\n        }\n      }\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}