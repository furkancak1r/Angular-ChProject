{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction HomeComponent_ng_container_9_ng_container_7_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r5 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r5 === 0 ? \"Yataydaki 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Yataydaki \" + (i_r5 + 1) + \". \\u00E7izginin \" + i_r5 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r5);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r5);\n  }\n}\nfunction HomeComponent_ng_container_9_ng_container_7_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r7 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r7 === 0 ? \"Dikeyde 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Dikeyde \" + (i_r7 + 1) + \". \\u00E7izginin \" + i_r7 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r7);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r7);\n  }\n}\nfunction HomeComponent_ng_container_9_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 13);\n    i0.ɵɵtemplate(2, HomeComponent_ng_container_9_ng_container_7_ng_container_2_Template, 4, 3, \"ng-container\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 15);\n    i0.ɵɵtemplate(4, HomeComponent_ng_container_9_ng_container_7_ng_container_4_Template, 4, 3, \"ng-container\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getLinesArray(ctx_r1.otherDataForm.controls[\"horizontalLines\"].value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getLinesArray(ctx_r1.otherDataForm.controls[\"verticalLines\"].value));\n  }\n}\nfunction HomeComponent_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\", 9);\n    i0.ɵɵtext(2, \"Yatayda ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 10);\n    i0.ɵɵelementStart(4, \"label\", 11);\n    i0.ɵɵtext(5, \"Dikeyde ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 12);\n    i0.ɵɵtemplate(7, HomeComponent_ng_container_9_ng_container_7_Template, 5, 2, \"ng-container\", 7);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.otherDataForm.controls[\"horizontalLines\"].value > 0 && ctx_r0.otherDataForm.controls[\"verticalLines\"].value > 0);\n  }\n}\nexport class HomeComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({})\n    });\n    // Log the initial value of the horizontalDistances form group to see if it's being initialized correctly.\n    console.log('Initial value of horizontalDistances:', this.otherDataForm.value.horizontalDistances);\n  }\n  ngOnInit() {\n    // Subscribe to valueChanges observable of horizontalLines form control\n    this.otherDataForm.get('horizontalLines')?.valueChanges.subscribe(value => {\n      // Call addHorizontalDistances() with the new value of horizontalLines form control\n      this.addHorizontalDistances(value);\n    });\n    // Subscribe to valueChanges observable of verticalLines form control\n    this.otherDataForm.get('verticalLines')?.valueChanges.subscribe(value => {\n      // Call addVerticalDistances() with the new value of verticalLines form control\n      this.addVerticalDistances(value);\n    });\n  }\n  onSubmit() {\n    // Access the values of distances for horizontal and vertical lines\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n    // Log the distances for horizontal and vertical lines\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n    // Clear the form after submission (optional)\n    this.otherDataForm.reset();\n  }\n  getLinesArray(lineCount) {\n    return Array(lineCount).fill(0).map((_, index) => index + 1);\n  }\n  addHorizontalDistances(count) {\n    const horizontalDistances = this.otherDataForm.get('horizontalDistances');\n    horizontalDistances.reset();\n    // Log the value of count to see if it has the correct value.\n    console.log('Value of count in addHorizontalDistances:', count);\n    for (let i = 0; i < count; i++) {\n      horizontalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n  }\n  addVerticalDistances(count) {\n    const verticalDistances = this.otherDataForm.get('verticalDistances');\n    verticalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      verticalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 12,\n  vars: 2,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"flex-end\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"width\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"width\", \"name\", \"width\", \"formControlName\", \"width\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"height\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"height\", \"name\", \"height\", \"formControlName\", \"height\", 1, \"form-control\", \"form-control-sm\"], [4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"for\", \"horizontalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"horizontalLines\", \"name\", \"horizontalLines\", \"formControlName\", \"horizontalLines\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"verticalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"verticalLines\", \"name\", \"verticalLines\", \"formControlName\", \"verticalLines\", 1, \"form-control\", \"form-control-sm\"], [\"formGroupName\", \"horizontalDistances\"], [4, \"ngFor\", \"ngForOf\"], [\"formGroupName\", \"verticalDistances\"], [\"type\", \"number\", 1, \"form-control\", \"form-control-sm\", 3, \"name\", \"formControlName\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\", 3);\n      i0.ɵɵtext(4, \"Dikd\\u00F6rtgenin geni\\u015Fli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 4);\n      i0.ɵɵelementStart(6, \"label\", 5);\n      i0.ɵɵtext(7, \"Dikd\\u00F6rtgenin y\\u00FCksekli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 6);\n      i0.ɵɵtemplate(9, HomeComponent_ng_container_9_Template, 8, 1, \"ng-container\", 7);\n      i0.ɵɵelementStart(10, \"button\", 8);\n      i0.ɵɵtext(11, \"G\\u00F6nder\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.otherDataForm.controls[\"width\"].value > 0 && ctx.otherDataForm.controls[\"height\"].value > 0);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","HomeComponent","constructor","formBuilder","otherDataForm","group","width","height","horizontalLines","verticalLines","horizontalDistances","verticalDistances","console","log","value","ngOnInit","get","valueChanges","subscribe","addHorizontalDistances","addVerticalDistances","onSubmit","reset","getLinesArray","lineCount","Array","fill","map","_","index","count","i","addControl","control","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { FormControlName } from '@angular/forms';\n\n@Component({\n  selector: 'app-home',\n  template: `\n    <div\n      style=\"display: flex; justify-content: flex-end; align-items: center; height: 100vh;\"\n    >\n      <div class=\"col-md-4\">\n        <form\n          [formGroup]=\"otherDataForm\"\n          (ngSubmit)=\"onSubmit()\"\n          class=\"form-group mb-3\"\n        >\n          <label for=\"width\" class=\"mr-2\"\n            >Dikdörtgenin genişliği (mm):</label\n          >\n          <input\n            type=\"number\"\n            id=\"width\"\n            name=\"width\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"width\"\n          />\n\n          <label for=\"height\" class=\"mr-2\"\n            >Dikdörtgenin yüksekliği (mm):</label\n          >\n          <input\n            type=\"number\"\n            id=\"height\"\n            name=\"height\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"height\"\n          />\n\n          <ng-container\n            *ngIf=\"\n              otherDataForm.controls['width'].value > 0 &&\n              otherDataForm.controls['height'].value > 0\n            \"\n          >\n            <label for=\"horizontalLines\" class=\"mr-2\"\n              >Yatayda kaç adet çizgi olsun:</label\n            >\n            <input\n              type=\"number\"\n              id=\"horizontalLines\"\n              name=\"horizontalLines\"\n              class=\"form-control form-control-sm\"\n              formControlName=\"horizontalLines\"\n            />\n\n            <label for=\"verticalLines\" class=\"mr-2\"\n              >Dikeyde kaç adet çizgi olsun:</label\n            >\n            <input\n              type=\"number\"\n              id=\"verticalLines\"\n              name=\"verticalLines\"\n              class=\"form-control form-control-sm\"\n              formControlName=\"verticalLines\"\n            />\n\n            <ng-container\n              *ngIf=\"\n                otherDataForm.controls['horizontalLines'].value > 0 &&\n                otherDataForm.controls['verticalLines'].value > 0\n              \"\n            >\n              <div formGroupName=\"horizontalDistances\">\n                <ng-container\n                  *ngFor=\"\n                    let line of this.getLinesArray(\n                      otherDataForm.controls['horizontalLines'].value\n                    );\n                    let i = index\n                  \"\n                >\n                  <!-- this anahtar kelimesini ekledim -->\n                  <label>\n                    {{\n                      i === 0\n                        ? 'Yataydaki 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:'\n                        : 'Yataydaki ' +\n                          (i + 1) +\n                          '. çizginin ' +\n                          i +\n                          '. çizgi ile arasındaki mesafe kaç mm olmalı:'\n                    }}\n                    <input\n                      type=\"number\"\n                      name=\"{{ 'distance_' + i }}\"\n                      class=\"form-control form-control-sm\"\n                      formControlName=\"{{ 'distance_' + i }}\"\n                    />\n                  </label>\n                </ng-container>\n              </div>\n\n              <div formGroupName=\"verticalDistances\">\n                <ng-container\n                  *ngFor=\"\n                    let line of this.getLinesArray(\n                      otherDataForm.controls['verticalLines'].value\n                    );\n                    let i = index\n                  \"\n                >\n                  <!-- this anahtar kelimesini ekledim -->\n                  <label>\n                    {{\n                      i === 0\n                        ? 'Dikeyde 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:'\n                        : 'Dikeyde ' +\n                          (i + 1) +\n                          '. çizginin ' +\n                          i +\n                          '. çizgi ile arasındaki mesafe kaç mm olmalı:'\n                    }}\n                    <input\n                      type=\"number\"\n                      name=\"{{ 'distance_' + i }}\"\n                      class=\"form-control form-control-sm\"\n                      formControlName=\"{{ 'distance_' + i }}\"\n                    />\n                  </label>\n                </ng-container>\n              </div>\n            </ng-container>\n          </ng-container>\n\n          <button type=\"submit\" class=\"btn btn-primary\">Gönder</button>\n        </form>\n      </div>\n    </div>\n  `,\n})\nexport class HomeComponent implements OnInit {\n  otherDataForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({}),\n    });\n\n    // Log the initial value of the horizontalDistances form group to see if it's being initialized correctly.\n    console.log(\n      'Initial value of horizontalDistances:',\n      this.otherDataForm.value.horizontalDistances\n    );\n  }\n\n  ngOnInit(): void {\n    // Subscribe to valueChanges observable of horizontalLines form control\n    this.otherDataForm.get('horizontalLines')?.valueChanges.subscribe((value) => {\n      // Call addHorizontalDistances() with the new value of horizontalLines form control\n      this.addHorizontalDistances(value);\n    });\n\n    // Subscribe to valueChanges observable of verticalLines form control\n    this.otherDataForm.get('verticalLines')?.valueChanges.subscribe((value) => {\n      // Call addVerticalDistances() with the new value of verticalLines form control\n      this.addVerticalDistances(value);\n    });\n  }\n\n  onSubmit(): void {\n    // Access the values of distances for horizontal and vertical lines\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n\n    // Log the distances for horizontal and vertical lines\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n\n    // Clear the form after submission (optional)\n    this.otherDataForm.reset();\n  }\n\n  getLinesArray(lineCount: number): number[] {\n    return Array(lineCount)\n      .fill(0)\n      .map((_, index) => index + 1);\n  }\n\n  addHorizontalDistances(count: number): void {\n    const horizontalDistances = this.otherDataForm.get(\n      'horizontalDistances'\n    ) as FormGroup;\n    horizontalDistances.reset();\n\n    // Log the value of count to see if it has the correct value.\n    console.log('Value of count in addHorizontalDistances:', count);\n\n    for (let i = 0; i < count; i++) {\n      horizontalDistances.addControl(\n        `distance_${i}`,\n        this.formBuilder.control(null)\n      );\n    }\n  }\n\n  addVerticalDistances(count: number): void {\n    const verticalDistances = this.otherDataForm.get(\n      'verticalDistances'\n    ) as FormGroup;\n    verticalDistances.reset();\n    for (let i = 0; i < count; i++) {\n      verticalDistances.addControl(\n        `distance_${i}`,\n        this.formBuilder.control(null)\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}