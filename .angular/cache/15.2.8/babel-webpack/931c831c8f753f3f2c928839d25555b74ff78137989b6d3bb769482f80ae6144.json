{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"canvas\"];\nfunction HomeComponent_ng_container_12_ng_container_7_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r6 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r6 === 0 ? \"Yataydaki 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Yataydaki \" + (i_r6 + 1) + \". \\u00E7izginin \" + i_r6 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r6);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r6);\n  }\n}\nfunction HomeComponent_ng_container_12_ng_container_7_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r8 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r8 === 0 ? \"Dikeydeki 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Dikeydeki \" + (i_r8 + 1) + \". \\u00E7izginin \" + i_r8 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r8);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r8);\n  }\n}\nfunction HomeComponent_ng_container_12_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 13);\n    i0.ɵɵtemplate(2, HomeComponent_ng_container_12_ng_container_7_ng_container_2_Template, 4, 3, \"ng-container\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 15);\n    i0.ɵɵtemplate(4, HomeComponent_ng_container_12_ng_container_7_ng_container_4_Template, 4, 3, \"ng-container\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 16);\n    i0.ɵɵtext(6, \"G\\u00F6nder\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getLinesArray(ctx_r2.otherDataForm.controls[\"horizontalLines\"].value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getLinesArray(ctx_r2.otherDataForm.controls[\"verticalLines\"].value));\n  }\n}\nfunction HomeComponent_ng_container_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\", 9);\n    i0.ɵɵtext(2, \"Yatayda ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 10);\n    i0.ɵɵelementStart(4, \"label\", 11);\n    i0.ɵɵtext(5, \"Dikeyde ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 12);\n    i0.ɵɵtemplate(7, HomeComponent_ng_container_12_ng_container_7_Template, 7, 2, \"ng-container\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.otherDataForm.controls[\"horizontalLines\"].value > 0 && ctx_r1.otherDataForm.controls[\"verticalLines\"].value > 0);\n  }\n}\nexport class HomeComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.otherDataForm = this.formBuilder.group({\n      width: [null],\n      height: [null],\n      horizontalLines: [null],\n      verticalLines: [null],\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({})\n    });\n  }\n  ngOnInit() {\n    this.otherDataForm.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n  }\n  ngAfterViewInit() {\n    this.adjustCanvasSize();\n  }\n  onSubmit() {\n    // Handle form submission\n  }\n  adjustCanvasSize() {\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    const {\n      width,\n      height\n    } = canvas.getBoundingClientRect();\n    canvas.width = width;\n    canvas.height = height;\n    ctx?.clearRect(0, 0, width, height);\n  }\n  drawRectangle() {\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      console.error('Canvas context is null.');\n      return;\n    }\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const {\n      width,\n      height\n    } = this.otherDataForm.value;\n    const horizontalLines = this.otherDataForm.get('horizontalLines')?.value;\n    const verticalLines = this.otherDataForm.get('verticalLines')?.value;\n    const horizontalDistances = this.otherDataForm.get('horizontalDistances')?.value;\n    const verticalDistances = this.otherDataForm.get('verticalDistances')?.value;\n    if (width > 0 && height > 0 && horizontalLines > 0 && verticalLines > 0) {\n      // Draw the rectangle\n      ctx.beginPath();\n      ctx.rect(0, 0, width, height);\n      ctx.stroke();\n      // Draw horizontal lines\n      const horizontalStep = height / (horizontalLines + 1);\n      for (let i = 1; i <= horizontalLines; i++) {\n        const distance = horizontalDistances?.['distance_' + (i - 1)];\n        ctx.beginPath();\n        ctx.moveTo(0, i * horizontalStep);\n        ctx.lineTo(width, i * horizontalStep);\n        ctx.fillText(distance + ' mm', 10, i * horizontalStep - 10);\n        ctx.stroke();\n      }\n      // Draw vertical lines\n      const verticalStep = width / (verticalLines + 1);\n      for (let i = 1; i <= verticalLines; i++) {\n        const distance = verticalDistances?.['distance_' + (i - 1)];\n        ctx.beginPath();\n        ctx.moveTo(i * verticalStep, 0);\n        ctx.lineTo(i * verticalStep, height);\n        ctx.fillText(distance + ' mm', i * verticalStep + 10, 10);\n        ctx.stroke();\n      }\n    }\n  }\n  getLinesArray(count) {\n    return Array(count).fill(0);\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  viewQuery: function HomeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n    }\n  },\n  decls: 13,\n  vars: 2,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [\"canvas\", \"\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"width\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"width\", \"name\", \"width\", \"formControlName\", \"width\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"height\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"height\", \"name\", \"height\", \"formControlName\", \"height\", 1, \"form-control\", \"form-control-sm\"], [4, \"ngIf\"], [\"for\", \"horizontalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"horizontalLines\", \"name\", \"horizontalLines\", \"formControlName\", \"horizontalLines\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"verticalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"verticalLines\", \"name\", \"verticalLines\", \"formControlName\", \"verticalLines\", 1, \"form-control\", \"form-control-sm\"], [\"formGroupName\", \"horizontalDistances\"], [4, \"ngFor\", \"ngForOf\"], [\"formGroupName\", \"verticalDistances\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mt-3\"], [\"type\", \"number\", 1, \"form-control\", \"form-control-sm\", 3, \"name\", \"formControlName\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"canvas\", null, 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 1)(5, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(6, \"label\", 4);\n      i0.ɵɵtext(7, \"Dikd\\u00F6rtgenin geni\\u015Fli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 5);\n      i0.ɵɵelementStart(9, \"label\", 6);\n      i0.ɵɵtext(10, \"Dikd\\u00F6rtgenin y\\u00FCksekli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 7);\n      i0.ɵɵtemplate(12, HomeComponent_ng_container_12_Template, 8, 1, \"ng-container\", 8);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.otherDataForm.controls[\"width\"].value > 0 && ctx.otherDataForm.controls[\"height\"].value > 0);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","HomeComponent","constructor","formBuilder","otherDataForm","group","width","height","horizontalLines","verticalLines","horizontalDistances","verticalDistances","ngOnInit","valueChanges","subscribe","drawRectangle","ngAfterViewInit","adjustCanvasSize","onSubmit","canvas","nativeElement","ctx","getContext","getBoundingClientRect","clearRect","console","error","value","get","beginPath","rect","stroke","horizontalStep","i","distance","moveTo","lineTo","fillText","verticalStep","getLinesArray","count","Array","fill","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-home',\n  template: `\n    <div\n      style=\"display: flex; justify-content: space-between; align-items: center; height: 100vh;\"\n    >\n      <div class=\"col-md-4\">\n        <canvas #canvas></canvas>\n      </div>\n      <div class=\"col-md-4\">\n        <form\n          [formGroup]=\"otherDataForm\"\n          (ngSubmit)=\"onSubmit()\"\n          class=\"form-group mb-3\"\n        >\n          <label for=\"width\" class=\"mr-2\">Dikdörtgenin genişliği (mm):</label>\n          <input\n            type=\"number\"\n            id=\"width\"\n            name=\"width\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"width\"\n          />\n\n          <label for=\"height\" class=\"mr-2\">Dikdörtgenin yüksekliği (mm):</label>\n          <input\n            type=\"number\"\n            id=\"height\"\n            name=\"height\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"height\"\n          />\n\n          <ng-container\n            *ngIf=\"\n              otherDataForm.controls['width'].value > 0 &&\n              otherDataForm.controls['height'].value > 0\n            \"\n          >\n            <label for=\"horizontalLines\" class=\"mr-2\"\n              >Yatayda kaç adet çizgi olsun:</label\n            >\n            <input\n              type=\"number\"\n              id=\"horizontalLines\"\n              name=\"horizontalLines\"\n              class=\"form-control form-control-sm\"\n              formControlName=\"horizontalLines\"\n            />\n\n            <label for=\"verticalLines\" class=\"mr-2\"\n              >Dikeyde kaç adet çizgi olsun:</label\n            >\n            <input\n              type=\"number\"\n              id=\"verticalLines\"\n              name=\"verticalLines\"\n              class=\"form-control form-control-sm\"\n              formControlName=\"verticalLines\"\n            />\n\n            <ng-container\n              *ngIf=\"\n                otherDataForm.controls['horizontalLines'].value > 0 &&\n                otherDataForm.controls['verticalLines'].value > 0\n              \"\n            >\n              <div formGroupName=\"horizontalDistances\">\n                <ng-container\n                  *ngFor=\"\n                    let line of getLinesArray(otherDataForm.controls['horizontalLines'].value);\n                    let i = index\n                  \"\n                >\n                  <label>\n                    {{\n                      i === 0\n                        ? 'Yataydaki 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:'\n                        : 'Yataydaki ' +\n                          (i + 1) +\n                          '. çizginin ' +\n                          i +\n                          '. çizgi ile arasındaki mesafe kaç mm olmalı:'\n                    }}\n                    <input\n                      type=\"number\"\n                      name=\"{{ 'distance_' + i }}\"\n                      class=\"form-control form-control-sm\"\n                      formControlName=\"{{ 'distance_' + i }}\"\n                    />\n                  </label>\n                </ng-container>\n              </div>\n\n              <div formGroupName=\"verticalDistances\">\n                <ng-container\n                  *ngFor=\"\n                    let line of getLinesArray(otherDataForm.controls['verticalLines'].value);\n                    let i = index\n                  \"\n                >\n                  <label>\n                    {{\n                      i === 0\n                        ? 'Dikeydeki 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:'\n                        : 'Dikeydeki ' +\n                          (i + 1) +\n                          '. çizginin ' +\n                          i +\n                          '. çizgi ile arasındaki mesafe kaç mm olmalı:'\n                    }}\n                    <input\n                      type=\"number\"\n                      name=\"{{ 'distance_' + i }}\"\n                      class=\"form-control form-control-sm\"\n                      formControlName=\"{{ 'distance_' + i }}\"\n                    />\n                  </label>\n                </ng-container>\n              </div>\n\n              <button type=\"submit\" class=\"btn btn-primary mt-3\">Gönder</button>\n            </ng-container>\n          </ng-container>\n        </form>\n      </div>\n    </div>\n  `,\n})\nexport class HomeComponent implements OnInit {\n  @ViewChild('canvas') canvas!: ElementRef<HTMLCanvasElement>;\n  otherDataForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.otherDataForm = this.formBuilder.group({\n      width: [null],\n      height: [null],\n      horizontalLines: [null],\n      verticalLines: [null],\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({}),\n    });\n  }\n\n  ngOnInit(): void {\n    this.otherDataForm.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n  }\n\n  ngAfterViewInit(): void {\n    this.adjustCanvasSize();\n  }\n\n  onSubmit(): void {\n    // Handle form submission\n  }\n\n  adjustCanvasSize(): void {\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n\n    const { width, height } = canvas.getBoundingClientRect();\n\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx?.clearRect(0, 0, width, height);\n  }\n\n  drawRectangle(): void {\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) {\n      console.error('Canvas context is null.');\n      return;\n    }\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    const { width, height } = this.otherDataForm.value;\n    const horizontalLines = this.otherDataForm.get('horizontalLines')?.value;\n    const verticalLines = this.otherDataForm.get('verticalLines')?.value;\n    const horizontalDistances = this.otherDataForm.get('horizontalDistances')?.value;\n    const verticalDistances = this.otherDataForm.get('verticalDistances')?.value;\n\n    if (width > 0 && height > 0 && horizontalLines > 0 && verticalLines > 0) {\n      // Draw the rectangle\n      ctx.beginPath();\n      ctx.rect(0, 0, width, height);\n      ctx.stroke();\n\n      // Draw horizontal lines\n      const horizontalStep = height / (horizontalLines + 1);\n      for (let i = 1; i <= horizontalLines; i++) {\n        const distance = horizontalDistances?.['distance_' + (i - 1)];\n        ctx.beginPath();\n        ctx.moveTo(0, i * horizontalStep);\n        ctx.lineTo(width, i * horizontalStep);\n        ctx.fillText(distance + ' mm', 10, i * horizontalStep - 10);\n        ctx.stroke();\n      }\n\n      // Draw vertical lines\n      const verticalStep = width / (verticalLines + 1);\n      for (let i = 1; i <= verticalLines; i++) {\n        const distance = verticalDistances?.['distance_' + (i - 1)];\n        ctx.beginPath();\n        ctx.moveTo(i * verticalStep, 0);\n        ctx.lineTo(i * verticalStep, height);\n        ctx.fillText(distance + ' mm', i * verticalStep + 10, 10);\n        ctx.stroke();\n      }\n    }\n  }\n\n  getLinesArray(count: number): number[] {\n    return Array(count).fill(0);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}