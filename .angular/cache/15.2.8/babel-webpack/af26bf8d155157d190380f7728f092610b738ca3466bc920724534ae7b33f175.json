{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"canvas\"];\nfunction HomeComponent_ng_container_26_ng_container_7_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 22);\n    i0.ɵɵelementStart(4, \"select\", 23)(5, \"option\", 7);\n    i0.ɵɵtext(6, \"mm\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"option\", 8);\n    i0.ɵɵtext(8, \"cm\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"option\", 9);\n    i0.ɵɵtext(10, \"m\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r6 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r6 === 0 ? \"Yataydaki 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe:\" : \"Yataydaki \" + (i_r6 + 1) + \". \\u00E7izginin \\u00F6nceki \\u00E7izgi ile aras\\u0131ndaki mesafe:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"horizontalDistance\" + i_r6)(\"name\", \"horizontalDistance\" + i_r6)(\"formControlName\", i_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", \"unit\" + i_r6);\n  }\n}\nfunction HomeComponent_ng_container_26_ng_container_7_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 22);\n    i0.ɵɵelementStart(4, \"select\", 23)(5, \"option\", 7);\n    i0.ɵɵtext(6, \"mm\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"option\", 8);\n    i0.ɵɵtext(8, \"cm\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"option\", 9);\n    i0.ɵɵtext(10, \"m\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r8 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r8 === 0 ? \"Dikeydeki 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe:\" : \"Dikeydeki \" + (i_r8 + 1) + \". \\u00E7izginin \\u00F6nceki \\u00E7izgi ile aras\\u0131ndaki mesafe:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"verticalDistance\" + i_r8)(\"name\", \"verticalDistance\" + i_r8)(\"formControlName\", i_r8);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", \"unit\" + i_r8);\n  }\n}\nfunction HomeComponent_ng_container_26_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 19);\n    i0.ɵɵtemplate(2, HomeComponent_ng_container_26_ng_container_7_ng_container_2_Template, 11, 5, \"ng-container\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 21);\n    i0.ɵɵtemplate(4, HomeComponent_ng_container_26_ng_container_7_ng_container_4_Template, 11, 5, \"ng-container\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getLinesArray(ctx_r2.otherDataForm.controls[\"horizontalLines\"].value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getLinesArray(ctx_r2.otherDataForm.controls[\"verticalLines\"].value));\n  }\n}\nfunction HomeComponent_ng_container_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\", 15);\n    i0.ɵɵtext(2, \"Yatayda ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 16);\n    i0.ɵɵelementStart(4, \"label\", 17);\n    i0.ɵɵtext(5, \"Dikeyde ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 18);\n    i0.ɵɵtemplate(7, HomeComponent_ng_container_26_ng_container_7_Template, 5, 2, \"ng-container\", 13);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.otherDataForm.controls[\"horizontalLines\"].value > 0 && ctx_r1.otherDataForm.controls[\"verticalLines\"].value > 0);\n  }\n}\nvar LengthUnit;\n(function (LengthUnit) {\n  LengthUnit[\"Millimeter\"] = \"mm\";\n  LengthUnit[\"Centimeter\"] = \"cm\";\n  LengthUnit[\"Meter\"] = \"m\";\n})(LengthUnit || (LengthUnit = {}));\nexport class HomeComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.otherDataForm = this.formBuilder.group({\n      width: [0],\n      widthUnit: [LengthUnit.Millimeter],\n      height: [0],\n      heightUnit: [LengthUnit.Millimeter],\n      horizontalLines: [0],\n      verticalLines: [0],\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({})\n    });\n  }\n  ngOnInit() {\n    this.otherDataForm.get('horizontalLines')?.valueChanges.subscribe(() => {\n      this.addHorizontalDistances();\n    });\n    this.otherDataForm.get('verticalLines')?.valueChanges.subscribe(() => {\n      this.addVerticalDistances();\n    });\n    this.otherDataForm.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n  }\n  ngAfterViewInit() {\n    this.drawRectangle();\n  }\n  addHorizontalDistances() {\n    const horizontalLinesCount = this.otherDataForm.get('horizontalLines')?.value || 0;\n    const horizontalDistances = this.otherDataForm.get('horizontalDistances');\n    const currentDistancesCount = Object.keys(horizontalDistances.controls).length;\n    if (horizontalLinesCount > currentDistancesCount) {\n      for (let i = currentDistancesCount; i < horizontalLinesCount; i++) {\n        horizontalDistances.addControl(i.toString(), this.formBuilder.control(0));\n        horizontalDistances.addControl('unit' + i, this.formBuilder.control(LengthUnit.Millimeter));\n      }\n    } else if (horizontalLinesCount < currentDistancesCount) {\n      for (let i = currentDistancesCount - 1; i >= horizontalLinesCount; i--) {\n        horizontalDistances.removeControl(i.toString());\n        horizontalDistances.removeControl('unit' + i);\n      }\n    }\n  }\n  addVerticalDistances() {\n    const verticalLinesCount = this.otherDataForm.get('verticalLines')?.value || 0;\n    const verticalDistances = this.otherDataForm.get('verticalDistances');\n    const currentDistancesCount = Object.keys(verticalDistances.controls).length;\n    if (verticalLinesCount > currentDistancesCount) {\n      for (let i = currentDistancesCount; i < verticalLinesCount; i++) {\n        verticalDistances.addControl(i.toString(), this.formBuilder.control(0));\n        verticalDistances.addControl('unit' + i, this.formBuilder.control(LengthUnit.Millimeter));\n      }\n    } else if (verticalLinesCount < currentDistancesCount) {\n      for (let i = currentDistancesCount - 1; i >= verticalLinesCount; i--) {\n        verticalDistances.removeControl(i.toString());\n        verticalDistances.removeControl('unit' + i);\n      }\n    }\n  }\n  getLinesArray(count) {\n    return Array(count).fill(0).map((_, i) => i + 1);\n  }\n  onSubmit() {\n    this.drawRectangle();\n  }\n  drawRectangle() {\n    const canvas = this.canvasRef.nativeElement;\n    const context = canvas.getContext('2d');\n    const width = this.otherDataForm.get('width')?.value || 0;\n    const widthUnit = this.otherDataForm.get('widthUnit')?.value;\n    const height = this.otherDataForm.get('height')?.value || 0;\n    const heightUnit = this.otherDataForm.get('heightUnit')?.value;\n    const horizontalLines = this.otherDataForm.get('horizontalLines')?.value || 0;\n    const horizontalDistances = this.otherDataForm.get('horizontalDistances')?.value || {};\n    const verticalLines = this.otherDataForm.get('verticalLines')?.value || 0;\n    const verticalDistances = this.otherDataForm.get('verticalDistances')?.value || {};\n    // Convert width and height to millimeters\n    const widthInMillimeters = this.convertToMillimeters(width, widthUnit);\n    const heightInMillimeters = this.convertToMillimeters(height, heightUnit);\n    // Set canvas size\n    canvas.width = widthInMillimeters;\n    canvas.height = heightInMillimeters;\n    // Clear canvas\n    context?.clearRect(0, 0, canvas.width, canvas.height);\n    // Draw rectangle\n    context?.strokeRect(0, 0, widthInMillimeters, heightInMillimeters);\n    // Draw horizontal lines\n    if (horizontalLines > 0) {\n      const horizontalDistanceValues = Object.values(horizontalDistances);\n      const horizontalUnitValues = Object.values(horizontalDistances).map(control => control.unit);\n      for (let i = 0; i < horizontalLines; i++) {\n        const distance = horizontalDistanceValues[i];\n        const unit = horizontalUnitValues[i];\n        const distanceInMillimeters = this.convertToMillimeters(distance, unit);\n        const y = (i + 1) * (heightInMillimeters / (horizontalLines + 1));\n        context?.beginPath();\n        context?.moveTo(0, y);\n        context?.lineTo(distanceInMillimeters, y);\n        context?.stroke();\n      }\n    }\n    // Draw vertical lines\n    if (verticalLines > 0) {\n      const verticalDistanceValues = Object.values(verticalDistances);\n      const verticalUnitValues = Object.values(verticalDistances).map(control => control.unit);\n      for (let i = 0; i < verticalLines; i++) {\n        const distance = verticalDistanceValues[i];\n        const unit = verticalUnitValues[i];\n        const distanceInMillimeters = this.convertToMillimeters(distance, unit);\n        const x = (i + 1) * (widthInMillimeters / (verticalLines + 1));\n        context?.beginPath();\n        context?.moveTo(x, 0);\n        context?.lineTo(x, distanceInMillimeters);\n        context?.stroke();\n      }\n    }\n  }\n  convertToMillimeters(value, unit) {\n    switch (unit) {\n      case LengthUnit.Centimeter:\n        return value * 10;\n      case LengthUnit.Meter:\n        return value * 1000;\n      default:\n        return value;\n    }\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  viewQuery: function HomeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvasRef = _t.first);\n    }\n  },\n  decls: 29,\n  vars: 2,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [\"canvas\", \"\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"width\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"width\", \"name\", \"width\", \"formControlName\", \"width\", 1, \"form-control\", \"form-control-sm\"], [\"formControlName\", \"widthUnit\"], [\"value\", \"mm\"], [\"value\", \"cm\"], [\"value\", \"m\"], [\"for\", \"height\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"height\", \"name\", \"height\", \"formControlName\", \"height\", 1, \"form-control\", \"form-control-sm\"], [\"formControlName\", \"heightUnit\"], [4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-sm\", \"mt-2\"], [\"for\", \"horizontalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"horizontalLines\", \"name\", \"horizontalLines\", \"formControlName\", \"horizontalLines\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"verticalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"verticalLines\", \"name\", \"verticalLines\", \"formControlName\", \"verticalLines\", 1, \"form-control\", \"form-control-sm\"], [\"formGroupName\", \"horizontalDistances\"], [4, \"ngFor\", \"ngForOf\"], [\"formGroupName\", \"verticalDistances\"], [\"type\", \"number\", 1, \"form-control\", \"form-control-sm\", 3, \"id\", \"name\", \"formControlName\"], [3, \"formControlName\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"canvas\", null, 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 1)(5, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(6, \"label\", 4);\n      i0.ɵɵtext(7, \"Dikd\\u00F6rtgenin geni\\u015Fli\\u011Fi:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 5);\n      i0.ɵɵelementStart(9, \"select\", 6)(10, \"option\", 7);\n      i0.ɵɵtext(11, \"mm\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"option\", 8);\n      i0.ɵɵtext(13, \"cm\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"option\", 9);\n      i0.ɵɵtext(15, \"m\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"label\", 10);\n      i0.ɵɵtext(17, \"Dikd\\u00F6rtgenin y\\u00FCksekli\\u011Fi:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(18, \"input\", 11);\n      i0.ɵɵelementStart(19, \"select\", 12)(20, \"option\", 7);\n      i0.ɵɵtext(21, \"mm\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"option\", 8);\n      i0.ɵɵtext(23, \"cm\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"option\", 9);\n      i0.ɵɵtext(25, \"m\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(26, HomeComponent_ng_container_26_Template, 8, 1, \"ng-container\", 13);\n      i0.ɵɵelementStart(27, \"button\", 14);\n      i0.ɵɵtext(28, \" G\\u00F6nder \");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(21);\n      i0.ɵɵproperty(\"ngIf\", ctx.otherDataForm.controls[\"width\"].value > 0 && ctx.otherDataForm.controls[\"height\"].value > 0);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName],\n  styles: [\"canvas[_ngcontent-%COMP%] {\\n  border: 1px solid black;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvaG9tZS9ob21lLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8uLy4uLy4uLy4uLy4uLy4uL1Byb2dyYW0lMjBGaWxlcyUyMCh4ODYpL0tvZGxhci9GdXJrYW5fQ2hQcm9qZWN0L0NoUHJvamVjdF9DbGllbnQvQ2hQcm9qZWN0LUFuZ3VsYXItUmVjdGFuZ2xlRHJhd2VyL3NyYy9hcHAvaG9tZS9ob21lLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDTTtFQUNFLHVCQUFBO0FDQVIiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgIGNhbnZhcyB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgfVxuICAgICIsImNhbnZhcyB7XG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","LengthUnit","HomeComponent","constructor","formBuilder","otherDataForm","group","width","widthUnit","Millimeter","height","heightUnit","horizontalLines","verticalLines","horizontalDistances","verticalDistances","ngOnInit","get","valueChanges","subscribe","addHorizontalDistances","addVerticalDistances","drawRectangle","ngAfterViewInit","horizontalLinesCount","value","currentDistancesCount","Object","keys","controls","length","i","addControl","toString","control","removeControl","verticalLinesCount","getLinesArray","count","Array","fill","map","_","onSubmit","canvas","canvasRef","nativeElement","context","getContext","widthInMillimeters","convertToMillimeters","heightInMillimeters","clearRect","strokeRect","horizontalDistanceValues","values","horizontalUnitValues","unit","distance","distanceInMillimeters","y","beginPath","moveTo","lineTo","stroke","verticalDistanceValues","verticalUnitValues","x","Centimeter","Meter","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\nenum LengthUnit {\n  Millimeter = 'mm',\n  Centimeter = 'cm',\n  Meter = 'm',\n}\n\n@Component({\n  selector: 'app-home',\n  template: `\n    <div\n      style=\"display: flex; justify-content: space-between; align-items: center; height: 100vh;\"\n    >\n      <div class=\"col-md-4\">\n        <canvas #canvas></canvas>\n      </div>\n      <div class=\"col-md-4\">\n        <form\n          [formGroup]=\"otherDataForm\"\n          (ngSubmit)=\"onSubmit()\"\n          class=\"form-group mb-3\"\n        >\n          <label for=\"width\" class=\"mr-2\">Dikdörtgenin genişliği:</label>\n          <input\n            type=\"number\"\n            id=\"width\"\n            name=\"width\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"width\"\n          />\n          <select formControlName=\"widthUnit\">\n            <option value=\"mm\">mm</option>\n            <option value=\"cm\">cm</option>\n            <option value=\"m\">m</option>\n          </select>\n\n          <label for=\"height\" class=\"mr-2\">Dikdörtgenin yüksekliği:</label>\n          <input\n            type=\"number\"\n            id=\"height\"\n            name=\"height\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"height\"\n          />\n          <select formControlName=\"heightUnit\">\n            <option value=\"mm\">mm</option>\n            <option value=\"cm\">cm</option>\n            <option value=\"m\">m</option>\n          </select>\n\n          <ng-container\n            *ngIf=\"\n              otherDataForm.controls['width'].value > 0 &&\n              otherDataForm.controls['height'].value > 0\n            \"\n          >\n            <label for=\"horizontalLines\" class=\"mr-2\"\n              >Yatayda kaç adet çizgi olsun:</label\n            >\n            <input\n              type=\"number\"\n              id=\"horizontalLines\"\n              name=\"horizontalLines\"\n              class=\"form-control form-control-sm\"\n              formControlName=\"horizontalLines\"\n            />\n\n            <label for=\"verticalLines\" class=\"mr-2\"\n              >Dikeyde kaç adet çizgi olsun:</label\n            >\n            <input\n              type=\"number\"\n              id=\"verticalLines\"\n              name=\"verticalLines\"\n              class=\"form-control form-control-sm\"\n              formControlName=\"verticalLines\"\n            />\n\n            <ng-container\n              *ngIf=\"\n                otherDataForm.controls['horizontalLines'].value > 0 &&\n                otherDataForm.controls['verticalLines'].value > 0\n              \"\n            >\n              <div formGroupName=\"horizontalDistances\">\n                <ng-container\n                  *ngFor=\"\n                    let line of this.getLinesArray(\n                      otherDataForm.controls['horizontalLines'].value\n                    );\n                    let i = index\n                  \"\n                >\n                  <label>\n                    {{\n                      i === 0\n                        ? 'Yataydaki 1. çizginin dikdörtgen ile arasındaki mesafe:'\n                        : 'Yataydaki ' +\n                          (i + 1) +\n                          '. çizginin önceki çizgi ile arasındaki mesafe:'\n                    }}\n                  </label>\n                  <input\n                    type=\"number\"\n                    [id]=\"'horizontalDistance' + i\"\n                    [name]=\"'horizontalDistance' + i\"\n                    class=\"form-control form-control-sm\"\n                    [formControlName]=\"i\"\n                  />\n                  <select [formControlName]=\"'unit' + i\">\n                    <option value=\"mm\">mm</option>\n                    <option value=\"cm\">cm</option>\n                    <option value=\"m\">m</option>\n                  </select>\n                </ng-container>\n              </div>\n\n              <div formGroupName=\"verticalDistances\">\n                <ng-container\n                  *ngFor=\"\n                    let line of this.getLinesArray(\n                      otherDataForm.controls['verticalLines'].value\n                    );\n                    let i = index\n                  \"\n                >\n                  <label>\n                    {{\n                      i === 0\n                        ? 'Dikeydeki 1. çizginin dikdörtgen ile arasındaki mesafe:'\n                        : 'Dikeydeki ' +\n                          (i + 1) +\n                          '. çizginin önceki çizgi ile arasındaki mesafe:'\n                    }}\n                  </label>\n                  <input\n                    type=\"number\"\n                    [id]=\"'verticalDistance' + i\"\n                    [name]=\"'verticalDistance' + i\"\n                    class=\"form-control form-control-sm\"\n                    [formControlName]=\"i\"\n                  />\n                  <select [formControlName]=\"'unit' + i\">\n                    <option value=\"mm\">mm</option>\n                    <option value=\"cm\">cm</option>\n                    <option value=\"m\">m</option>\n                  </select>\n                </ng-container>\n              </div>\n            </ng-container>\n          </ng-container>\n\n          <button type=\"submit\" class=\"btn btn-primary btn-sm mt-2\">\n            Gönder\n          </button>\n        </form>\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      canvas {\n        border: 1px solid black;\n      }\n    `,\n  ],\n})\nexport class HomeComponent implements OnInit {\n  @ViewChild('canvas', { static: true })\n  canvasRef!: ElementRef<HTMLCanvasElement>;\n\n  otherDataForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.otherDataForm = this.formBuilder.group({\n      width: [0],\n      widthUnit: [LengthUnit.Millimeter],\n      height: [0],\n      heightUnit: [LengthUnit.Millimeter],\n      horizontalLines: [0],\n      verticalLines: [0],\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({}),\n    });\n  }\n\n  ngOnInit() {\n    this.otherDataForm.get('horizontalLines')?.valueChanges.subscribe(() => {\n      this.addHorizontalDistances();\n    });\n\n    this.otherDataForm.get('verticalLines')?.valueChanges.subscribe(() => {\n      this.addVerticalDistances();\n    });\n\n    this.otherDataForm.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n  }\n\n  ngAfterViewInit() {\n    this.drawRectangle();\n  }\n\n  addHorizontalDistances() {\n    const horizontalLinesCount = this.otherDataForm.get('horizontalLines')?.value || 0;\n    const horizontalDistances = this.otherDataForm.get('horizontalDistances') as FormGroup;\n    const currentDistancesCount = Object.keys(horizontalDistances.controls).length;\n\n    if (horizontalLinesCount > currentDistancesCount) {\n      for (let i = currentDistancesCount; i < horizontalLinesCount; i++) {\n        horizontalDistances.addControl(i.toString(), this.formBuilder.control(0));\n        horizontalDistances.addControl('unit' + i, this.formBuilder.control(LengthUnit.Millimeter));\n      }\n    } else if (horizontalLinesCount < currentDistancesCount) {\n      for (let i = currentDistancesCount - 1; i >= horizontalLinesCount; i--) {\n        horizontalDistances.removeControl(i.toString());\n        horizontalDistances.removeControl('unit' + i);\n      }\n    }\n  }\n\n  addVerticalDistances() {\n    const verticalLinesCount = this.otherDataForm.get('verticalLines')?.value || 0;\n    const verticalDistances = this.otherDataForm.get('verticalDistances') as FormGroup;\n    const currentDistancesCount = Object.keys(verticalDistances.controls).length;\n\n    if (verticalLinesCount > currentDistancesCount) {\n      for (let i = currentDistancesCount; i < verticalLinesCount; i++) {\n        verticalDistances.addControl(i.toString(), this.formBuilder.control(0));\n        verticalDistances.addControl('unit' + i, this.formBuilder.control(LengthUnit.Millimeter));\n      }\n    } else if (verticalLinesCount < currentDistancesCount) {\n      for (let i = currentDistancesCount - 1; i >= verticalLinesCount; i--) {\n        verticalDistances.removeControl(i.toString());\n        verticalDistances.removeControl('unit' + i);\n      }\n    }\n  }\n\n  getLinesArray(count: number): number[] {\n    return Array(count).fill(0).map((_, i) => i + 1);\n  }\n\n  onSubmit() {\n    this.drawRectangle();\n  }\n\n  drawRectangle() {\n    const canvas = this.canvasRef.nativeElement;\n    const context = canvas.getContext('2d');\n    const width = this.otherDataForm.get('width')?.value || 0;\n    const widthUnit = this.otherDataForm.get('widthUnit')?.value;\n    const height = this.otherDataForm.get('height')?.value || 0;\n    const heightUnit = this.otherDataForm.get('heightUnit')?.value;\n    const horizontalLines = this.otherDataForm.get('horizontalLines')?.value || 0;\n    const horizontalDistances = this.otherDataForm.get('horizontalDistances')?.value || {};\n    const verticalLines = this.otherDataForm.get('verticalLines')?.value || 0;\n    const verticalDistances = this.otherDataForm.get('verticalDistances')?.value || {};\n\n    // Convert width and height to millimeters\n    const widthInMillimeters = this.convertToMillimeters(width, widthUnit);\n    const heightInMillimeters = this.convertToMillimeters(height, heightUnit);\n\n    // Set canvas size\n    canvas.width = widthInMillimeters;\n    canvas.height = heightInMillimeters;\n\n    // Clear canvas\n    context?.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw rectangle\n    context?.strokeRect(0, 0, widthInMillimeters, heightInMillimeters);\n\n    // Draw horizontal lines\n    if (horizontalLines > 0) {\n      const horizontalDistanceValues = Object.values(horizontalDistances);\n      const horizontalUnitValues = Object.values(horizontalDistances).map(\n        (control: any) => control.unit\n      );\n\n      for (let i = 0; i < horizontalLines; i++) {\n        const distance = horizontalDistanceValues[i]as number;\n        const unit = horizontalUnitValues[i];\n        const distanceInMillimeters = this.convertToMillimeters(distance, unit);\n\n        const y = (i + 1) * (heightInMillimeters / (horizontalLines + 1));\n        context?.beginPath();\n        context?.moveTo(0, y);\n        context?.lineTo(distanceInMillimeters, y);\n        context?.stroke();\n      }\n    }\n\n    // Draw vertical lines\n    if (verticalLines > 0) {\n      const verticalDistanceValues = Object.values(verticalDistances);\n      const verticalUnitValues = Object.values(verticalDistances).map(\n        (control: any) => control.unit\n      );\n\n      for (let i = 0; i < verticalLines; i++) {\n        const distance = verticalDistanceValues[i] as number;\n        const unit = verticalUnitValues[i];\n        const distanceInMillimeters = this.convertToMillimeters(distance, unit);\n\n        const x = (i + 1) * (widthInMillimeters / (verticalLines + 1));\n        context?.beginPath();\n        context?.moveTo(x, 0);\n        context?.lineTo(x, distanceInMillimeters);\n        context?.stroke();\n      }\n    }\n  }\n\n  convertToMillimeters(value: number, unit: string): number {\n    switch (unit) {\n      case LengthUnit.Centimeter:\n        return value * 10;\n      case LengthUnit.Meter:\n        return value * 1000;\n      default:\n        return value;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}