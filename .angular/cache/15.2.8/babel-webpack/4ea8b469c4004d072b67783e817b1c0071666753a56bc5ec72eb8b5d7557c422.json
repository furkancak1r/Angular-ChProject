{"ast":null,"code":"import { FormGroup } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nconst _c0 = [\"canvas\"];\nexport class HomeComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n  }\n  ngOnInit() {\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({})\n    });\n    // Subscribe to valueChanges observable of horizontalLines form control\n    this.otherDataForm.get('horizontalLines')?.valueChanges.subscribe(value => {\n      this.addHorizontalDistances(value);\n    });\n    // Subscribe to valueChanges observable of verticalLines form control\n    this.otherDataForm.get('verticalLines')?.valueChanges.subscribe(value => {\n      this.addVerticalDistances(value);\n    });\n    // Subscribe to valueChanges observable of otherDataForm and call drawRectangle() method when any value changes.\n    this.otherDataForm.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n  }\n  ngAfterViewInit() {\n    // Set initial size of canvas element.\n    const canvas = this.canvas.nativeElement;\n    this.ctx = canvas.getContext('2d');\n    canvas.width = 800;\n    canvas.height = 600;\n  }\n  onSubmit() {\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    const width = this.otherDataForm.value.width;\n    const height = this.otherDataForm.value.height;\n    this.drawRectangle(width, height); // Pass the width and height arguments here\n  }\n\n  addHorizontalDistances(count) {\n    const horizontalDistancesForm = this.otherDataForm.get('horizontalDistances');\n    if (horizontalDistancesForm instanceof FormGroup) {\n      const currentCount = Object.keys(horizontalDistancesForm.controls).length;\n      if (count > currentCount) {\n        for (let i = currentCount + 1; i <= count; i++) {\n          horizontalDistancesForm.addControl(`distance${i}`, this.formBuilder.control(null));\n        }\n      } else if (count < currentCount) {\n        for (let i = currentCount; i > count; i--) {\n          horizontalDistancesForm.removeControl(`distance${i}`);\n        }\n      }\n    }\n  }\n  addVerticalDistances(count) {\n    const verticalDistancesForm = this.otherDataForm.get('verticalDistances');\n    if (verticalDistancesForm instanceof FormGroup) {\n      const currentCount = Object.keys(verticalDistancesForm.controls).length;\n      if (count > currentCount) {\n        for (let i = currentCount + 1; i <= count; i++) {\n          verticalDistancesForm.addControl(`distance${i}`, this.formBuilder.control(null));\n        }\n      } else if (count < currentCount) {\n        for (let i = currentCount; i > count; i--) {\n          verticalDistancesForm.removeControl(`distance${i}`);\n        }\n      }\n    }\n  }\n  drawRectangle(width, height) {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this.ctx.strokeStyle = 'blue';\n    this.ctx.lineWidth = 2;\n    this.ctx.beginPath();\n    this.ctx.moveTo(0, 0);\n    this.ctx.lineTo(width, 0);\n    this.ctx.lineTo(width, height);\n    this.ctx.lineTo(0, height);\n    this.ctx.closePath();\n    this.ctx.stroke();\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  viewQuery: function HomeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n    }\n  },\n  decls: 8,\n  vars: 1,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [\"canvas\", \"\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"canvas\", null, 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 1)(5, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(6, \"button\", 4);\n      i0.ɵɵtext(7, \"G\\u00F6nder\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["FormGroup","HomeComponent","constructor","formBuilder","ngOnInit","otherDataForm","group","width","height","horizontalLines","verticalLines","horizontalDistances","verticalDistances","get","valueChanges","subscribe","value","addHorizontalDistances","addVerticalDistances","drawRectangle","ngAfterViewInit","canvas","nativeElement","ctx","getContext","onSubmit","console","log","clearRect","count","horizontalDistancesForm","currentCount","Object","keys","controls","length","i","addControl","control","removeControl","verticalDistancesForm","strokeStyle","lineWidth","beginPath","moveTo","lineTo","closePath","stroke","selectors","viewQuery","i0"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Chart, ChartDataset, ChartOptions } from 'chart.js';\n\n@Component({\n  selector: 'app-home',\n  template: `\n    <div style=\"display: flex; justify-content: space-between; align-items: center; height: 100vh;\">\n      <div class=\"col-md-4\">\n        <canvas #canvas></canvas>\n      </div>\n      <div class=\"col-md-4\">\n        <form [formGroup]=\"otherDataForm\" (ngSubmit)=\"onSubmit()\" class=\"form-group mb-3\">\n          <!-- Form fields... -->\n\n          <button type=\"submit\" class=\"btn btn-primary\">Gönder</button>\n        </form>\n      </div>\n    </div>\n  `,\n})\nexport class HomeComponent implements OnInit {\n  @ViewChild('canvas', { static: true }) canvas!: ElementRef<HTMLCanvasElement>;\n  otherDataForm!: FormGroup;\n  ctx!: CanvasRenderingContext2D;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({}),\n    });\n\n    // Subscribe to valueChanges observable of horizontalLines form control\n    this.otherDataForm.get('horizontalLines')?.valueChanges.subscribe((value) => {\n      this.addHorizontalDistances(value);\n    });\n\n    // Subscribe to valueChanges observable of verticalLines form control\n    this.otherDataForm.get('verticalLines')?.valueChanges.subscribe((value) => {\n      this.addVerticalDistances(value);\n    });\n\n    // Subscribe to valueChanges observable of otherDataForm and call drawRectangle() method when any value changes.\n    this.otherDataForm.valueChanges.subscribe(() => {\n      this.drawRectangle();\n    });\n  }\n\n  ngAfterViewInit(): void {\n    // Set initial size of canvas element.\n    const canvas = this.canvas.nativeElement;\n    this.ctx = canvas.getContext('2d')!;\n    canvas.width = 800;\n    canvas.height = 600;\n  }\n\n  onSubmit(): void {\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n\n    const width = this.otherDataForm.value.width;\n    const height = this.otherDataForm.value.height;\n\n    this.drawRectangle(width, height); // Pass the width and height arguments here\n  }\n  addHorizontalDistances(count: number): void {\n    const horizontalDistancesForm = this.otherDataForm.get('horizontalDistances');\n\n    if (horizontalDistancesForm instanceof FormGroup) {\n      const currentCount = Object.keys(horizontalDistancesForm.controls).length;\n\n      if (count > currentCount) {\n        for (let i = currentCount + 1; i <= count; i++) {\n          horizontalDistancesForm.addControl(`distance${i}`, this.formBuilder.control(null));\n        }\n      } else if (count < currentCount) {\n        for (let i = currentCount; i > count; i--) {\n          horizontalDistancesForm.removeControl(`distance${i}`);\n        }\n      }\n    }\n  }\n\n  addVerticalDistances(count: number): void {\n    const verticalDistancesForm = this.otherDataForm.get('verticalDistances');\n\n    if (verticalDistancesForm instanceof FormGroup) {\n      const currentCount = Object.keys(verticalDistancesForm.controls).length;\n\n      if (count > currentCount) {\n        for (let i = currentCount + 1; i <= count; i++) {\n          verticalDistancesForm.addControl(`distance${i}`, this.formBuilder.control(null));\n        }\n      } else if (count < currentCount) {\n        for (let i = currentCount; i > count; i--) {\n          verticalDistancesForm.removeControl(`distance${i}`);\n        }\n      }\n    }\n  }\n\n  drawRectangle(width: number, height: number): void {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this.ctx.strokeStyle = 'blue';\n    this.ctx.lineWidth = 2;\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(0, 0);\n    this.ctx.lineTo(width, 0);\n    this.ctx.lineTo(width, height);\n    this.ctx.lineTo(0, height);\n    this.ctx.closePath();\n    this.ctx.stroke();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}