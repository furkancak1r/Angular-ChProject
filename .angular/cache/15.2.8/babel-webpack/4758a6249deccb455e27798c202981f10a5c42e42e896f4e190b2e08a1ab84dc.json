{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction HomeComponent_ng_container_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const hIndex_r4 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" Yataydaki \", hIndex_r4 + 1, \". \\u00E7izginin \", hIndex_r4 === 0 ? \"dikd\\u00F6rtgenin sol \\u00E7izgisi ile\" : hIndex_r4 + 1 + \". \\u00E7izgi ile\", \" aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131: \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControl\", ctx_r2.otherDataForm.controls[\"horizontalDistances\"].controls[hIndex_r4]);\n  }\n}\nfunction HomeComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, HomeComponent_ng_container_6_div_1_Template, 4, 3, \"div\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.getLinesArray(ctx_r0.otherDataForm.controls[\"horizontalLineCount\"].value));\n  }\n}\nfunction HomeComponent_ng_container_10_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const vIndex_r7 = ctx.index;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" Dikeydeki \", vIndex_r7 + 1, \". \\u00E7izginin \", vIndex_r7 === 0 ? \"dikd\\u00F6rtgenin \\u00FCst \\u00E7izgisi ile\" : vIndex_r7 + 1 + \". \\u00E7izgi ile\", \" aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131: \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControl\", ctx_r5.otherDataForm.controls[\"verticalDistances\"].controls[vIndex_r7]);\n  }\n}\nfunction HomeComponent_ng_container_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, HomeComponent_ng_container_10_div_1_Template, 4, 3, \"div\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getLinesArray(ctx_r1.otherDataForm.controls[\"verticalLineCount\"].value));\n  }\n}\nexport class HomeComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: [],\n      verticalDistances: []\n    });\n  }\n  ngOnInit() {}\n  onSubmit() {\n    // Access the values of distances for horizontal and vertical lines\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n    // Log the distances for horizontal and vertical lines\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n    // Clear the form after submission (optional)\n    this.otherDataForm.reset();\n  }\n  getLinesArray(lineCount) {\n    return Array(lineCount).fill(0).map((_, index) => index + 1);\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 13,\n  vars: 3,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"flex-end\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"horizontalLineCount\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"horizontalLineCount\", \"name\", \"horizontalLineCount\", \"formControlName\", \"horizontalLineCount\", 1, \"form-control\", \"form-control-sm\"], [4, \"ngIf\"], [\"for\", \"verticalLineCount\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"verticalLineCount\", \"name\", \"verticalLineCount\", \"formControlName\", \"verticalLineCount\", 1, \"form-control\", \"form-control-sm\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mt-3\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"number\", 1, \"form-control\", \"form-control-sm\", 3, \"formControl\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\", 3);\n      i0.ɵɵtext(4, \"Yatayda ka\\u00E7 adet \\u00E7izgi olsun:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 4);\n      i0.ɵɵtemplate(6, HomeComponent_ng_container_6_Template, 2, 1, \"ng-container\", 5);\n      i0.ɵɵelementStart(7, \"label\", 6);\n      i0.ɵɵtext(8, \"Dikeyde ka\\u00E7 adet \\u00E7izgi olsun:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵtemplate(10, HomeComponent_ng_container_10_Template, 2, 1, \"ng-container\", 5);\n      i0.ɵɵelementStart(11, \"button\", 8);\n      i0.ɵɵtext(12, \"G\\u00F6nder\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.otherDataForm.controls[\"horizontalLineCount\"].value > 0);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.otherDataForm.controls[\"verticalLineCount\"].value > 0);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormControlDirective, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;IAOQA,2BAA2H;IAEvHA,YAGF;IAAAA,iBAAQ;IACRA,4BAA2I;IAC7IA,iBAAM;;;;;IALFA,eAGF;IAHEA,6NAGF;IACqBA,eAA8E;IAA9EA,sGAA8E;;;;;IAPvGA,6BAA8E;IAC5EA,6EAOM;IACRA,0BAAe;;;;IARmBA,eAAuE;IAAvEA,0GAAuE;;;;;IAcvGA,2BAAuH;IAEnHA,YAGF;IAAAA,iBAAQ;IACRA,4BAAyI;IAC3IA,iBAAM;;;;;IALFA,eAGF;IAHEA,kOAGF;IACqBA,eAA4E;IAA5EA,oGAA4E;;;;;IAPrGA,6BAA4E;IAC1EA,8EAOM;IACRA,0BAAe;;;;IARiBA,eAAqE;IAArEA,wGAAqE;;;ACb3G,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAC7B,IAAI,CAACC,aAAa,GAAG,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;MAC1CC,KAAK,EAAE,IAAI;MACXC,MAAM,EAAE,IAAI;MACZC,eAAe,EAAE,IAAI;MACrBC,aAAa,EAAE,IAAI;MACnBC,mBAAmB,EAAE,EAAE;MACvBC,iBAAiB,EAAE;KACpB,CAAC;EACJ;EAEAC,QAAQ,IAAU;EAElBC,QAAQ;IACN;IACA,MAAMH,mBAAmB,GAAG,IAAI,CAACN,aAAa,CAACU,KAAK,CAACJ,mBAAmB;IACxE,MAAMC,iBAAiB,GAAG,IAAI,CAACP,aAAa,CAACU,KAAK,CAACH,iBAAiB;IAEpE;IACAI,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEN,mBAAmB,CAAC;IACzDK,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEL,iBAAiB,CAAC;IAErD;IACA,IAAI,CAACP,aAAa,CAACa,KAAK,EAAE;EAC5B;EAEAC,aAAa,CAACC,SAAiB;IAC7B,OAAOC,KAAK,CAACD,SAAS,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,GAAG,CAAC,CAAC;EAC9D;;AA/BWvB,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAwB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDR1B7B,8BAA2F;MAEjFA;QAAA,OAAY8B,cAAU;MAAA,EAAC;MAC3B9B,gCAA8C;MAAAA,uDAA6B;MAAAA,iBAAQ;MACnFA,2BAAsJ;MAEtJA,gFASe;MAEfA,gCAA4C;MAAAA,uDAA6B;MAAAA,iBAAQ;MACjFA,2BAAgJ;MAEhJA,kFASe;MAEfA,kCAAmD;MAAAA,4BAAM;MAAAA,iBAAS;;;MA7BtCA,eAA2B;MAA3BA,6CAA2B;MAIxCA,eAA6D;MAA7DA,kFAA6D;MAc7DA,eAA2D;MAA3DA,gFAA2D","names":["i0","HomeComponent","constructor","formBuilder","otherDataForm","group","width","height","horizontalLines","verticalLines","horizontalDistances","verticalDistances","ngOnInit","onSubmit","value","console","log","reset","getLinesArray","lineCount","Array","fill","map","_","index","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.html","C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["<div style=\"display: flex; justify-content: flex-end; align-items: center; height: 100vh;\">\n  <div class=\"col-md-4\">\n    <form (ngSubmit)=\"onSubmit()\" [formGroup]=\"otherDataForm\" class=\"form-group mb-3\">\n      <label for=\"horizontalLineCount\" class=\"mr-2\">Yatayda kaç adet çizgi olsun:</label>\n      <input type=\"number\" id=\"horizontalLineCount\" name=\"horizontalLineCount\" class=\"form-control form-control-sm\" formControlName=\"horizontalLineCount\" />\n\n      <ng-container *ngIf=\"otherDataForm.controls['horizontalLineCount'].value > 0\">\n        <div *ngFor=\"let horizontalLine of getLinesArray(otherDataForm.controls['horizontalLineCount'].value); let hIndex = index\">\n          <label>\n            Yataydaki {{ hIndex + 1 }}. çizginin\n            {{ hIndex === 0 ? 'dikdörtgenin sol çizgisi ile' : (hIndex + 1) + '. çizgi ile' }}\n            arasındaki mesafe kaç mm olmalı:\n          </label>\n          <input type=\"number\" [formControl]=\"otherDataForm.controls['horizontalDistances'].controls[hIndex]\" class=\"form-control form-control-sm\" />\n        </div>\n      </ng-container>\n\n      <label for=\"verticalLineCount\" class=\"mr-2\">Dikeyde kaç adet çizgi olsun:</label>\n      <input type=\"number\" id=\"verticalLineCount\" name=\"verticalLineCount\" class=\"form-control form-control-sm\" formControlName=\"verticalLineCount\" />\n\n      <ng-container *ngIf=\"otherDataForm.controls['verticalLineCount'].value > 0\">\n        <div *ngFor=\"let verticalLine of getLinesArray(otherDataForm.controls['verticalLineCount'].value); let vIndex = index\">\n          <label>\n            Dikeydeki {{ vIndex + 1 }}. çizginin\n            {{ vIndex === 0 ? 'dikdörtgenin üst çizgisi ile' : (vIndex + 1) + '. çizgi ile' }}\n            arasındaki mesafe kaç mm olmalı:\n          </label>\n          <input type=\"number\" [formControl]=\"otherDataForm.controls['verticalDistances'].controls[vIndex]\" class=\"form-control form-control-sm\" />\n        </div>\n      </ng-container>\n\n      <button type=\"submit\" class=\"btn btn-primary mt-3\">Gönder</button>\n    </form>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n  otherDataForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: [],\n      verticalDistances: []\n    });\n  }\n\n  ngOnInit(): void {}\n\n  onSubmit(): void {\n    // Access the values of distances for horizontal and vertical lines\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n\n    // Log the distances for horizontal and vertical lines\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n\n    // Clear the form after submission (optional)\n    this.otherDataForm.reset();\n  }\n\n  getLinesArray(lineCount: number): number[] {\n    return Array(lineCount).fill(0).map((_, index) => index + 1);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}