{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport class HomeComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({})\n    });\n  }\n  onSubmit() {\n    console.warn('Your order has been submitted', this.otherDataForm.value);\n    this.otherDataForm.reset();\n  }\n  getLinesArray(lineCount) {\n    return Array(lineCount).fill(0).map((_, index) => index + 1);\n  }\n  createHorizontalDistances() {\n    const horizontalLines = this.otherDataForm.get('horizontalLines')?.value;\n    const horizontalDistances = this.otherDataForm.get('horizontalDistances');\n    horizontalDistances.reset();\n    for (let i = 0; i < horizontalLines; i++) {\n      horizontalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n  }\n  createVerticalDistances() {\n    const verticalLines = this.otherDataForm.get('verticalLines')?.value;\n    const verticalDistances = this.otherDataForm.get('verticalDistances');\n    verticalDistances.reset();\n    for (let i = 0; i < verticalLines; i++) {\n      verticalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 0,\n  vars: 0,\n  template: function HomeComponent_Template(rf, ctx) {},\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,aAAa;EAGxBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAC7B,IAAI,CAACC,aAAa,GAAG,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;MAC1CC,KAAK,EAAE,IAAI;MACXC,MAAM,EAAE,IAAI;MACZC,eAAe,EAAE,IAAI;MACrBC,aAAa,EAAE,IAAI;MACnBC,mBAAmB,EAAE,IAAI,CAACP,WAAW,CAACE,KAAK,CAAC,EAAE,CAAC;MAC/CM,iBAAiB,EAAE,IAAI,CAACR,WAAW,CAACE,KAAK,CAAC,EAAE;KAC7C,CAAC;EACJ;EAEAO,QAAQ;IACNC,OAAO,CAACC,IAAI,CAAC,+BAA+B,EAAE,IAAI,CAACV,aAAa,CAACW,KAAK,CAAC;IACvE,IAAI,CAACX,aAAa,CAACY,KAAK,EAAE;EAC5B;EAEAC,aAAa,CAACC,SAAiB;IAC7B,OAAOC,KAAK,CAACD,SAAS,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,GAAG,CAAC,CAAC;EAC9D;EAEAC,yBAAyB;IACvB,MAAMhB,eAAe,GAAG,IAAI,CAACJ,aAAa,CAACqB,GAAG,CAAC,iBAAiB,CAAC,EAAEV,KAAK;IACxE,MAAML,mBAAmB,GAAG,IAAI,CAACN,aAAa,CAACqB,GAAG,CAAC,qBAAqB,CAAc;IACtFf,mBAAmB,CAACM,KAAK,EAAE;IAC3B,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlB,eAAe,EAAEkB,CAAC,EAAE,EAAE;MACxChB,mBAAmB,CAACiB,UAAU,CAAC,YAAYD,CAAC,EAAE,EAAE,IAAI,CAACvB,WAAW,CAACyB,OAAO,CAAC,IAAI,CAAC,CAAC;;EAEnF;EAEAC,uBAAuB;IACrB,MAAMpB,aAAa,GAAG,IAAI,CAACL,aAAa,CAACqB,GAAG,CAAC,eAAe,CAAC,EAAEV,KAAK;IACpE,MAAMJ,iBAAiB,GAAG,IAAI,CAACP,aAAa,CAACqB,GAAG,CAAC,mBAAmB,CAAc;IAClFd,iBAAiB,CAACK,KAAK,EAAE;IACzB,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,aAAa,EAAEiB,CAAC,EAAE,EAAE;MACtCf,iBAAiB,CAACgB,UAAU,CAAC,YAAYD,CAAC,EAAE,EAAE,IAAI,CAACvB,WAAW,CAACyB,OAAO,CAAC,IAAI,CAAC,CAAC;;EAEjF;;AAvCW3B,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAA6B;EAAAC;EAAAC;EAAAC;EAAAC;AAAA","names":["HomeComponent","constructor","formBuilder","otherDataForm","group","width","height","horizontalLines","verticalLines","horizontalDistances","verticalDistances","onSubmit","console","warn","value","reset","getLinesArray","lineCount","Array","fill","map","_","index","createHorizontalDistances","get","i","addControl","control","createVerticalDistances","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent {\n  otherDataForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.otherDataForm = this.formBuilder.group({\n      width: null,\n      height: null,\n      horizontalLines: null,\n      verticalLines: null,\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({})\n    });\n  }\n\n  onSubmit(): void {\n    console.warn('Your order has been submitted', this.otherDataForm.value);\n    this.otherDataForm.reset();\n  }\n\n  getLinesArray(lineCount: number): number[] {\n    return Array(lineCount).fill(0).map((_, index) => index + 1);\n  }\n\n  createHorizontalDistances(): void {\n    const horizontalLines = this.otherDataForm.get('horizontalLines')?.value;\n    const horizontalDistances = this.otherDataForm.get('horizontalDistances') as FormGroup;\n    horizontalDistances.reset();\n    for (let i = 0; i < horizontalLines; i++) {\n      horizontalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n  }\n\n  createVerticalDistances(): void {\n    const verticalLines = this.otherDataForm.get('verticalLines')?.value;\n    const verticalDistances = this.otherDataForm.get('verticalDistances') as FormGroup;\n    verticalDistances.reset();\n    for (let i = 0; i < verticalLines; i++) {\n      verticalDistances.addControl(`distance_${i}`, this.formBuilder.control(null));\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}