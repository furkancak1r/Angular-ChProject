{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport class HomeComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.otherDataForm = this.formBuilder.group({\n      width: [null, Validators.required],\n      height: [null, Validators.required],\n      horizontalLines: [null, Validators.required],\n      verticalLines: [null, Validators.required],\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({})\n    });\n  }\n  ngOnInit() {}\n  onSubmit() {\n    // Access the values of distances for horizontal and vertical lines\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n    // Log the distances for horizontal and vertical lines\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n    // Clear the form after submission (optional)\n    this.otherDataForm.reset();\n  }\n  getLinesArray(lineCount) {\n    return Array(lineCount).fill(0).map((_, index) => index + 1);\n  }\n  createHorizontalDistances() {\n    const horizontalLines = this.otherDataForm.get('horizontalLines')?.value;\n    const horizontalDistances = this.otherDataForm.get('horizontalDistances');\n    horizontalDistances.reset();\n    Object.keys(horizontalDistances.controls).forEach(key => {\n      horizontalDistances.setControl(key, null);\n    });\n    for (let i = 0; i < horizontalLines; i++) {\n      horizontalDistances.addControl(`distance_${i}`, this.formBuilder.control(null, Validators.required));\n    }\n  }\n  createVerticalDistances() {\n    const verticalLines = this.otherDataForm.get('verticalLines')?.value;\n    const verticalDistances = this.otherDataForm.get('verticalDistances');\n    verticalDistances.reset();\n    Object.keys(verticalDistances.controls).forEach(key => {\n      verticalDistances.setControl(key, null);\n    });\n    for (let i = 0; i < verticalLines; i++) {\n      verticalDistances.addControl(`distance_${i}`, this.formBuilder.control(null, Validators.required));\n    }\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 0,\n  vars: 0,\n  template: function HomeComponent_Template(rf, ctx) {},\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","HomeComponent","constructor","formBuilder","otherDataForm","group","width","required","height","horizontalLines","verticalLines","horizontalDistances","verticalDistances","ngOnInit","onSubmit","value","console","log","reset","getLinesArray","lineCount","Array","fill","map","_","index","createHorizontalDistances","get","Object","keys","controls","forEach","key","setControl","i","addControl","control","createVerticalDistances","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n  otherDataForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.otherDataForm = this.formBuilder.group({\n      width: [null, Validators.required],\n      height: [null, Validators.required],\n      horizontalLines: [null, Validators.required],\n      verticalLines: [null, Validators.required],\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({}),\n    });\n  }\n\n  ngOnInit(): void {}\n\n  onSubmit(): void {\n    // Access the values of distances for horizontal and vertical lines\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n\n    // Log the distances for horizontal and vertical lines\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n\n    // Clear the form after submission (optional)\n    this.otherDataForm.reset();\n  }\n\n  getLinesArray(lineCount: number): number[] {\n    return Array(lineCount).fill(0).map((_, index) => index + 1);\n  }\n\n  createHorizontalDistances(): void {\n    const horizontalLines = this.otherDataForm.get('horizontalLines')?.value;\n    const horizontalDistances = this.otherDataForm.get('horizontalDistances') as FormGroup;\n    horizontalDistances.reset();\n    Object.keys(horizontalDistances.controls).forEach(key => {\n      horizontalDistances.setControl(key, null);\n    });\n    for (let i = 0; i < horizontalLines; i++) {\n      horizontalDistances.addControl(\n        `distance_${i}`,\n        this.formBuilder.control(null, Validators.required)\n      );\n    }\n  }\n\n  createVerticalDistances(): void {\n    const verticalLines = this.otherDataForm.get('verticalLines')?.value;\n    const verticalDistances = this.otherDataForm.get('verticalDistances') as FormGroup;\n    verticalDistances.reset();\n    Object.keys(verticalDistances.controls).forEach(key => {\n      verticalDistances.setControl(key, null);\n    });\n    for (let i = 0; i < verticalLines; i++) {\n      verticalDistances.addControl(\n        `distance_${i}`,\n        this.formBuilder.control(null, Validators.required)\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}