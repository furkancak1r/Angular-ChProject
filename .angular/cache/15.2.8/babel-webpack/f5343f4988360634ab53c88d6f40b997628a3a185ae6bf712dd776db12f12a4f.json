{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nconst _c0 = [\"canvas\"];\nexport class HomeComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n  }\n  ngOnInit() {\n    this.initializeForm();\n    this.drawRectangle();\n    this.subscribeToFormChanges();\n  }\n  initializeForm() {\n    this.otherDataForm = this.formBuilder.group({\n      width: [null, [Validators.required, Validators.max(1000)]],\n      height: [null, [Validators.required, Validators.max(1000)]],\n      horizontalDistances: [[]],\n      verticalDistances: [[]]\n    });\n  }\n  subscribeToFormChanges() {\n    this.otherDataForm.valueChanges.subscribe(() => {\n      setTimeout(() => {\n        this.drawRectangle();\n      });\n    });\n  }\n  drawRectangle() {\n    const width = this.otherDataForm.value.width;\n    const height = this.otherDataForm.value.height;\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n    if (!width || !height) {\n      return;\n    }\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    const scale = 10; // Scale factor for drawing on canvas\n    canvas.width = width / scale;\n    canvas.height = height / scale;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const offsetX = 10; // Offset for drawing the rectangle\n    const offsetY = 10;\n    ctx.strokeRect(offsetX, offsetY, width / scale, height / scale);\n    ctx.font = '12px Arial';\n    ctx.fillStyle = 'black';\n    ctx.fillText('0,0', offsetX, offsetY - 5);\n    // Adjust the distance text width if it exceeds canvas boundaries\n    let textWidth = ctx.measureText(`${width / scale} mm`).width;\n    if (offsetX < textWidth + 5) {\n      textWidth = offsetX - 5;\n    }\n    ctx.fillText(`Width: ${width / scale} mm`, offsetX + 5, offsetY - 5);\n    ctx.fillText(`Height: ${height / scale} mm`, offsetX + 5, offsetY + 20);\n    const drawDistance = (distance, x, y) => {\n      const text = `${distance} mm`;\n      // Ensure distance text stays within canvas\n      let textWidth = ctx.measureText(text).width;\n      if (x + textWidth + 5 > canvas.width / scale) {\n        x = canvas.width / scale - textWidth - 5;\n      }\n      ctx.fillText(text, x, y);\n    };\n    // Draw horizontal distances\n    horizontalDistances.forEach((distance, index) => {\n      const x = offsetX + (index + 1) * (width / (horizontalDistances.length + 1));\n      drawDistance(distance, x, offsetY - 5);\n    });\n    // Draw vertical distances\n    verticalDistances.forEach((distance, index) => {\n      const y = offsetY + (index + 1) * (height / (verticalDistances.length + 1));\n      drawDistance(distance, offsetX - 5, y);\n    });\n  }\n  onSubmit() {\n    console.log(this.otherDataForm.value);\n    // Optionally reset the form after submission\n    this.otherDataForm.reset();\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  viewQuery: function HomeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n    }\n  },\n  decls: 20,\n  vars: 4,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [\"canvas\", \"\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"width\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"width\", \"name\", \"width\", \"formControlName\", \"width\", 1, \"form-control\", \"form-control-sm\", 3, \"max\"], [\"for\", \"height\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"height\", \"name\", \"height\", \"formControlName\", \"height\", 1, \"form-control\", \"form-control-sm\", 3, \"max\"], [\"for\", \"horizontalDistances\", 1, \"mr-2\"], [\"type\", \"text\", \"id\", \"horizontalDistances\", \"name\", \"horizontalDistances\", \"formControlName\", \"horizontalDistances\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"verticalDistances\", 1, \"mr-2\"], [\"type\", \"text\", \"id\", \"verticalDistances\", \"name\", \"verticalDistances\", \"formControlName\", \"verticalDistances\", 1, \"form-control\", \"form-control-sm\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-sm\", \"mt-2\", 3, \"disabled\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"canvas\", null, 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 1)(5, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(6, \"label\", 4);\n      i0.ɵɵtext(7, \"Dikd\\u00F6rtgenin geni\\u015Fli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 5);\n      i0.ɵɵelementStart(9, \"label\", 6);\n      i0.ɵɵtext(10, \"Dikd\\u00F6rtgenin y\\u00FCksekli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 7);\n      i0.ɵɵelementStart(12, \"label\", 8);\n      i0.ɵɵtext(13, \"Yatay uzakl\\u0131klar (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 9);\n      i0.ɵɵelementStart(15, \"label\", 10);\n      i0.ɵɵtext(16, \"Dikey uzakl\\u0131klar (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 11);\n      i0.ɵɵelementStart(18, \"button\", 12);\n      i0.ɵɵtext(19, \" \\u00C7iz \");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"max\", 1000);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"max\", 1000);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"disabled\", !ctx.otherDataForm.valid);\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxValidator, i1.FormGroupDirective, i1.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","HomeComponent","constructor","formBuilder","ngOnInit","initializeForm","drawRectangle","subscribeToFormChanges","otherDataForm","group","width","required","max","height","horizontalDistances","verticalDistances","valueChanges","subscribe","setTimeout","value","canvas","nativeElement","ctx","getContext","scale","clearRect","offsetX","offsetY","strokeRect","font","fillStyle","fillText","textWidth","measureText","drawDistance","distance","x","y","text","forEach","index","length","onSubmit","console","log","reset","selectors","viewQuery","i0"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-home',\n  template: `\n    <div\n      style=\"display: flex; justify-content: space-between; align-items: center; height: 100vh;\"\n    >\n      <div class=\"col-md-4\">\n        <canvas #canvas></canvas>\n      </div>\n      <div class=\"col-md-4\">\n        <form\n          [formGroup]=\"otherDataForm\"\n          (ngSubmit)=\"onSubmit()\"\n          class=\"form-group mb-3\"\n        >\n          <label for=\"width\" class=\"mr-2\">Dikdörtgenin genişliği (mm):</label>\n          <input\n            type=\"number\"\n            id=\"width\"\n            name=\"width\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"width\"\n            [max]=\"1000\"\n          />\n\n          <label for=\"height\" class=\"mr-2\">Dikdörtgenin yüksekliği (mm):</label>\n          <input\n            type=\"number\"\n            id=\"height\"\n            name=\"height\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"height\"\n            [max]=\"1000\"\n          />\n\n          <label for=\"horizontalDistances\" class=\"mr-2\"\n            >Yatay uzaklıklar (mm):</label\n          >\n          <input\n            type=\"text\"\n            id=\"horizontalDistances\"\n            name=\"horizontalDistances\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"horizontalDistances\"\n          />\n\n          <label for=\"verticalDistances\" class=\"mr-2\"\n            >Dikey uzaklıklar (mm):</label\n          >\n          <input\n            type=\"text\"\n            id=\"verticalDistances\"\n            name=\"verticalDistances\"\n            class=\"form-control form-control-sm\"\n            formControlName=\"verticalDistances\"\n          />\n\n          <button\n            type=\"submit\"\n            class=\"btn btn-primary btn-sm mt-2\"\n            [disabled]=\"!otherDataForm.valid\"\n          >\n            Çiz\n          </button>\n        </form>\n      </div>\n    </div>\n  `,\n})\nexport class HomeComponent implements OnInit {\n  @ViewChild('canvas', { static: true })\n  canvas!: ElementRef<HTMLCanvasElement>;\n\n  otherDataForm!: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.initializeForm();\n    this.drawRectangle();\n    this.subscribeToFormChanges();\n  }\n\n  initializeForm(): void {\n    this.otherDataForm = this.formBuilder.group({\n      width: [null, [Validators.required, Validators.max(1000)]],\n      height: [null, [Validators.required, Validators.max(1000)]],\n      horizontalDistances: [[]],\n      verticalDistances: [[]],\n    });\n  }\n\n  subscribeToFormChanges(): void {\n    this.otherDataForm.valueChanges.subscribe(() => {\n      setTimeout(() => {\n        this.drawRectangle();\n      });\n    });\n  }\n\n  drawRectangle(): void {\n    const width = this.otherDataForm.value.width;\n    const height = this.otherDataForm.value.height;\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n\n    if (!width || !height) {\n      return;\n    }\n\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const scale = 10; // Scale factor for drawing on canvas\n\n    canvas.width = width / scale;\n    canvas.height = height / scale;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    const offsetX = 10; // Offset for drawing the rectangle\n    const offsetY = 10;\n\n    ctx.strokeRect(offsetX, offsetY, width / scale, height / scale);\n\n    ctx.font = '12px Arial';\n    ctx.fillStyle = 'black';\n\n    ctx.fillText('0,0', offsetX, offsetY - 5);\n\n    // Adjust the distance text width if it exceeds canvas boundaries\n    let textWidth = ctx.measureText(`${width / scale} mm`).width;\n    if (offsetX < textWidth + 5) {\n      textWidth = offsetX - 5;\n    }\n\n    ctx.fillText(`Width: ${width / scale} mm`, offsetX + 5, offsetY - 5);\n    ctx.fillText(\n      `Height: ${height / scale} mm`,\n      offsetX + 5,\n      offsetY + 20\n    );\n\n    const drawDistance = (distance: number, x: number, y: number): void => {\n      const text = `${distance} mm`;\n\n      // Ensure distance text stays within canvas\n      let textWidth = ctx.measureText(text).width;\n      if (x + textWidth + 5 > canvas.width / scale) {\n        x = canvas.width / scale - textWidth - 5;\n      }\n\n      ctx.fillText(text, x, y);\n    };\n\n    // Draw horizontal distances\n    horizontalDistances.forEach((distance: number, index: number) => {\n      const x =\n        offsetX + (index + 1) * (width / (horizontalDistances.length + 1));\n      drawDistance(distance, x, offsetY - 5);\n    });\n\n    // Draw vertical distances\n    verticalDistances.forEach((distance: number, index: number) => {\n      const y =\n        offsetY + (index + 1) * (height / (verticalDistances.length + 1));\n      drawDistance(distance, offsetX - 5, y);\n    });\n  }\n\n  onSubmit(): void {\n    console.log(this.otherDataForm.value);\n\n    // Optionally reset the form after submission\n    this.otherDataForm.reset();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}