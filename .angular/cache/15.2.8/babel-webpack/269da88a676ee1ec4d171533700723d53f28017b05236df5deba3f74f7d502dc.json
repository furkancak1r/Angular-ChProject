{"ast":null,"code":"import { FormGroup, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction HomeComponent_ng_container_11_ng_container_7_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r4 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r4 === 0 ? \"Yataydaki 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Yataydaki \" + (i_r4 + 1) + \". \\u00E7izginin \" + i_r4 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r4);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r4);\n  }\n}\nfunction HomeComponent_ng_container_11_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 13);\n    i0.ɵɵtemplate(2, HomeComponent_ng_container_11_ng_container_7_ng_container_2_Template, 4, 3, \"ng-container\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"div\", 15);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getLinesArray(ctx_r1.otherDataForm.controls[\"horizontalLines\"].value));\n  }\n}\nfunction HomeComponent_ng_container_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\", 9);\n    i0.ɵɵtext(2, \"Yatayda ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 10);\n    i0.ɵɵelementStart(4, \"label\", 11);\n    i0.ɵɵtext(5, \"Dikeyde ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 12);\n    i0.ɵɵtemplate(7, HomeComponent_ng_container_11_ng_container_7_Template, 4, 1, \"ng-container\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.otherDataForm.controls[\"horizontalLines\"].value > 0 && ctx_r0.otherDataForm.controls[\"verticalLines\"].value > 0);\n  }\n}\nexport class HomeComponent {\n  constructor() {\n    // Chart type\n    this.barChartType = 'bar';\n    // Chart data\n    this.barChartData = [];\n    // Chart labels\n    this.barChartLabels = [];\n    // Chart options\n    this.barChartOptions = {\n      responsive: true,\n      scales: {\n        xAxes: [{\n          ticks: {\n            beginAtZero: true\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            beginAtZero: true\n          }\n        }]\n      }\n    };\n    // Form group\n    this.otherDataForm = new FormGroup({\n      width: new FormControl(),\n      height: new FormControl(),\n      horizontalLines: new FormControl(),\n      verticalLines: new FormControl(),\n      horizontalDistances: new FormGroup({}),\n      verticalDistances: new FormGroup({})\n    });\n  }\n  ngOnInit() {\n    // Calculate the data and labels for the chart\n    this.calculateChartData();\n    this.calculateChartLabels();\n  }\n  calculateChartData() {\n    // Initialize an empty array for the data\n    let data = [];\n    // Loop through the horizontal lines\n    for (let i = 0; i < this.horizontalLines; i++) {\n      // Calculate the height of each line segment\n      let segmentHeight = i === 0 ? this.horizontalDistances[i] : this.horizontalDistances[i] - this.horizontalDistances[i - 1];\n      // Push the segment height to the data array\n      data.push(segmentHeight);\n    }\n    // Push the remaining height to the data array\n    let remainingHeight = this.height - this.horizontalDistances[this.horizontalLines - 1];\n    data.push(remainingHeight);\n    // Set the chart data to the data array\n    this.barChartData = [{\n      data: data,\n      label: 'Height'\n    }];\n  }\n  calculateChartLabels() {\n    // Initialize an empty array for the labels\n    let labels = [];\n    // Loop through the vertical lines\n    for (let i = 0; i < this.verticalLines; i++) {\n      // Calculate the width of each line segment\n      let segmentWidth = i === 0 ? this.verticalDistances[i] : this.verticalDistances[i] - this.verticalDistances[i - 1];\n      // Push the segment width to the labels array\n      labels.push(segmentWidth + ' mm');\n    }\n    // Push the remaining width to the labels array\n    let remainingWidth = this.width - this.verticalDistances[this.verticalLines - 1];\n    labels.push(remainingWidth + ' mm');\n    // Set the chart labels to the labels array\n    this.barChartLabels = labels;\n  }\n  onSubmit() {\n    // Clear the form values and reset the chart data and labels\n    this.otherDataForm.reset();\n    this.barChartData = [];\n    this.barChartLabels = [];\n  }\n  getLinesArray(n) {\n    // Return an array of n numbers from 0 to n-1\n    return Array.from({\n      length: n\n    }, (x, i) => i);\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)();\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  inputs: {\n    width: \"width\",\n    height: \"height\",\n    horizontalLines: \"horizontalLines\",\n    verticalLines: \"verticalLines\",\n    horizontalDistances: \"horizontalDistances\",\n    verticalDistances: \"verticalDistances\"\n  },\n  decls: 12,\n  vars: 6,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [\"ng2-charts\", \"\", 3, \"chartType\", \"chartData\", \"chartLabels\", \"chartOptions\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"width\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"width\", \"name\", \"width\", \"formControlName\", \"width\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"height\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"height\", \"name\", \"height\", \"formControlName\", \"height\", 1, \"form-control\", \"form-control-sm\"], [4, \"ngIf\"], [\"for\", \"horizontalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"horizontalLines\", \"name\", \"horizontalLines\", \"formControlName\", \"horizontalLines\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"verticalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"verticalLines\", \"name\", \"verticalLines\", \"formControlName\", \"verticalLines\", 1, \"form-control\", \"form-control-sm\"], [\"formGroupName\", \"horizontalDistances\"], [4, \"ngFor\", \"ngForOf\"], [\"formGroupName\", \"verticalDistances\"], [\"type\", \"number\", 1, \"form-control\", \"form-control-sm\", 3, \"name\", \"formControlName\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"canvas\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(5, \"label\", 4);\n      i0.ɵɵtext(6, \"Dikd\\u00F6rtgenin geni\\u015Fli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 5);\n      i0.ɵɵelementStart(8, \"label\", 6);\n      i0.ɵɵtext(9, \"Dikd\\u00F6rtgenin y\\u00FCksekli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 7);\n      i0.ɵɵtemplate(11, HomeComponent_ng_container_11_Template, 8, 1, \"ng-container\", 8);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"chartType\", ctx.barChartType)(\"chartData\", ctx.barChartData)(\"chartLabels\", ctx.barChartLabels)(\"chartOptions\", ctx.barChartOptions);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.otherDataForm.controls[\"width\"].value > 0 && ctx.otherDataForm.controls[\"height\"].value > 0);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NumberValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i2.FormGroupName],\n  styles: [\"(()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n \\t\\\"use strict\\\";\\n \\t\\n \\t\\n })()[_ngcontent-%COMP%]\\n;\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","i0","HomeComponent","constructor","responsive","scales","xAxes","ticks","beginAtZero","yAxes","width","height","horizontalLines","verticalLines","horizontalDistances","verticalDistances","ngOnInit","calculateChartData","calculateChartLabels","data","i","segmentHeight","push","remainingHeight","barChartData","label","labels","segmentWidth","remainingWidth","barChartLabels","onSubmit","otherDataForm","reset","getLinesArray","n","Array","from","length","x","selectors","inputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts","C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  // Inputs from the form\n  @Input() width!: number;\n  @Input() height!: number;\n  @Input() horizontalLines!: number;\n  @Input() verticalLines!: number;\n  @Input() horizontalDistances!: number[];\n  @Input() verticalDistances!: number[];\n\n  // Chart type\n  public barChartType = 'bar';\n\n  // Chart data\n  public barChartData: {data: number[], label: string}[] = [];\n\n  // Chart labels\n  public barChartLabels: string[] = [];\n\n  // Chart options\n  public barChartOptions = {\n    responsive: true,\n    scales: {\n      xAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }],\n      yAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }]\n    }\n  };\n\n  // Form group\n  public otherDataForm = new FormGroup({\n    width: new FormControl(),\n    height: new FormControl(),\n    horizontalLines: new FormControl(),\n    verticalLines: new FormControl(),\n    horizontalDistances: new FormGroup({}),\n    verticalDistances: new FormGroup({})\n  });\n\n  constructor() { }\n\n  ngOnInit(): void {\n    // Calculate the data and labels for the chart\n    this.calculateChartData();\n    this.calculateChartLabels();\n  }\n\n  calculateChartData(): void {\n    // Initialize an empty array for the data\n    let data = [];\n\n    // Loop through the horizontal lines\n    for (let i = 0; i < this.horizontalLines; i++) {\n      // Calculate the height of each line segment\n      let segmentHeight = i === 0 ? this.horizontalDistances[i] : this.horizontalDistances[i] - this.horizontalDistances[i - 1];\n\n      // Push the segment height to the data array\n      data.push(segmentHeight);\n    }\n\n    // Push the remaining height to the data array\n    let remainingHeight = this.height - this.horizontalDistances[this.horizontalLines - 1];\n    data.push(remainingHeight);\n\n    // Set the chart data to the data array\n    this.barChartData = [\n      {data: data, label: 'Height'}\n    ];\n  }\n\n  calculateChartLabels(): void {\n    // Initialize an empty array for the labels\n    let labels = [];\n\n    // Loop through the vertical lines\n    for (let i = 0; i < this.verticalLines; i++) {\n      // Calculate the width of each line segment\n      let segmentWidth = i === 0 ? this.verticalDistances[i] : this.verticalDistances[i] - this.verticalDistances[i - 1];\n\n      // Push the segment width to the labels array\n      labels.push(segmentWidth + ' mm');\n    }\n\n    // Push the remaining width to the labels array\n    let remainingWidth = this.width - this.verticalDistances[this.verticalLines - 1];\n    labels.push(remainingWidth + ' mm');\n\n    // Set the chart labels to the labels array\n    this.barChartLabels = labels;\n  }\n\n  onSubmit(): void {\n    // Clear the form values and reset the chart data and labels\n    this.otherDataForm.reset();\n    this.barChartData = [];\n    this.barChartLabels = [];\n  }\n\n  getLinesArray(n: number): number[] {\n    // Return an array of n numbers from 0 to n-1\n    return Array.from({length: n}, (x, i) => i);\n  }}\n","<div\r\n  style=\"display: flex; justify-content: space-between; align-items: center; height: 100vh;\"\r\n>\r\n  <div class=\"col-md-4\">\r\n    <canvas ng2-charts\r\n      [chartType]=\"barChartType\"\r\n      [chartData]=\"barChartData\"\r\n      [chartLabels]=\"barChartLabels\"\r\n      [chartOptions]=\"barChartOptions\"\r\n    ></canvas>\r\n  </div>\r\n  <div class=\"col-md-4\">\r\n    <form\r\n      [formGroup]=\"otherDataForm\"\r\n      (ngSubmit)=\"onSubmit()\"\r\n      class=\"form-group mb-3\"\r\n    >\r\n      <label for=\"width\" class=\"mr-2\">Dikdörtgenin genişliği (mm):</label>\r\n      <input\r\n        type=\"number\"\r\n        id=\"width\"\r\n        name=\"width\"\r\n        class=\"form-control form-control-sm\"\r\n        formControlName=\"width\"\r\n      />\r\n\r\n      <label for=\"height\" class=\"mr-2\">Dikdörtgenin yüksekliği (mm):</label>\r\n      <input\r\n        type=\"number\"\r\n        id=\"height\"\r\n        name=\"height\"\r\n        class=\"form-control form-control-sm\"\r\n        formControlName=\"height\"\r\n      />\r\n\r\n      <ng-container\r\n        *ngIf=\"\r\n          otherDataForm.controls['width'].value > 0 &&\r\n          otherDataForm.controls['height'].value > 0\r\n        \"\r\n      >\r\n        <label for=\"horizontalLines\" class=\"mr-2\"\r\n          >Yatayda kaç adet çizgi olsun:</label\r\n        >\r\n        <input\r\n          type=\"number\"\r\n          id=\"horizontalLines\"\r\n          name=\"horizontalLines\"\r\n          class=\"form-control form-control-sm\"\r\n          formControlName=\"horizontalLines\"\r\n        />\r\n\r\n        <label for=\"verticalLines\" class=\"mr-2\"\r\n          >Dikeyde kaç adet çizgi olsun:</label\r\n        >\r\n        <input\r\n          type=\"number\"\r\n          id=\"verticalLines\"\r\n          name=\"verticalLines\"\r\n          class=\"form-control form-control-sm\"\r\n          formControlName=\"verticalLines\"\r\n        />\r\n\r\n        <ng-container\r\n          *ngIf=\"\r\n            otherDataForm.controls['horizontalLines'].value > 0 &&\r\n            otherDataForm.controls['verticalLines'].value > 0\r\n          \"\r\n        >\r\n          <div formGroupName=\"horizontalDistances\">\r\n            <ng-container\r\n              *ngFor=\"\r\n                let line of this.getLinesArray(\r\n                  otherDataForm.controls['horizontalLines'].value\r\n                );\r\n                let i = index\r\n              \"\r\n            >\r\n              <!-- this anahtar kelimesini ekledim -->\r\n              <label>\r\n                {{\r\n                  i === 0\r\n                    ? 'Yataydaki 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:'\r\n                    : 'Yataydaki ' +\r\n                      (i + 1) +\r\n                      '. çizginin ' +\r\n                      i +\r\n                      '. çizgi ile arasındaki mesafe kaç mm olmalı:'\r\n                }}\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"{{ 'distance_' + i }}\"\r\n                  class=\"form-control form-control-sm\"\r\n                  formControlName=\"{{ 'distance_' + i }}\"\r\n                />\r\n              </label>\r\n            </ng-container>\r\n          </div>\r\n\r\n          <div formGroupName=\"verticalDistances\">\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}