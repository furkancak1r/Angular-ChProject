{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction HomeComponent_ng_container_9_ng_container_7_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r5 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r5 === 0 ? \"Yataydaki 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Yataydaki \" + (i_r5 + 1) + \". \\u00E7izginin \" + i_r5 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r5);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r5);\n  }\n}\nfunction HomeComponent_ng_container_9_ng_container_7_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"input\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r7 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i_r7 === 0 ? \"Dikeyde 1. \\u00E7izginin dikd\\u00F6rtgen ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\" : \"Dikeyde \" + (i_r7 + 1) + \". \\u00E7izginin \" + i_r7 + \". \\u00E7izgi ile aras\\u0131ndaki mesafe ka\\u00E7 mm olmal\\u0131:\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", \"distance_\" + i_r7);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", \"distance_\" + i_r7);\n  }\n}\nfunction HomeComponent_ng_container_9_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 13);\n    i0.ɵɵtemplate(2, HomeComponent_ng_container_9_ng_container_7_ng_container_2_Template, 4, 3, \"ng-container\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 15);\n    i0.ɵɵtemplate(4, HomeComponent_ng_container_9_ng_container_7_ng_container_4_Template, 4, 3, \"ng-container\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getLinesArray(ctx_r1.otherDataForm.controls[\"horizontalLines\"].value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getLinesArray(ctx_r1.otherDataForm.controls[\"verticalLines\"].value));\n  }\n}\nfunction HomeComponent_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"label\", 9);\n    i0.ɵɵtext(2, \"Yatayda ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"input\", 10);\n    i0.ɵɵlistener(\"change\", function HomeComponent_ng_container_9_Template_input_change_3_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.createHorizontalDistances());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"label\", 11);\n    i0.ɵɵtext(5, \"Dikeyde ka\\u00E7 adet \\u00E7izgi olsun:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"input\", 12);\n    i0.ɵɵlistener(\"change\", function HomeComponent_ng_container_9_Template_input_change_6_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.createVerticalDistances());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, HomeComponent_ng_container_9_ng_container_7_Template, 5, 2, \"ng-container\", 7);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.otherDataForm.controls[\"horizontalLines\"].value > 0 && ctx_r0.otherDataForm.controls[\"verticalLines\"].value > 0);\n  }\n}\nexport class HomeComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.otherDataForm = this.formBuilder.group({\n      width: [null, Validators.required],\n      height: [null, Validators.required],\n      horizontalLines: [null, Validators.required],\n      verticalLines: [null, Validators.required],\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({})\n    });\n  }\n  ngOnInit() {}\n  onSubmit() {\n    // Access the values of distances for horizontal and vertical lines\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n    // Log the distances for horizontal and vertical lines\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n    // Clear the form after submission (optional)\n    this.otherDataForm.reset();\n  }\n  getLinesArray(lineCount) {\n    return Array(lineCount).fill(0).map((_, index) => index + 1);\n  }\n  createHorizontalDistances() {\n    const horizontalLines = this.otherDataForm.get('horizontalLines')?.value;\n    const horizontalDistances = this.otherDataForm.get('horizontalDistances');\n    horizontalDistances.reset();\n    Object.keys(horizontalDistances.controls).forEach(key => {\n      horizontalDistances.setControl(key, null);\n    });\n    for (let i = 0; i < horizontalLines; i++) {\n      horizontalDistances.addControl(`distance_${i}`, this.formBuilder.control(null, Validators.required));\n    }\n  }\n  createVerticalDistances() {\n    const verticalLines = this.otherDataForm.get('verticalLines')?.value;\n    const verticalDistances = this.otherDataForm.get('verticalDistances');\n    verticalDistances.reset();\n    Object.keys(verticalDistances.controls).forEach(key => {\n      verticalDistances.setControl(key, null);\n    });\n    for (let i = 0; i < verticalLines; i++) {\n      verticalDistances.addControl(`distance_${i}`, this.formBuilder.control(null, Validators.required));\n    }\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 12,\n  vars: 2,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"flex-end\", \"align-items\", \"center\", \"height\", \"100vh\"], [1, \"col-md-4\"], [1, \"form-group\", \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"width\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"width\", \"name\", \"width\", \"formControlName\", \"width\", 1, \"form-control\", \"form-control-sm\"], [\"for\", \"height\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"height\", \"name\", \"height\", \"formControlName\", \"height\", 1, \"form-control\", \"form-control-sm\"], [4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"for\", \"horizontalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"horizontalLines\", \"name\", \"horizontalLines\", \"formControlName\", \"horizontalLines\", 1, \"form-control\", \"form-control-sm\", 3, \"change\"], [\"for\", \"verticalLines\", 1, \"mr-2\"], [\"type\", \"number\", \"id\", \"verticalLines\", \"name\", \"verticalLines\", \"formControlName\", \"verticalLines\", 1, \"form-control\", \"form-control-sm\", 3, \"change\"], [\"formGroupName\", \"horizontalDistances\"], [4, \"ngFor\", \"ngForOf\"], [\"formGroupName\", \"verticalDistances\"], [\"type\", \"number\", 1, \"form-control\", \"form-control-sm\", 3, \"name\", \"formControlName\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\", 3);\n      i0.ɵɵtext(4, \"Dikd\\u00F6rtgenin geni\\u015Fli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 4);\n      i0.ɵɵelementStart(6, \"label\", 5);\n      i0.ɵɵtext(7, \"Dikd\\u00F6rtgenin y\\u00FCksekli\\u011Fi (mm):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 6);\n      i0.ɵɵtemplate(9, HomeComponent_ng_container_9_Template, 8, 1, \"ng-container\", 7);\n      i0.ɵɵelementStart(10, \"button\", 8);\n      i0.ɵɵtext(11, \"G\\u00F6nder\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.otherDataForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.otherDataForm.controls[\"width\"].value > 0 && ctx.otherDataForm.controls[\"height\"].value > 0);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","HomeComponent","constructor","formBuilder","otherDataForm","group","width","required","height","horizontalLines","verticalLines","horizontalDistances","verticalDistances","ngOnInit","onSubmit","value","console","log","reset","getLinesArray","lineCount","Array","fill","map","_","index","createHorizontalDistances","get","Object","keys","controls","forEach","key","setControl","i","addControl","control","createVerticalDistances","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.ts","C:\\Program Files (x86)\\Kodlar\\Furkan_ChProject\\ChProject_Client\\ChProject-Angular-RectangleDrawer\\src\\app\\home\\home.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n  otherDataForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.otherDataForm = this.formBuilder.group({\n      width: [null, Validators.required],\n      height: [null, Validators.required],\n      horizontalLines: [null, Validators.required],\n      verticalLines: [null, Validators.required],\n      horizontalDistances: this.formBuilder.group({}),\n      verticalDistances: this.formBuilder.group({}),\n    });\n  }\n\n  ngOnInit(): void {}\n\n  onSubmit(): void {\n    // Access the values of distances for horizontal and vertical lines\n    const horizontalDistances = this.otherDataForm.value.horizontalDistances;\n    const verticalDistances = this.otherDataForm.value.verticalDistances;\n\n    // Log the distances for horizontal and vertical lines\n    console.log('Horizontal Distances:', horizontalDistances);\n    console.log('Vertical Distances:', verticalDistances);\n\n    // Clear the form after submission (optional)\n    this.otherDataForm.reset();\n  }\n\n  getLinesArray(lineCount: number): number[] {\n    return Array(lineCount).fill(0).map((_, index) => index + 1);\n  }\n\n  createHorizontalDistances(): void {\n    const horizontalLines = this.otherDataForm.get('horizontalLines')?.value;\n    const horizontalDistances = this.otherDataForm.get('horizontalDistances') as FormGroup;\n    horizontalDistances.reset();\n    Object.keys(horizontalDistances.controls).forEach(key => {\n      horizontalDistances.setControl(key, null);\n    });\n    for (let i = 0; i < horizontalLines; i++) {\n      horizontalDistances.addControl(\n        `distance_${i}`,\n        this.formBuilder.control(null, Validators.required)\n      );\n    }\n  }\n\n  createVerticalDistances(): void {\n    const verticalLines = this.otherDataForm.get('verticalLines')?.value;\n    const verticalDistances = this.otherDataForm.get('verticalDistances') as FormGroup;\n    verticalDistances.reset();\n    Object.keys(verticalDistances.controls).forEach(key => {\n      verticalDistances.setControl(key, null);\n    });\n    for (let i = 0; i < verticalLines; i++) {\n      verticalDistances.addControl(\n        `distance_${i}`,\n        this.formBuilder.control(null, Validators.required)\n      );\n    }\n  }\n}\n","<div style=\"display: flex; justify-content: flex-end; align-items: center; height: 100vh;\">\n  <div class=\"col-md-4\">\n    <form [formGroup]=\"otherDataForm\" (ngSubmit)=\"onSubmit()\" class=\"form-group mb-3\">\n      <label for=\"width\" class=\"mr-2\">Dikdörtgenin genişliği (mm):</label>\n      <input type=\"number\" id=\"width\" name=\"width\" class=\"form-control form-control-sm\" formControlName=\"width\" />\n\n      <label for=\"height\" class=\"mr-2\">Dikdörtgenin yüksekliği (mm):</label>\n      <input type=\"number\" id=\"height\" name=\"height\" class=\"form-control form-control-sm\" formControlName=\"height\" />\n\n      <ng-container *ngIf=\"otherDataForm.controls['width'].value > 0 && otherDataForm.controls['height'].value > 0\">\n        <label for=\"horizontalLines\" class=\"mr-2\">Yatayda kaç adet çizgi olsun:</label>\n        <input type=\"number\" id=\"horizontalLines\" name=\"horizontalLines\" class=\"form-control form-control-sm\" formControlName=\"horizontalLines\" (change)=\"createHorizontalDistances()\" />\n\n        <label for=\"verticalLines\" class=\"mr-2\">Dikeyde kaç adet çizgi olsun:</label>\n        <input type=\"number\" id=\"verticalLines\" name=\"verticalLines\" class=\"form-control form-control-sm\" formControlName=\"verticalLines\" (change)=\"createVerticalDistances()\" />\n\n        <ng-container *ngIf=\"otherDataForm.controls['horizontalLines'].value > 0 && otherDataForm.controls['verticalLines'].value > 0\">\n          <div formGroupName=\"horizontalDistances\">\n            <ng-container *ngFor=\"let line of getLinesArray(otherDataForm.controls['horizontalLines'].value); let i = index\">\n              <label>\n                {{ i === 0 ? 'Yataydaki 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:' : 'Yataydaki ' + (i + 1) + '. çizginin ' + i + '. çizgi ile arasındaki mesafe kaç mm olmalı:' }}\n                <input type=\"number\" name=\"{{ 'distance_' + i }}\" class=\"form-control form-control-sm\" formControlName=\"{{ 'distance_' + i }}\"/>\n              </label>\n            </ng-container>\n          </div>\n\n          <div formGroupName=\"verticalDistances\">\n            <ng-container *ngFor=\"let line of getLinesArray(otherDataForm.controls['verticalLines'].value); let i = index\">\n              <label>\n                {{ i === 0 ? 'Dikeyde 1. çizginin dikdörtgen ile arasındaki mesafe kaç mm olmalı:' : 'Dikeyde ' + (i + 1) + '. çizginin ' + i + '. çizgi ile arasındaki mesafe kaç mm olmalı:' }}\n                <input type=\"number\" name=\"{{ 'distance_' + i }}\" class=\"form-control form-control-sm\" formControlName=\"{{ 'distance_' + i }}\"/>\n              </label>\n            </ng-container>\n          </div>\n        </ng-container>\n      </ng-container>\n\n      <button type=\"submit\" class=\"btn btn-primary\">Gönder</button>\n    </form>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}