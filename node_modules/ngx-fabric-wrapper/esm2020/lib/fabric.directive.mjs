import { fabric } from 'fabric';
import ResizeObserver from 'resize-observer-polyfill';
import { Directive, Optional, Inject, Input, Output, EventEmitter } from '@angular/core';
import { FABRIC_CONFIG, FabricConfig, FabricEvents } from './fabric.interfaces';
import * as i0 from "@angular/core";
export class FabricDirective {
    constructor(zone, elementRef, differs, defaults) {
        this.zone = zone;
        this.elementRef = elementRef;
        this.differs = differs;
        this.defaults = defaults;
        this.instance = null;
        this.ro = null;
        this.objectsJSON = null;
        this.initialZoom = null;
        this.initialWidth = null;
        this.initialHeight = null;
        this.configDiff = null;
        this.disabled = false;
        this.drop = new EventEmitter();
        this.dragover = new EventEmitter();
        this.dragenter = new EventEmitter();
        this.dragleave = new EventEmitter();
        this.mouseup = new EventEmitter();
        this.mousedown = new EventEmitter();
        this.mouseover = new EventEmitter();
        this.mouseout = new EventEmitter();
        this.mousemove = new EventEmitter();
        this.mousewheel = new EventEmitter();
        this.mousedblclick = new EventEmitter();
        this.mouseupBefore = new EventEmitter();
        this.mousedownBefore = new EventEmitter();
        this.mousemoveBefore = new EventEmitter();
        this.mouseUp = new EventEmitter();
        this.mouseDown = new EventEmitter();
        this.mouseOver = new EventEmitter();
        this.mouseOut = new EventEmitter();
        this.mouseMove = new EventEmitter();
        this.mouseWheel = new EventEmitter();
        this.mouseDblclick = new EventEmitter();
        this.mouseUpBefore = new EventEmitter();
        this.mouseDownBefore = new EventEmitter();
        this.mouseMoveBefore = new EventEmitter();
        this.pathCreated = new EventEmitter();
        this.alterRender = new EventEmitter();
        this.objectAdded = new EventEmitter();
        this.objectMoved = new EventEmitter();
        this.objectScaled = new EventEmitter();
        this.objectSkewed = new EventEmitter();
        this.objectRotated = new EventEmitter();
        this.objectRemoved = new EventEmitter();
        this.objectModified = new EventEmitter();
        this.objectSelected = new EventEmitter();
        this.objectMoving = new EventEmitter();
        this.objectScaling = new EventEmitter();
        this.objectSkewing = new EventEmitter();
        this.objectRotating = new EventEmitter();
        this.selectionCleared = new EventEmitter();
        this.selectionCreated = new EventEmitter();
        this.selectionUpdated = new EventEmitter();
        this.beforeTransform = new EventEmitter();
        this.beforeSelectionCleared = new EventEmitter();
    }
    set zoom(zoom) {
        this.setZoom(zoom);
    }
    set width(width) {
        this.setWidth(width);
    }
    set height(height) {
        this.setHeight(height);
    }
    ngOnInit() {
        const params = new FabricConfig(this.defaults);
        params.assign(this.config); // Custom configuration
        this.zone.runOutsideAngular(() => {
            if (!this.disabled) {
                this.instance = new fabric.Canvas(this.elementRef.nativeElement, params);
            }
            else {
                this.instance = new fabric.StaticCanvas(this.elementRef.nativeElement, params);
            }
            if (this.initialZoom) {
                this.setZoom(this.initialZoom);
            }
            if (this.initialWidth) {
                this.setWidth(this.initialWidth);
            }
            if (this.initialHeight) {
                this.setHeight(this.initialHeight);
            }
            if (this.objectsJSON !== null) {
                this.loadFromJSON(this.objectsJSON);
            }
        });
        // Add native Fabric event handling
        FabricEvents.forEach((eventName) => {
            const fabricEvent = eventName.replace(/([A-Z])/g, (c) => `:${c.toLowerCase()}`);
            if (this.instance) {
                this.instance.on(fabricEvent, (event) => {
                    this.zone.run(() => {
                        if (this[eventName].observers.length) {
                            this[eventName].emit(event);
                        }
                    });
                });
            }
        });
        if (!this.configDiff) {
            this.configDiff = this.differs.find(this.config || {}).create();
            this.configDiff.diff(this.config || {});
        }
        this.zone.runOutsideAngular(() => {
            this.ro = new ResizeObserver((entries, observer) => {
                const element = this.elementRef.nativeElement.parentElement.parentElement;
                if (!this.initialWidth) {
                    this.setWidth(element.offsetWidth);
                }
                if (!this.initialHeight) {
                    this.setHeight(element.offsetHeight);
                }
            });
            this.ro.observe(this.elementRef.nativeElement.parentElement.parentElement);
        });
    }
    ngOnDestroy() {
        if (this.ro) {
            this.ro.disconnect();
        }
        if (this.instance) {
            this.objectsJSON = this.instance.toObject();
            this.instance.dispose();
            delete this.instance;
            this.instance = null;
        }
    }
    ngDoCheck() {
        if (this.configDiff) {
            const changes = this.configDiff.diff(this.config || {});
            if (changes) {
                this.ngOnDestroy();
                this.ngOnInit();
            }
        }
    }
    ngOnChanges(changes) {
        if (this.instance && changes['disabled']) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                this.ngOnDestroy();
                this.ngOnInit();
            }
        }
    }
    fabric() {
        return this.instance;
    }
    clear() {
        if (this.instance) {
            this.instance.clear();
        }
    }
    render() {
        if (this.instance) {
            this.instance.renderAll();
        }
    }
    setZoom(zoom) {
        this.initialZoom = zoom;
        if (this.instance) {
            this.instance.setZoom(zoom);
        }
    }
    setWidth(width) {
        this.initialWidth = width;
        if (this.instance) {
            this.instance.setWidth(width);
        }
    }
    setHeight(height) {
        this.initialHeight = height;
        if (this.instance) {
            this.instance.setHeight(height);
        }
    }
    loadFromJSON(json, callback, reviverOpt) {
        if (this.instance) {
            this.instance.loadFromJSON(json, () => {
                let renderAll = true;
                if (callback) {
                    renderAll = callback();
                }
                if (renderAll && this.instance) {
                    this.instance.renderAll();
                }
            }, reviverOpt);
        }
    }
}
FabricDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.0", ngImport: i0, type: FabricDirective, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.KeyValueDiffers }, { token: FABRIC_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
FabricDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.0", type: FabricDirective, selector: "[fabric]", inputs: { zoom: "zoom", width: "width", height: "height", disabled: "disabled", config: ["fabric", "config"] }, outputs: { drop: "drop", dragover: "dragover", dragenter: "dragenter", dragleave: "dragleave", mouseup: "mouseup", mousedown: "mousedown", mouseover: "mouseover", mouseout: "mouseout", mousemove: "mousemove", mousewheel: "mousewheel", mousedblclick: "mousedblclick", mouseupBefore: "mouseupBefore", mousedownBefore: "mousedownBefore", mousemoveBefore: "mousemoveBefore", mouseUp: "mouseUp", mouseDown: "mouseDown", mouseOver: "mouseOver", mouseOut: "mouseOut", mouseMove: "mouseMove", mouseWheel: "mouseWheel", mouseDblclick: "mouseDblclick", mouseUpBefore: "mouseUpBefore", mouseDownBefore: "mouseDownBefore", mouseMoveBefore: "mouseMoveBefore", pathCreated: "pathCreated", alterRender: "alterRender", objectAdded: "objectAdded", objectMoved: "objectMoved", objectScaled: "objectScaled", objectSkewed: "objectSkewed", objectRotated: "objectRotated", objectRemoved: "objectRemoved", objectModified: "objectModified", objectSelected: "objectSelected", objectMoving: "objectMoving", objectScaling: "objectScaling", objectSkewing: "objectSkewing", objectRotating: "objectRotating", selectionCleared: "selectionCleared", selectionCreated: "selectionCreated", selectionUpdated: "selectionUpdated", beforeTransform: "beforeTransform", beforeSelectionCleared: "beforeSelectionCleared" }, exportAs: ["ngxFabric"], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.0", ngImport: i0, type: FabricDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[fabric]',
                    exportAs: 'ngxFabric'
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.KeyValueDiffers }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [FABRIC_CONFIG]
                }] }]; }, propDecorators: { zoom: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], disabled: [{
                type: Input
            }], config: [{
                type: Input,
                args: ['fabric']
            }], drop: [{
                type: Output
            }], dragover: [{
                type: Output
            }], dragenter: [{
                type: Output
            }], dragleave: [{
                type: Output
            }], mouseup: [{
                type: Output
            }], mousedown: [{
                type: Output
            }], mouseover: [{
                type: Output
            }], mouseout: [{
                type: Output
            }], mousemove: [{
                type: Output
            }], mousewheel: [{
                type: Output
            }], mousedblclick: [{
                type: Output
            }], mouseupBefore: [{
                type: Output
            }], mousedownBefore: [{
                type: Output
            }], mousemoveBefore: [{
                type: Output
            }], mouseUp: [{
                type: Output
            }], mouseDown: [{
                type: Output
            }], mouseOver: [{
                type: Output
            }], mouseOut: [{
                type: Output
            }], mouseMove: [{
                type: Output
            }], mouseWheel: [{
                type: Output
            }], mouseDblclick: [{
                type: Output
            }], mouseUpBefore: [{
                type: Output
            }], mouseDownBefore: [{
                type: Output
            }], mouseMoveBefore: [{
                type: Output
            }], pathCreated: [{
                type: Output
            }], alterRender: [{
                type: Output
            }], objectAdded: [{
                type: Output
            }], objectMoved: [{
                type: Output
            }], objectScaled: [{
                type: Output
            }], objectSkewed: [{
                type: Output
            }], objectRotated: [{
                type: Output
            }], objectRemoved: [{
                type: Output
            }], objectModified: [{
                type: Output
            }], objectSelected: [{
                type: Output
            }], objectMoving: [{
                type: Output
            }], objectScaling: [{
                type: Output
            }], objectSkewing: [{
                type: Output
            }], objectRotating: [{
                type: Output
            }], selectionCleared: [{
                type: Output
            }], selectionCreated: [{
                type: Output
            }], selectionUpdated: [{
                type: Output
            }], beforeTransform: [{
                type: Output
            }], beforeSelectionCleared: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,