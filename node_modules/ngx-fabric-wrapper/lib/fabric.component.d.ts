import { AfterViewInit, EventEmitter } from '@angular/core';
import { FabricDirective } from './fabric.directive';
import { FabricConfigInterface } from './fabric.interfaces';
import * as i0 from "@angular/core";
export declare class FabricComponent implements AfterViewInit {
    private json;
    set data(data: string);
    zoom: number | null;
    width: number | null;
    height: number | null;
    disabled: boolean;
    config?: FabricConfigInterface;
    useFabricClass: boolean;
    dataLoaded: EventEmitter<any>;
    drop: EventEmitter<any>;
    dragover: EventEmitter<any>;
    dragenter: EventEmitter<any>;
    dragleave: EventEmitter<any>;
    mouseup: EventEmitter<any>;
    mousedown: EventEmitter<any>;
    mouseover: EventEmitter<any>;
    mouseout: EventEmitter<any>;
    mousemove: EventEmitter<any>;
    mousewheel: EventEmitter<any>;
    mousedblclick: EventEmitter<any>;
    mouseupBefore: EventEmitter<any>;
    mousedownBefore: EventEmitter<any>;
    mousemoveBefore: EventEmitter<any>;
    mouseUp: EventEmitter<any>;
    mouseDown: EventEmitter<any>;
    mouseOver: EventEmitter<any>;
    mouseOut: EventEmitter<any>;
    mouseMove: EventEmitter<any>;
    mouseWheel: EventEmitter<any>;
    mouseDblclick: EventEmitter<any>;
    mouseUpBefore: EventEmitter<any>;
    mouseDownBefore: EventEmitter<any>;
    mouseMoveBefore: EventEmitter<any>;
    pathCreated: EventEmitter<any>;
    alterRender: EventEmitter<any>;
    objectAdded: EventEmitter<any>;
    objectMoved: EventEmitter<any>;
    objectScaled: EventEmitter<any>;
    objectSkewed: EventEmitter<any>;
    objectRotated: EventEmitter<any>;
    objectRemoved: EventEmitter<any>;
    objectModified: EventEmitter<any>;
    objectSelected: EventEmitter<any>;
    objectMoving: EventEmitter<any>;
    objectScaling: EventEmitter<any>;
    objectSkewing: EventEmitter<any>;
    objectRotating: EventEmitter<any>;
    selectionCleared: EventEmitter<any>;
    selectionCreated: EventEmitter<any>;
    selectionUpdated: EventEmitter<any>;
    beforeTransform: EventEmitter<any>;
    beforeSelectionCleared: EventEmitter<any>;
    directiveRef?: FabricDirective;
    constructor();
    ngAfterViewInit(): void;
    private setJSON;
    static ɵfac: i0.ɵɵFactoryDeclaration<FabricComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FabricComponent, "fabric", ["ngxFabric"], { "data": "data"; "zoom": "zoom"; "width": "width"; "height": "height"; "disabled": "disabled"; "config": "config"; "useFabricClass": "useFabricClass"; }, { "dataLoaded": "dataLoaded"; "drop": "drop"; "dragover": "dragover"; "dragenter": "dragenter"; "dragleave": "dragleave"; "mouseup": "mouseup"; "mousedown": "mousedown"; "mouseover": "mouseover"; "mouseout": "mouseout"; "mousemove": "mousemove"; "mousewheel": "mousewheel"; "mousedblclick": "mousedblclick"; "mouseupBefore": "mouseupBefore"; "mousedownBefore": "mousedownBefore"; "mousemoveBefore": "mousemoveBefore"; "mouseUp": "mouseUp"; "mouseDown": "mouseDown"; "mouseOver": "mouseOver"; "mouseOut": "mouseOut"; "mouseMove": "mouseMove"; "mouseWheel": "mouseWheel"; "mouseDblclick": "mouseDblclick"; "mouseUpBefore": "mouseUpBefore"; "mouseDownBefore": "mouseDownBefore"; "mouseMoveBefore": "mouseMoveBefore"; "pathCreated": "pathCreated"; "alterRender": "alterRender"; "objectAdded": "objectAdded"; "objectMoved": "objectMoved"; "objectScaled": "objectScaled"; "objectSkewed": "objectSkewed"; "objectRotated": "objectRotated"; "objectRemoved": "objectRemoved"; "objectModified": "objectModified"; "objectSelected": "objectSelected"; "objectMoving": "objectMoving"; "objectScaling": "objectScaling"; "objectSkewing": "objectSkewing"; "objectRotating": "objectRotating"; "selectionCleared": "selectionCleared"; "selectionCreated": "selectionCreated"; "selectionUpdated": "selectionUpdated"; "beforeTransform": "beforeTransform"; "beforeSelectionCleared": "beforeSelectionCleared"; }, never, never, false, never>;
}
